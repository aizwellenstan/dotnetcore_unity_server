// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: HotfixMessage.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using scg = global::System.Collections.Generic;
namespace ETHotfix {

  #region Enums
  public enum PlayerSceneType {
    Login = 0,
    Lobby = 1,
    Roaming = 2,
    Team = 3,
  }

  public enum TeamLoseType {
    Kicked = 0,
    Disband = 1,
    Other = 2,
    LoadingTimeOut = 3,
  }

  public enum AuthenticationType {
    Token = 0,
    Guest = 1,
    FaceBook = 2,
    AppleId = 3,
  }

  #endregion

  #region Messages
  public partial class PlayerBaseInfo : pb::IMessage {
    private static readonly pb::MessageParser<PlayerBaseInfo> _parser = new pb::MessageParser<PlayerBaseInfo>(() => (PlayerBaseInfo)MessagePool.Instance.Fetch(typeof(PlayerBaseInfo)));
    public static pb::MessageParser<PlayerBaseInfo> Parser { get { return _parser; } }

    private long uid_;
    public long Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    private string name_ = "";
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private int sex_;
    public int Sex {
      get { return sex_; }
      set {
        sex_ = value;
      }
    }

    private int height_;
    public int Height {
      get { return height_; }
      set {
        height_ = value;
      }
    }

    private int weight_;
    public int Weight {
      get { return weight_; }
      set {
        weight_ = value;
      }
    }

    private int location_;
    public int Location {
      get { return location_; }
      set {
        location_ = value;
      }
    }

    private int birthday_;
    public int Birthday {
      get { return birthday_; }
      set {
        birthday_ = value;
      }
    }

    private long createAt_;
    public long CreateAt {
      get { return createAt_; }
      set {
        createAt_ = value;
      }
    }

    private long lastOnlineAt_;
    public long LastOnlineAt {
      get { return lastOnlineAt_; }
      set {
        lastOnlineAt_ = value;
      }
    }

    private long coin_;
    public long Coin {
      get { return coin_; }
      set {
        coin_ = value;
      }
    }

    private global::ETHotfix.PlayerCharSetting charSetting_;
    public global::ETHotfix.PlayerCharSetting CharSetting {
      get { return charSetting_; }
      set {
        charSetting_ = value;
      }
    }

    private global::ETHotfix.PlayerRideTotalInfo totalInfo_;
    public global::ETHotfix.PlayerRideTotalInfo TotalInfo {
      get { return totalInfo_; }
      set {
        totalInfo_ = value;
      }
    }

    private int language_;
    public int Language {
      get { return language_; }
      set {
        language_ = value;
      }
    }

    private string cloudStorageUri_ = "";
    public string CloudStorageUri {
      get { return cloudStorageUri_; }
      set {
        cloudStorageUri_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string portraitImageName_ = "";
    public string PortraitImageName {
      get { return portraitImageName_; }
      set {
        portraitImageName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Uid != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Uid);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Sex != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Sex);
      }
      if (Height != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Height);
      }
      if (Weight != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Weight);
      }
      if (Location != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Location);
      }
      if (Birthday != 0) {
        output.WriteRawTag(56);
        output.WriteInt32(Birthday);
      }
      if (CreateAt != 0L) {
        output.WriteRawTag(64);
        output.WriteInt64(CreateAt);
      }
      if (LastOnlineAt != 0L) {
        output.WriteRawTag(72);
        output.WriteInt64(LastOnlineAt);
      }
      if (Coin != 0L) {
        output.WriteRawTag(80);
        output.WriteInt64(Coin);
      }
      if (charSetting_ != null) {
        output.WriteRawTag(90);
        output.WriteMessage(CharSetting);
      }
      if (totalInfo_ != null) {
        output.WriteRawTag(98);
        output.WriteMessage(TotalInfo);
      }
      if (Language != 0) {
        output.WriteRawTag(104);
        output.WriteInt32(Language);
      }
      if (CloudStorageUri.Length != 0) {
        output.WriteRawTag(114);
        output.WriteString(CloudStorageUri);
      }
      if (PortraitImageName.Length != 0) {
        output.WriteRawTag(122);
        output.WriteString(PortraitImageName);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Uid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Uid);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Sex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Sex);
      }
      if (Height != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Height);
      }
      if (Weight != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Weight);
      }
      if (Location != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Location);
      }
      if (Birthday != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Birthday);
      }
      if (CreateAt != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CreateAt);
      }
      if (LastOnlineAt != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LastOnlineAt);
      }
      if (Coin != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Coin);
      }
      if (charSetting_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CharSetting);
      }
      if (totalInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TotalInfo);
      }
      if (Language != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Language);
      }
      if (CloudStorageUri.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(CloudStorageUri);
      }
      if (PortraitImageName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PortraitImageName);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uid_ = 0;
      name_ = "";
      sex_ = 0;
      height_ = 0;
      weight_ = 0;
      location_ = 0;
      birthday_ = 0;
      createAt_ = 0;
      lastOnlineAt_ = 0;
      coin_ = 0;
      if (charSetting_ != null) MessagePool.Instance.Recycle(charSetting_); charSetting_ = null;
      if (totalInfo_ != null) MessagePool.Instance.Recycle(totalInfo_); totalInfo_ = null;
      language_ = 0;
      cloudStorageUri_ = "";
      portraitImageName_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uid = input.ReadInt64();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            Sex = input.ReadInt32();
            break;
          }
          case 32: {
            Height = input.ReadInt32();
            break;
          }
          case 40: {
            Weight = input.ReadInt32();
            break;
          }
          case 48: {
            Location = input.ReadInt32();
            break;
          }
          case 56: {
            Birthday = input.ReadInt32();
            break;
          }
          case 64: {
            CreateAt = input.ReadInt64();
            break;
          }
          case 72: {
            LastOnlineAt = input.ReadInt64();
            break;
          }
          case 80: {
            Coin = input.ReadInt64();
            break;
          }
          case 90: {
            if (charSetting_ == null) {
              charSetting_ = new global::ETHotfix.PlayerCharSetting();
            }
            input.ReadMessage(charSetting_);
            break;
          }
          case 98: {
            if (totalInfo_ == null) {
              totalInfo_ = new global::ETHotfix.PlayerRideTotalInfo();
            }
            input.ReadMessage(totalInfo_);
            break;
          }
          case 104: {
            Language = input.ReadInt32();
            break;
          }
          case 114: {
            CloudStorageUri = input.ReadString();
            break;
          }
          case 122: {
            PortraitImageName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class PlayerCharSetting : pb::IMessage {
    private static readonly pb::MessageParser<PlayerCharSetting> _parser = new pb::MessageParser<PlayerCharSetting>(() => (PlayerCharSetting)MessagePool.Instance.Fetch(typeof(PlayerCharSetting)));
    public static pb::MessageParser<PlayerCharSetting> Parser { get { return _parser; } }

    private long characterId_;
    public long CharacterId {
      get { return characterId_; }
      set {
        characterId_ = value;
      }
    }

    private long bicycleId_;
    public long BicycleId {
      get { return bicycleId_; }
      set {
        bicycleId_ = value;
      }
    }

    private long bodyId_;
    public long BodyId {
      get { return bodyId_; }
      set {
        bodyId_ = value;
      }
    }

    private long decorationId_;
    public long DecorationId {
      get { return decorationId_; }
      set {
        decorationId_ = value;
      }
    }

    private long medalId_;
    public long MedalId {
      get { return medalId_; }
      set {
        medalId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (CharacterId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(CharacterId);
      }
      if (BicycleId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(BicycleId);
      }
      if (BodyId != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(BodyId);
      }
      if (DecorationId != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(DecorationId);
      }
      if (MedalId != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(MedalId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (CharacterId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CharacterId);
      }
      if (BicycleId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(BicycleId);
      }
      if (BodyId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(BodyId);
      }
      if (DecorationId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(DecorationId);
      }
      if (MedalId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MedalId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      characterId_ = 0;
      bicycleId_ = 0;
      bodyId_ = 0;
      decorationId_ = 0;
      medalId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            CharacterId = input.ReadInt64();
            break;
          }
          case 16: {
            BicycleId = input.ReadInt64();
            break;
          }
          case 24: {
            BodyId = input.ReadInt64();
            break;
          }
          case 32: {
            DecorationId = input.ReadInt64();
            break;
          }
          case 40: {
            MedalId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class RideTotalInfo : pb::IMessage {
    private static readonly pb::MessageParser<RideTotalInfo> _parser = new pb::MessageParser<RideTotalInfo>(() => (RideTotalInfo)MessagePool.Instance.Fetch(typeof(RideTotalInfo)));
    public static pb::MessageParser<RideTotalInfo> Parser { get { return _parser; } }

    private long mileage_;
    public long Mileage {
      get { return mileage_; }
      set {
        mileage_ = value;
      }
    }

    private long cumulativeTime_;
    public long CumulativeTime {
      get { return cumulativeTime_; }
      set {
        cumulativeTime_ = value;
      }
    }

    private float averageSpeed_;
    public float AverageSpeed {
      get { return averageSpeed_; }
      set {
        averageSpeed_ = value;
      }
    }

    private float topSpeed_;
    public float TopSpeed {
      get { return topSpeed_; }
      set {
        topSpeed_ = value;
      }
    }

    private float calories_;
    public float Calories {
      get { return calories_; }
      set {
        calories_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Mileage != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Mileage);
      }
      if (CumulativeTime != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(CumulativeTime);
      }
      if (AverageSpeed != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(AverageSpeed);
      }
      if (TopSpeed != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(TopSpeed);
      }
      if (Calories != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(Calories);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Mileage != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Mileage);
      }
      if (CumulativeTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CumulativeTime);
      }
      if (AverageSpeed != 0F) {
        size += 1 + 4;
      }
      if (TopSpeed != 0F) {
        size += 1 + 4;
      }
      if (Calories != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      mileage_ = 0;
      cumulativeTime_ = 0;
      averageSpeed_ = 0f;
      topSpeed_ = 0f;
      calories_ = 0f;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Mileage = input.ReadInt64();
            break;
          }
          case 16: {
            CumulativeTime = input.ReadInt64();
            break;
          }
          case 29: {
            AverageSpeed = input.ReadFloat();
            break;
          }
          case 37: {
            TopSpeed = input.ReadFloat();
            break;
          }
          case 45: {
            Calories = input.ReadFloat();
            break;
          }
        }
      }
    }

  }

  public partial class PlayerRideTotalInfo : pb::IMessage {
    private static readonly pb::MessageParser<PlayerRideTotalInfo> _parser = new pb::MessageParser<PlayerRideTotalInfo>(() => (PlayerRideTotalInfo)MessagePool.Instance.Fetch(typeof(PlayerRideTotalInfo)));
    public static pb::MessageParser<PlayerRideTotalInfo> Parser { get { return _parser; } }

    private long mileage_;
    public long Mileage {
      get { return mileage_; }
      set {
        mileage_ = value;
      }
    }

    private long cumulativeTime_;
    public long CumulativeTime {
      get { return cumulativeTime_; }
      set {
        cumulativeTime_ = value;
      }
    }

    private float averageSpeed_;
    public float AverageSpeed {
      get { return averageSpeed_; }
      set {
        averageSpeed_ = value;
      }
    }

    private float topSpeed_;
    public float TopSpeed {
      get { return topSpeed_; }
      set {
        topSpeed_ = value;
      }
    }

    private float calories_;
    public float Calories {
      get { return calories_; }
      set {
        calories_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::ETHotfix.PlayerRideRoadInfo> _repeated_rideRoadInfos_codec
        = pb::FieldCodec.ForMessage(50, global::ETHotfix.PlayerRideRoadInfo.Parser);
    private pbc::RepeatedField<global::ETHotfix.PlayerRideRoadInfo> rideRoadInfos_ = new pbc::RepeatedField<global::ETHotfix.PlayerRideRoadInfo>();
    public pbc::RepeatedField<global::ETHotfix.PlayerRideRoadInfo> RideRoadInfos {
      get { return rideRoadInfos_; }
      set { rideRoadInfos_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Mileage != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Mileage);
      }
      if (CumulativeTime != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(CumulativeTime);
      }
      if (AverageSpeed != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(AverageSpeed);
      }
      if (TopSpeed != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(TopSpeed);
      }
      if (Calories != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(Calories);
      }
      rideRoadInfos_.WriteTo(output, _repeated_rideRoadInfos_codec);
    }

    public int CalculateSize() {
      int size = 0;
      if (Mileage != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Mileage);
      }
      if (CumulativeTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CumulativeTime);
      }
      if (AverageSpeed != 0F) {
        size += 1 + 4;
      }
      if (TopSpeed != 0F) {
        size += 1 + 4;
      }
      if (Calories != 0F) {
        size += 1 + 4;
      }
      size += rideRoadInfos_.CalculateSize(_repeated_rideRoadInfos_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      mileage_ = 0;
      cumulativeTime_ = 0;
      averageSpeed_ = 0f;
      topSpeed_ = 0f;
      calories_ = 0f;
      for (int i = 0; i < rideRoadInfos_.Count; i++) { MessagePool.Instance.Recycle(rideRoadInfos_[i]); }
      rideRoadInfos_.Clear();
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Mileage = input.ReadInt64();
            break;
          }
          case 16: {
            CumulativeTime = input.ReadInt64();
            break;
          }
          case 29: {
            AverageSpeed = input.ReadFloat();
            break;
          }
          case 37: {
            TopSpeed = input.ReadFloat();
            break;
          }
          case 45: {
            Calories = input.ReadFloat();
            break;
          }
          case 50: {
            rideRoadInfos_.AddEntriesFrom(input, _repeated_rideRoadInfos_codec);
            break;
          }
        }
      }
    }

  }

  public partial class PlayerRideRoadInfo : pb::IMessage {
    private static readonly pb::MessageParser<PlayerRideRoadInfo> _parser = new pb::MessageParser<PlayerRideRoadInfo>(() => (PlayerRideRoadInfo)MessagePool.Instance.Fetch(typeof(PlayerRideRoadInfo)));
    public static pb::MessageParser<PlayerRideRoadInfo> Parser { get { return _parser; } }

    private long infoId_;
    public long InfoId {
      get { return infoId_; }
      set {
        infoId_ = value;
      }
    }

    private long roadId_;
    public long RoadId {
      get { return roadId_; }
      set {
        roadId_ = value;
      }
    }

    private int rank_;
    public int Rank {
      get { return rank_; }
      set {
        rank_ = value;
      }
    }

    private long mileage_;
    public long Mileage {
      get { return mileage_; }
      set {
        mileage_ = value;
      }
    }

    private long cumulativeTime_;
    public long CumulativeTime {
      get { return cumulativeTime_; }
      set {
        cumulativeTime_ = value;
      }
    }

    private float averageSpeed_;
    public float AverageSpeed {
      get { return averageSpeed_; }
      set {
        averageSpeed_ = value;
      }
    }

    private float topSpeed_;
    public float TopSpeed {
      get { return topSpeed_; }
      set {
        topSpeed_ = value;
      }
    }

    private float calories_;
    public float Calories {
      get { return calories_; }
      set {
        calories_ = value;
      }
    }

    private float power_;
    public float Power {
      get { return power_; }
      set {
        power_ = value;
      }
    }

    private long recordUTCTick_;
    public long RecordUTCTick {
      get { return recordUTCTick_; }
      set {
        recordUTCTick_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::ETHotfix.BattleLeaderboardUnitInfo> _repeated_battleLeaderboardUnitInfos_codec
        = pb::FieldCodec.ForMessage(90, global::ETHotfix.BattleLeaderboardUnitInfo.Parser);
    private pbc::RepeatedField<global::ETHotfix.BattleLeaderboardUnitInfo> battleLeaderboardUnitInfos_ = new pbc::RepeatedField<global::ETHotfix.BattleLeaderboardUnitInfo>();
    public pbc::RepeatedField<global::ETHotfix.BattleLeaderboardUnitInfo> BattleLeaderboardUnitInfos {
      get { return battleLeaderboardUnitInfos_; }
      set { battleLeaderboardUnitInfos_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (InfoId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(InfoId);
      }
      if (RoadId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(RoadId);
      }
      if (Rank != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Rank);
      }
      if (Mileage != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(Mileage);
      }
      if (CumulativeTime != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(CumulativeTime);
      }
      if (AverageSpeed != 0F) {
        output.WriteRawTag(53);
        output.WriteFloat(AverageSpeed);
      }
      if (TopSpeed != 0F) {
        output.WriteRawTag(61);
        output.WriteFloat(TopSpeed);
      }
      if (Calories != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(Calories);
      }
      if (Power != 0F) {
        output.WriteRawTag(77);
        output.WriteFloat(Power);
      }
      if (RecordUTCTick != 0L) {
        output.WriteRawTag(80);
        output.WriteInt64(RecordUTCTick);
      }
      battleLeaderboardUnitInfos_.WriteTo(output, _repeated_battleLeaderboardUnitInfos_codec);
    }

    public int CalculateSize() {
      int size = 0;
      if (InfoId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(InfoId);
      }
      if (RoadId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RoadId);
      }
      if (Rank != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Rank);
      }
      if (Mileage != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Mileage);
      }
      if (CumulativeTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(CumulativeTime);
      }
      if (AverageSpeed != 0F) {
        size += 1 + 4;
      }
      if (TopSpeed != 0F) {
        size += 1 + 4;
      }
      if (Calories != 0F) {
        size += 1 + 4;
      }
      if (Power != 0F) {
        size += 1 + 4;
      }
      if (RecordUTCTick != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RecordUTCTick);
      }
      size += battleLeaderboardUnitInfos_.CalculateSize(_repeated_battleLeaderboardUnitInfos_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      infoId_ = 0;
      roadId_ = 0;
      rank_ = 0;
      mileage_ = 0;
      cumulativeTime_ = 0;
      averageSpeed_ = 0f;
      topSpeed_ = 0f;
      calories_ = 0f;
      power_ = 0f;
      recordUTCTick_ = 0;
      for (int i = 0; i < battleLeaderboardUnitInfos_.Count; i++) { MessagePool.Instance.Recycle(battleLeaderboardUnitInfos_[i]); }
      battleLeaderboardUnitInfos_.Clear();
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            InfoId = input.ReadInt64();
            break;
          }
          case 16: {
            RoadId = input.ReadInt64();
            break;
          }
          case 24: {
            Rank = input.ReadInt32();
            break;
          }
          case 32: {
            Mileage = input.ReadInt64();
            break;
          }
          case 40: {
            CumulativeTime = input.ReadInt64();
            break;
          }
          case 53: {
            AverageSpeed = input.ReadFloat();
            break;
          }
          case 61: {
            TopSpeed = input.ReadFloat();
            break;
          }
          case 69: {
            Calories = input.ReadFloat();
            break;
          }
          case 77: {
            Power = input.ReadFloat();
            break;
          }
          case 80: {
            RecordUTCTick = input.ReadInt64();
            break;
          }
          case 90: {
            battleLeaderboardUnitInfos_.AddEntriesFrom(input, _repeated_battleLeaderboardUnitInfos_codec);
            break;
          }
        }
      }
    }

  }

  public partial class G2C_MessageTip : pb::IMessage {
    private static readonly pb::MessageParser<G2C_MessageTip> _parser = new pb::MessageParser<G2C_MessageTip>(() => (G2C_MessageTip)MessagePool.Instance.Fetch(typeof(G2C_MessageTip)));
    public static pb::MessageParser<G2C_MessageTip> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private string tipContent_ = "";
    public string TipContent {
      get { return tipContent_; }
      set {
        tipContent_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (TipContent.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(TipContent);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (TipContent.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(TipContent);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      tipContent_ = "";
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            TipContent = input.ReadString();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class G2C_UpdatePlayerRideTotalInfo : pb::IMessage {
    private static readonly pb::MessageParser<G2C_UpdatePlayerRideTotalInfo> _parser = new pb::MessageParser<G2C_UpdatePlayerRideTotalInfo>(() => (G2C_UpdatePlayerRideTotalInfo)MessagePool.Instance.Fetch(typeof(G2C_UpdatePlayerRideTotalInfo)));
    public static pb::MessageParser<G2C_UpdatePlayerRideTotalInfo> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private global::ETHotfix.PlayerRideTotalInfo totalInfo_;
    public global::ETHotfix.PlayerRideTotalInfo TotalInfo {
      get { return totalInfo_; }
      set {
        totalInfo_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (totalInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(TotalInfo);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (totalInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TotalInfo);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      if (totalInfo_ != null) MessagePool.Instance.Recycle(totalInfo_); totalInfo_ = null;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (totalInfo_ == null) {
              totalInfo_ = new global::ETHotfix.PlayerRideTotalInfo();
            }
            input.ReadMessage(totalInfo_);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class MapUnitInfo : pb::IMessage {
    private static readonly pb::MessageParser<MapUnitInfo> _parser = new pb::MessageParser<MapUnitInfo>(() => (MapUnitInfo)MessagePool.Instance.Fetch(typeof(MapUnitInfo)));
    public static pb::MessageParser<MapUnitInfo> Parser { get { return _parser; } }

    private long mapUnitId_;
    public long MapUnitId {
      get { return mapUnitId_; }
      set {
        mapUnitId_ = value;
      }
    }

    private long roomId_;
    public long RoomId {
      get { return roomId_; }
      set {
        roomId_ = value;
      }
    }

    private string name_ = "";
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private int location_;
    public int Location {
      get { return location_; }
      set {
        location_ = value;
      }
    }

    private double distanceTravelled_;
    public double DistanceTravelled {
      get { return distanceTravelled_; }
      set {
        distanceTravelled_ = value;
      }
    }

    private int pathId_;
    public int PathId {
      get { return pathId_; }
      set {
        pathId_ = value;
      }
    }

    private global::ETHotfix.PlayerCharSetting charSetting_;
    public global::ETHotfix.PlayerCharSetting CharSetting {
      get { return charSetting_; }
      set {
        charSetting_ = value;
      }
    }

    private float speedMS_;
    public float SpeedMS {
      get { return speedMS_; }
      set {
        speedMS_ = value;
      }
    }

    private long startUTCTick_;
    public long StartUTCTick {
      get { return startUTCTick_; }
      set {
        startUTCTick_ = value;
      }
    }

    private long uid_;
    public long Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    private long debugId_;
    public long DebugId {
      get { return debugId_; }
      set {
        debugId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (MapUnitId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(MapUnitId);
      }
      if (RoomId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(RoomId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (Location != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Location);
      }
      if (DistanceTravelled != 0D) {
        output.WriteRawTag(41);
        output.WriteDouble(DistanceTravelled);
      }
      if (PathId != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(PathId);
      }
      if (charSetting_ != null) {
        output.WriteRawTag(58);
        output.WriteMessage(CharSetting);
      }
      if (SpeedMS != 0F) {
        output.WriteRawTag(69);
        output.WriteFloat(SpeedMS);
      }
      if (StartUTCTick != 0L) {
        output.WriteRawTag(72);
        output.WriteInt64(StartUTCTick);
      }
      if (Uid != 0L) {
        output.WriteRawTag(80);
        output.WriteInt64(Uid);
      }
      if (DebugId != 0L) {
        output.WriteRawTag(88);
        output.WriteInt64(DebugId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (MapUnitId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MapUnitId);
      }
      if (RoomId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RoomId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Location != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Location);
      }
      if (DistanceTravelled != 0D) {
        size += 1 + 8;
      }
      if (PathId != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(PathId);
      }
      if (charSetting_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CharSetting);
      }
      if (SpeedMS != 0F) {
        size += 1 + 4;
      }
      if (StartUTCTick != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(StartUTCTick);
      }
      if (Uid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Uid);
      }
      if (DebugId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(DebugId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      mapUnitId_ = 0;
      roomId_ = 0;
      name_ = "";
      location_ = 0;
      pathId_ = 0;
      if (charSetting_ != null) MessagePool.Instance.Recycle(charSetting_); charSetting_ = null;
      speedMS_ = 0f;
      startUTCTick_ = 0;
      uid_ = 0;
      debugId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            MapUnitId = input.ReadInt64();
            break;
          }
          case 16: {
            RoomId = input.ReadInt64();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
          case 32: {
            Location = input.ReadInt32();
            break;
          }
          case 41: {
            DistanceTravelled = input.ReadDouble();
            break;
          }
          case 48: {
            PathId = input.ReadInt32();
            break;
          }
          case 58: {
            if (charSetting_ == null) {
              charSetting_ = new global::ETHotfix.PlayerCharSetting();
            }
            input.ReadMessage(charSetting_);
            break;
          }
          case 69: {
            SpeedMS = input.ReadFloat();
            break;
          }
          case 72: {
            StartUTCTick = input.ReadInt64();
            break;
          }
          case 80: {
            Uid = input.ReadInt64();
            break;
          }
          case 88: {
            DebugId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class MapUnitInfo_Global : pb::IMessage {
    private static readonly pb::MessageParser<MapUnitInfo_Global> _parser = new pb::MessageParser<MapUnitInfo_Global>(() => (MapUnitInfo_Global)MessagePool.Instance.Fetch(typeof(MapUnitInfo_Global)));
    public static pb::MessageParser<MapUnitInfo_Global> Parser { get { return _parser; } }

    private long mapUnitId_;
    public long MapUnitId {
      get { return mapUnitId_; }
      set {
        mapUnitId_ = value;
      }
    }

    private string name_ = "";
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private int location_;
    public int Location {
      get { return location_; }
      set {
        location_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (MapUnitId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(MapUnitId);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (Location != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Location);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (MapUnitId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MapUnitId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Location != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Location);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      mapUnitId_ = 0;
      name_ = "";
      location_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            MapUnitId = input.ReadInt64();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 24: {
            Location = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// TODO:Obsolete
  /// </summary>
  public partial class G2M_MapUnitCreate : pb::IMessage {
    private static readonly pb::MessageParser<G2M_MapUnitCreate> _parser = new pb::MessageParser<G2M_MapUnitCreate>(() => (G2M_MapUnitCreate)MessagePool.Instance.Fetch(typeof(G2M_MapUnitCreate)));
    public static pb::MessageParser<G2M_MapUnitCreate> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long uid_;
    public long Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    private long gateSessionId_;
    public long GateSessionId {
      get { return gateSessionId_; }
      set {
        gateSessionId_ = value;
      }
    }

    private global::ETHotfix.MapUnitInfo mapUnitInfo_;
    public global::ETHotfix.MapUnitInfo MapUnitInfo {
      get { return mapUnitInfo_; }
      set {
        mapUnitInfo_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Uid != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Uid);
      }
      if (GateSessionId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(GateSessionId);
      }
      if (mapUnitInfo_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(MapUnitInfo);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Uid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Uid);
      }
      if (GateSessionId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(GateSessionId);
      }
      if (mapUnitInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MapUnitInfo);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uid_ = 0;
      gateSessionId_ = 0;
      if (mapUnitInfo_ != null) MessagePool.Instance.Recycle(mapUnitInfo_); mapUnitInfo_ = null;
      rpcId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uid = input.ReadInt64();
            break;
          }
          case 16: {
            GateSessionId = input.ReadInt64();
            break;
          }
          case 26: {
            if (mapUnitInfo_ == null) {
              mapUnitInfo_ = new global::ETHotfix.MapUnitInfo();
            }
            input.ReadMessage(mapUnitInfo_);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// TODO:Obsolete
  /// </summary>
  public partial class M2G_MapUnitCreate : pb::IMessage {
    private static readonly pb::MessageParser<M2G_MapUnitCreate> _parser = new pb::MessageParser<M2G_MapUnitCreate>(() => (M2G_MapUnitCreate)MessagePool.Instance.Fetch(typeof(M2G_MapUnitCreate)));
    public static pb::MessageParser<M2G_MapUnitCreate> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private long mapUnitId_;
    public long MapUnitId {
      get { return mapUnitId_; }
      set {
        mapUnitId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (MapUnitId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(MapUnitId);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (MapUnitId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MapUnitId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      mapUnitId_ = 0;
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            MapUnitId = input.ReadInt64();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_MapUnitCreate : pb::IMessage {
    private static readonly pb::MessageParser<M2C_MapUnitCreate> _parser = new pb::MessageParser<M2C_MapUnitCreate>(() => (M2C_MapUnitCreate)MessagePool.Instance.Fetch(typeof(M2C_MapUnitCreate)));
    public static pb::MessageParser<M2C_MapUnitCreate> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private global::ETHotfix.MapUnitInfo mapUnitInfo_;
    public global::ETHotfix.MapUnitInfo MapUnitInfo {
      get { return mapUnitInfo_; }
      set {
        mapUnitInfo_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (mapUnitInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(MapUnitInfo);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (mapUnitInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MapUnitInfo);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      if (mapUnitInfo_ != null) MessagePool.Instance.Recycle(mapUnitInfo_); mapUnitInfo_ = null;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (mapUnitInfo_ == null) {
              mapUnitInfo_ = new global::ETHotfix.MapUnitInfo();
            }
            input.ReadMessage(mapUnitInfo_);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_MapUnitUpdate : pb::IMessage {
    private static readonly pb::MessageParser<M2C_MapUnitUpdate> _parser = new pb::MessageParser<M2C_MapUnitUpdate>(() => (M2C_MapUnitUpdate)MessagePool.Instance.Fetch(typeof(M2C_MapUnitUpdate)));
    public static pb::MessageParser<M2C_MapUnitUpdate> Parser { get { return _parser; } }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private long mapUnitId_;
    public long MapUnitId {
      get { return mapUnitId_; }
      set {
        mapUnitId_ = value;
      }
    }

    private double distanceTravelledTarget_;
    public double DistanceTravelledTarget {
      get { return distanceTravelledTarget_; }
      set {
        distanceTravelledTarget_ = value;
      }
    }

    private float speedMS_;
    public float SpeedMS {
      get { return speedMS_; }
      set {
        speedMS_ = value;
      }
    }

    private long distanceTravelledUpdateUTCTick_;
    public long DistanceTravelledUpdateUTCTick {
      get { return distanceTravelledUpdateUTCTick_; }
      set {
        distanceTravelledUpdateUTCTick_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (MapUnitId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(MapUnitId);
      }
      if (DistanceTravelledTarget != 0D) {
        output.WriteRawTag(17);
        output.WriteDouble(DistanceTravelledTarget);
      }
      if (SpeedMS != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(SpeedMS);
      }
      if (DistanceTravelledUpdateUTCTick != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(DistanceTravelledUpdateUTCTick);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (MapUnitId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MapUnitId);
      }
      if (DistanceTravelledTarget != 0D) {
        size += 1 + 8;
      }
      if (SpeedMS != 0F) {
        size += 1 + 4;
      }
      if (DistanceTravelledUpdateUTCTick != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(DistanceTravelledUpdateUTCTick);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      mapUnitId_ = 0;
      speedMS_ = 0f;
      distanceTravelledUpdateUTCTick_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            MapUnitId = input.ReadInt64();
            break;
          }
          case 17: {
            DistanceTravelledTarget = input.ReadDouble();
            break;
          }
          case 29: {
            SpeedMS = input.ReadFloat();
            break;
          }
          case 32: {
            DistanceTravelledUpdateUTCTick = input.ReadInt64();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_MapUnitDestroy : pb::IMessage {
    private static readonly pb::MessageParser<M2C_MapUnitDestroy> _parser = new pb::MessageParser<M2C_MapUnitDestroy>(() => (M2C_MapUnitDestroy)MessagePool.Instance.Fetch(typeof(M2C_MapUnitDestroy)));
    public static pb::MessageParser<M2C_MapUnitDestroy> Parser { get { return _parser; } }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private long mapUnitId_;
    public long MapUnitId {
      get { return mapUnitId_; }
      set {
        mapUnitId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (MapUnitId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(MapUnitId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (MapUnitId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MapUnitId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      mapUnitId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            MapUnitId = input.ReadInt64();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_MapUnitCreateAndDestroy : pb::IMessage {
    private static readonly pb::MessageParser<M2C_MapUnitCreateAndDestroy> _parser = new pb::MessageParser<M2C_MapUnitCreateAndDestroy>(() => (M2C_MapUnitCreateAndDestroy)MessagePool.Instance.Fetch(typeof(M2C_MapUnitCreateAndDestroy)));
    public static pb::MessageParser<M2C_MapUnitCreateAndDestroy> Parser { get { return _parser; } }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::ETHotfix.MapUnitInfo> _repeated_createMapUnitInfos_codec
        = pb::FieldCodec.ForMessage(10, global::ETHotfix.MapUnitInfo.Parser);
    private pbc::RepeatedField<global::ETHotfix.MapUnitInfo> createMapUnitInfos_ = new pbc::RepeatedField<global::ETHotfix.MapUnitInfo>();
    public pbc::RepeatedField<global::ETHotfix.MapUnitInfo> CreateMapUnitInfos {
      get { return createMapUnitInfos_; }
      set { createMapUnitInfos_ = value; }
    }

    private static readonly pb::FieldCodec<long> _repeated_destroyMapUnitIds_codec
        = pb::FieldCodec.ForInt64(18);
    private pbc::RepeatedField<long> destroyMapUnitIds_ = new pbc::RepeatedField<long>();
    public pbc::RepeatedField<long> DestroyMapUnitIds {
      get { return destroyMapUnitIds_; }
      set { destroyMapUnitIds_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      createMapUnitInfos_.WriteTo(output, _repeated_createMapUnitInfos_codec);
      destroyMapUnitIds_.WriteTo(output, _repeated_destroyMapUnitIds_codec);
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      size += createMapUnitInfos_.CalculateSize(_repeated_createMapUnitInfos_codec);
      size += destroyMapUnitIds_.CalculateSize(_repeated_destroyMapUnitIds_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      for (int i = 0; i < createMapUnitInfos_.Count; i++) { MessagePool.Instance.Recycle(createMapUnitInfos_[i]); }
      createMapUnitInfos_.Clear();
      destroyMapUnitIds_.Clear();
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            createMapUnitInfos_.AddEntriesFrom(input, _repeated_createMapUnitInfos_codec);
            break;
          }
          case 18:
          case 16: {
            destroyMapUnitIds_.AddEntriesFrom(input, _repeated_destroyMapUnitIds_codec);
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class C2M_MapUnitMove : pb::IMessage {
    private static readonly pb::MessageParser<C2M_MapUnitMove> _parser = new pb::MessageParser<C2M_MapUnitMove>(() => (C2M_MapUnitMove)MessagePool.Instance.Fetch(typeof(C2M_MapUnitMove)));
    public static pb::MessageParser<C2M_MapUnitMove> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private double distanceTravelledTarget_;
    public double DistanceTravelledTarget {
      get { return distanceTravelledTarget_; }
      set {
        distanceTravelledTarget_ = value;
      }
    }

    private float speedMS_;
    public float SpeedMS {
      get { return speedMS_; }
      set {
        speedMS_ = value;
      }
    }

    private float calories_;
    public float Calories {
      get { return calories_; }
      set {
        calories_ = value;
      }
    }

    private float power_;
    public float Power {
      get { return power_; }
      set {
        power_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (DistanceTravelledTarget != 0D) {
        output.WriteRawTag(9);
        output.WriteDouble(DistanceTravelledTarget);
      }
      if (SpeedMS != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(SpeedMS);
      }
      if (Calories != 0F) {
        output.WriteRawTag(29);
        output.WriteFloat(Calories);
      }
      if (Power != 0F) {
        output.WriteRawTag(37);
        output.WriteFloat(Power);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (DistanceTravelledTarget != 0D) {
        size += 1 + 8;
      }
      if (SpeedMS != 0F) {
        size += 1 + 4;
      }
      if (Calories != 0F) {
        size += 1 + 4;
      }
      if (Power != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      speedMS_ = 0f;
      calories_ = 0f;
      power_ = 0f;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 9: {
            DistanceTravelledTarget = input.ReadDouble();
            break;
          }
          case 21: {
            SpeedMS = input.ReadFloat();
            break;
          }
          case 29: {
            Calories = input.ReadFloat();
            break;
          }
          case 37: {
            Power = input.ReadFloat();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class C2M_LookAtTarget : pb::IMessage {
    private static readonly pb::MessageParser<C2M_LookAtTarget> _parser = new pb::MessageParser<C2M_LookAtTarget>(() => (C2M_LookAtTarget)MessagePool.Instance.Fetch(typeof(C2M_LookAtTarget)));
    public static pb::MessageParser<C2M_LookAtTarget> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private long mapUnitId_;
    public long MapUnitId {
      get { return mapUnitId_; }
      set {
        mapUnitId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (MapUnitId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(MapUnitId);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (MapUnitId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MapUnitId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      mapUnitId_ = 0;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            MapUnitId = input.ReadInt64();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_LookAtTarget : pb::IMessage {
    private static readonly pb::MessageParser<M2C_LookAtTarget> _parser = new pb::MessageParser<M2C_LookAtTarget>(() => (M2C_LookAtTarget)MessagePool.Instance.Fetch(typeof(M2C_LookAtTarget)));
    public static pb::MessageParser<M2C_LookAtTarget> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_MapUnitGlobalCreate : pb::IMessage {
    private static readonly pb::MessageParser<M2C_MapUnitGlobalCreate> _parser = new pb::MessageParser<M2C_MapUnitGlobalCreate>(() => (M2C_MapUnitGlobalCreate)MessagePool.Instance.Fetch(typeof(M2C_MapUnitGlobalCreate)));
    public static pb::MessageParser<M2C_MapUnitGlobalCreate> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private global::ETHotfix.MapUnitInfo_Global globalInfo_;
    public global::ETHotfix.MapUnitInfo_Global GlobalInfo {
      get { return globalInfo_; }
      set {
        globalInfo_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (globalInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(GlobalInfo);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (globalInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(GlobalInfo);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      if (globalInfo_ != null) MessagePool.Instance.Recycle(globalInfo_); globalInfo_ = null;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (globalInfo_ == null) {
              globalInfo_ = new global::ETHotfix.MapUnitInfo_Global();
            }
            input.ReadMessage(globalInfo_);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_MapUnitGlobalDestroy : pb::IMessage {
    private static readonly pb::MessageParser<M2C_MapUnitGlobalDestroy> _parser = new pb::MessageParser<M2C_MapUnitGlobalDestroy>(() => (M2C_MapUnitGlobalDestroy)MessagePool.Instance.Fetch(typeof(M2C_MapUnitGlobalDestroy)));
    public static pb::MessageParser<M2C_MapUnitGlobalDestroy> Parser { get { return _parser; } }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private long mapUnitId_;
    public long MapUnitId {
      get { return mapUnitId_; }
      set {
        mapUnitId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (MapUnitId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(MapUnitId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (MapUnitId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MapUnitId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      mapUnitId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            MapUnitId = input.ReadInt64();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class RoomInfo : pb::IMessage {
    private static readonly pb::MessageParser<RoomInfo> _parser = new pb::MessageParser<RoomInfo>(() => (RoomInfo)MessagePool.Instance.Fetch(typeof(RoomInfo)));
    public static pb::MessageParser<RoomInfo> Parser { get { return _parser; } }

    private long roomId_;
    public long RoomId {
      get { return roomId_; }
      set {
        roomId_ = value;
      }
    }

    private string title_ = "";
    public string Title {
      get { return title_; }
      set {
        title_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private long roadSettingId_;
    public long RoadSettingId {
      get { return roadSettingId_; }
      set {
        roadSettingId_ = value;
      }
    }

    private int maxMemberCount_;
    public int MaxMemberCount {
      get { return maxMemberCount_; }
      set {
        maxMemberCount_ = value;
      }
    }

    private int nowMemberCount_;
    public int NowMemberCount {
      get { return nowMemberCount_; }
      set {
        nowMemberCount_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RoomId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(RoomId);
      }
      if (Title.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Title);
      }
      if (RoadSettingId != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(RoadSettingId);
      }
      if (MaxMemberCount != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(MaxMemberCount);
      }
      if (NowMemberCount != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(NowMemberCount);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RoomId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RoomId);
      }
      if (Title.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Title);
      }
      if (RoadSettingId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RoadSettingId);
      }
      if (MaxMemberCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MaxMemberCount);
      }
      if (NowMemberCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(NowMemberCount);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      roomId_ = 0;
      title_ = "";
      roadSettingId_ = 0;
      maxMemberCount_ = 0;
      nowMemberCount_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoomId = input.ReadInt64();
            break;
          }
          case 18: {
            Title = input.ReadString();
            break;
          }
          case 24: {
            RoadSettingId = input.ReadInt64();
            break;
          }
          case 32: {
            MaxMemberCount = input.ReadInt32();
            break;
          }
          case 40: {
            NowMemberCount = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public partial class RoamingRoomData : pb::IMessage {
    private static readonly pb::MessageParser<RoamingRoomData> _parser = new pb::MessageParser<RoamingRoomData>(() => (RoamingRoomData)MessagePool.Instance.Fetch(typeof(RoamingRoomData)));
    public static pb::MessageParser<RoamingRoomData> Parser { get { return _parser; } }

    public void WriteTo(pb::CodedOutputStream output) {
    }

    public int CalculateSize() {
      int size = 0;
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
        }
      }
    }

  }

  /// <summary>
  ///TODO:Obsolete
  /// </summary>
  public partial class C2G_RoamingGetList : pb::IMessage {
    private static readonly pb::MessageParser<C2G_RoamingGetList> _parser = new pb::MessageParser<C2G_RoamingGetList>(() => (C2G_RoamingGetList)MessagePool.Instance.Fetch(typeof(C2G_RoamingGetList)));
    public static pb::MessageParser<C2G_RoamingGetList> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///TODO:Obsolete
  /// </summary>
  public partial class G2C_RoamingGetList : pb::IMessage {
    private static readonly pb::MessageParser<G2C_RoamingGetList> _parser = new pb::MessageParser<G2C_RoamingGetList>(() => (G2C_RoamingGetList)MessagePool.Instance.Fetch(typeof(G2C_RoamingGetList)));
    public static pb::MessageParser<G2C_RoamingGetList> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private static readonly pb::FieldCodec<global::ETHotfix.RoomInfo> _repeated_infos_codec
        = pb::FieldCodec.ForMessage(10, global::ETHotfix.RoomInfo.Parser);
    private pbc::RepeatedField<global::ETHotfix.RoomInfo> infos_ = new pbc::RepeatedField<global::ETHotfix.RoomInfo>();
    public pbc::RepeatedField<global::ETHotfix.RoomInfo> Infos {
      get { return infos_; }
      set { infos_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      infos_.WriteTo(output, _repeated_infos_codec);
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      size += infos_.CalculateSize(_repeated_infos_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      for (int i = 0; i < infos_.Count; i++) { MessagePool.Instance.Recycle(infos_[i]); }
      infos_.Clear();
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            infos_.AddEntriesFrom(input, _repeated_infos_codec);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// TODO:Obsolete
  /// </summary>
  public partial class C2G_RoamingEnter : pb::IMessage {
    private static readonly pb::MessageParser<C2G_RoamingEnter> _parser = new pb::MessageParser<C2G_RoamingEnter>(() => (C2G_RoamingEnter)MessagePool.Instance.Fetch(typeof(C2G_RoamingEnter)));
    public static pb::MessageParser<C2G_RoamingEnter> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long roamingRoomId_;
    public long RoamingRoomId {
      get { return roamingRoomId_; }
      set {
        roamingRoomId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RoamingRoomId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(RoamingRoomId);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (RoamingRoomId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RoamingRoomId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      roamingRoomId_ = 0;
      rpcId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoamingRoomId = input.ReadInt64();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// TODO:Obsolete
  /// </summary>
  public partial class G2C_RoamingEnter : pb::IMessage {
    private static readonly pb::MessageParser<G2C_RoamingEnter> _parser = new pb::MessageParser<G2C_RoamingEnter>(() => (G2C_RoamingEnter)MessagePool.Instance.Fetch(typeof(G2C_RoamingEnter)));
    public static pb::MessageParser<G2C_RoamingEnter> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private global::ETHotfix.MapUnitInfo selfInfo_;
    public global::ETHotfix.MapUnitInfo SelfInfo {
      get { return selfInfo_; }
      set {
        selfInfo_ = value;
      }
    }

    private long roadSettingId_;
    public long RoadSettingId {
      get { return roadSettingId_; }
      set {
        roadSettingId_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::ETHotfix.MapUnitInfo_Global> _repeated_globalInfos_codec
        = pb::FieldCodec.ForMessage(26, global::ETHotfix.MapUnitInfo_Global.Parser);
    private pbc::RepeatedField<global::ETHotfix.MapUnitInfo_Global> globalInfos_ = new pbc::RepeatedField<global::ETHotfix.MapUnitInfo_Global>();
    public pbc::RepeatedField<global::ETHotfix.MapUnitInfo_Global> GlobalInfos {
      get { return globalInfos_; }
      set { globalInfos_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (selfInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(SelfInfo);
      }
      if (RoadSettingId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(RoadSettingId);
      }
      globalInfos_.WriteTo(output, _repeated_globalInfos_codec);
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (selfInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SelfInfo);
      }
      if (RoadSettingId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RoadSettingId);
      }
      size += globalInfos_.CalculateSize(_repeated_globalInfos_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      if (selfInfo_ != null) MessagePool.Instance.Recycle(selfInfo_); selfInfo_ = null;
      roadSettingId_ = 0;
      for (int i = 0; i < globalInfos_.Count; i++) { MessagePool.Instance.Recycle(globalInfos_[i]); }
      globalInfos_.Clear();
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (selfInfo_ == null) {
              selfInfo_ = new global::ETHotfix.MapUnitInfo();
            }
            input.ReadMessage(selfInfo_);
            break;
          }
          case 16: {
            RoadSettingId = input.ReadInt64();
            break;
          }
          case 26: {
            globalInfos_.AddEntriesFrom(input, _repeated_globalInfos_codec);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// TODO:Obsolete
  /// </summary>
  public partial class C2M_RoamingLeave : pb::IMessage {
    private static readonly pb::MessageParser<C2M_RoamingLeave> _parser = new pb::MessageParser<C2M_RoamingLeave>(() => (C2M_RoamingLeave)MessagePool.Instance.Fetch(typeof(C2M_RoamingLeave)));
    public static pb::MessageParser<C2M_RoamingLeave> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// TODO:Obsolete
  /// </summary>
  public partial class M2C_RoamingLeave : pb::IMessage {
    private static readonly pb::MessageParser<M2C_RoamingLeave> _parser = new pb::MessageParser<M2C_RoamingLeave>(() => (M2C_RoamingLeave)MessagePool.Instance.Fetch(typeof(M2C_RoamingLeave)));
    public static pb::MessageParser<M2C_RoamingLeave> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class C2M_SaveRideRecord : pb::IMessage {
    private static readonly pb::MessageParser<C2M_SaveRideRecord> _parser = new pb::MessageParser<C2M_SaveRideRecord>(() => (C2M_SaveRideRecord)MessagePool.Instance.Fetch(typeof(C2M_SaveRideRecord)));
    public static pb::MessageParser<C2M_SaveRideRecord> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_SaveRideRecord : pb::IMessage {
    private static readonly pb::MessageParser<M2C_SaveRideRecord> _parser = new pb::MessageParser<M2C_SaveRideRecord>(() => (M2C_SaveRideRecord)MessagePool.Instance.Fetch(typeof(M2C_SaveRideRecord)));
    public static pb::MessageParser<M2C_SaveRideRecord> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class ReservationAllData : pb::IMessage {
    private static readonly pb::MessageParser<ReservationAllData> _parser = new pb::MessageParser<ReservationAllData>(() => (ReservationAllData)MessagePool.Instance.Fetch(typeof(ReservationAllData)));
    public static pb::MessageParser<ReservationAllData> Parser { get { return _parser; } }

    private long reservationId_;
    public long ReservationId {
      get { return reservationId_; }
      set {
        reservationId_ = value;
      }
    }

    private string senderName_ = "";
    public string SenderName {
      get { return senderName_; }
      set {
        senderName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private long senderUid_;
    public long SenderUid {
      get { return senderUid_; }
      set {
        senderUid_ = value;
      }
    }

    private static readonly pb::FieldCodec<long> _repeated_memberUid_codec
        = pb::FieldCodec.ForInt64(34);
    private pbc::RepeatedField<long> memberUid_ = new pbc::RepeatedField<long>();
    public pbc::RepeatedField<long> MemberUid {
      get { return memberUid_; }
      set { memberUid_ = value; }
    }

    private long roadSettingId_;
    public long RoadSettingId {
      get { return roadSettingId_; }
      set {
        roadSettingId_ = value;
      }
    }

    private long awakeUTCTimeTick_;
    public long AwakeUTCTimeTick {
      get { return awakeUTCTimeTick_; }
      set {
        awakeUTCTimeTick_ = value;
      }
    }

    private long startUTCTimeTick_;
    public long StartUTCTimeTick {
      get { return startUTCTimeTick_; }
      set {
        startUTCTimeTick_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (ReservationId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(ReservationId);
      }
      if (SenderName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(SenderName);
      }
      if (SenderUid != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(SenderUid);
      }
      memberUid_.WriteTo(output, _repeated_memberUid_codec);
      if (RoadSettingId != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(RoadSettingId);
      }
      if (AwakeUTCTimeTick != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(AwakeUTCTimeTick);
      }
      if (StartUTCTimeTick != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(StartUTCTimeTick);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (ReservationId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ReservationId);
      }
      if (SenderName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SenderName);
      }
      if (SenderUid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SenderUid);
      }
      size += memberUid_.CalculateSize(_repeated_memberUid_codec);
      if (RoadSettingId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RoadSettingId);
      }
      if (AwakeUTCTimeTick != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(AwakeUTCTimeTick);
      }
      if (StartUTCTimeTick != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(StartUTCTimeTick);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      reservationId_ = 0;
      senderName_ = "";
      senderUid_ = 0;
      memberUid_.Clear();
      roadSettingId_ = 0;
      awakeUTCTimeTick_ = 0;
      startUTCTimeTick_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ReservationId = input.ReadInt64();
            break;
          }
          case 18: {
            SenderName = input.ReadString();
            break;
          }
          case 24: {
            SenderUid = input.ReadInt64();
            break;
          }
          case 34:
          case 32: {
            memberUid_.AddEntriesFrom(input, _repeated_memberUid_codec);
            break;
          }
          case 40: {
            RoadSettingId = input.ReadInt64();
            break;
          }
          case 48: {
            AwakeUTCTimeTick = input.ReadInt64();
            break;
          }
          case 56: {
            StartUTCTimeTick = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class ReservationData : pb::IMessage {
    private static readonly pb::MessageParser<ReservationData> _parser = new pb::MessageParser<ReservationData>(() => (ReservationData)MessagePool.Instance.Fetch(typeof(ReservationData)));
    public static pb::MessageParser<ReservationData> Parser { get { return _parser; } }

    private long reservationId_;
    public long ReservationId {
      get { return reservationId_; }
      set {
        reservationId_ = value;
      }
    }

    private string senderName_ = "";
    public string SenderName {
      get { return senderName_; }
      set {
        senderName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private long senderUid_;
    public long SenderUid {
      get { return senderUid_; }
      set {
        senderUid_ = value;
      }
    }

    private long startUTCTimeTick_;
    public long StartUTCTimeTick {
      get { return startUTCTimeTick_; }
      set {
        startUTCTimeTick_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (ReservationId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(ReservationId);
      }
      if (SenderName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(SenderName);
      }
      if (SenderUid != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(SenderUid);
      }
      if (StartUTCTimeTick != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(StartUTCTimeTick);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (ReservationId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ReservationId);
      }
      if (SenderName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SenderName);
      }
      if (SenderUid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SenderUid);
      }
      if (StartUTCTimeTick != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(StartUTCTimeTick);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      reservationId_ = 0;
      senderName_ = "";
      senderUid_ = 0;
      startUTCTimeTick_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ReservationId = input.ReadInt64();
            break;
          }
          case 18: {
            SenderName = input.ReadString();
            break;
          }
          case 24: {
            SenderUid = input.ReadInt64();
            break;
          }
          case 32: {
            StartUTCTimeTick = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class ReservationMemberData : pb::IMessage {
    private static readonly pb::MessageParser<ReservationMemberData> _parser = new pb::MessageParser<ReservationMemberData>(() => (ReservationMemberData)MessagePool.Instance.Fetch(typeof(ReservationMemberData)));
    public static pb::MessageParser<ReservationMemberData> Parser { get { return _parser; } }

    private int memberIndex_;
    public int MemberIndex {
      get { return memberIndex_; }
      set {
        memberIndex_ = value;
      }
    }

    private long uid_;
    public long Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    private string name_ = "";
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private int location_;
    public int Location {
      get { return location_; }
      set {
        location_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (MemberIndex != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(MemberIndex);
      }
      if (Uid != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Uid);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (Location != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Location);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (MemberIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MemberIndex);
      }
      if (Uid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Uid);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Location != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Location);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      memberIndex_ = 0;
      uid_ = 0;
      name_ = "";
      location_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            MemberIndex = input.ReadInt32();
            break;
          }
          case 16: {
            Uid = input.ReadInt64();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
          case 32: {
            Location = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// TODO:Obsolete
  /// </summary>
  public partial class C2G_TeamReservationGetList : pb::IMessage {
    private static readonly pb::MessageParser<C2G_TeamReservationGetList> _parser = new pb::MessageParser<C2G_TeamReservationGetList>(() => (C2G_TeamReservationGetList)MessagePool.Instance.Fetch(typeof(C2G_TeamReservationGetList)));
    public static pb::MessageParser<C2G_TeamReservationGetList> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// TODO:Obsolete
  /// </summary>
  public partial class G2C_TeamReservationGetList : pb::IMessage {
    private static readonly pb::MessageParser<G2C_TeamReservationGetList> _parser = new pb::MessageParser<G2C_TeamReservationGetList>(() => (G2C_TeamReservationGetList)MessagePool.Instance.Fetch(typeof(G2C_TeamReservationGetList)));
    public static pb::MessageParser<G2C_TeamReservationGetList> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private static readonly pb::FieldCodec<global::ETHotfix.ReservationData> _repeated_reservationDatas_codec
        = pb::FieldCodec.ForMessage(10, global::ETHotfix.ReservationData.Parser);
    private pbc::RepeatedField<global::ETHotfix.ReservationData> reservationDatas_ = new pbc::RepeatedField<global::ETHotfix.ReservationData>();
    public pbc::RepeatedField<global::ETHotfix.ReservationData> ReservationDatas {
      get { return reservationDatas_; }
      set { reservationDatas_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      reservationDatas_.WriteTo(output, _repeated_reservationDatas_codec);
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      size += reservationDatas_.CalculateSize(_repeated_reservationDatas_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      for (int i = 0; i < reservationDatas_.Count; i++) { MessagePool.Instance.Recycle(reservationDatas_[i]); }
      reservationDatas_.Clear();
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            reservationDatas_.AddEntriesFrom(input, _repeated_reservationDatas_codec);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// TODO:Obsolete
  /// </summary>
  public partial class C2G_TeamReservationCancel : pb::IMessage {
    private static readonly pb::MessageParser<C2G_TeamReservationCancel> _parser = new pb::MessageParser<C2G_TeamReservationCancel>(() => (C2G_TeamReservationCancel)MessagePool.Instance.Fetch(typeof(C2G_TeamReservationCancel)));
    public static pb::MessageParser<C2G_TeamReservationCancel> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long reservationId_;
    public long ReservationId {
      get { return reservationId_; }
      set {
        reservationId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (ReservationId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(ReservationId);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ReservationId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ReservationId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      reservationId_ = 0;
      rpcId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ReservationId = input.ReadInt64();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// TODO:Obsolete
  /// </summary>
  public partial class G2C_TeamReservationCancel : pb::IMessage {
    private static readonly pb::MessageParser<G2C_TeamReservationCancel> _parser = new pb::MessageParser<G2C_TeamReservationCancel>(() => (G2C_TeamReservationCancel)MessagePool.Instance.Fetch(typeof(G2C_TeamReservationCancel)));
    public static pb::MessageParser<G2C_TeamReservationCancel> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// TODO:Obsolete
  /// </summary>
  public partial class C2G_TeamReservationJoin : pb::IMessage {
    private static readonly pb::MessageParser<C2G_TeamReservationJoin> _parser = new pb::MessageParser<C2G_TeamReservationJoin>(() => (C2G_TeamReservationJoin)MessagePool.Instance.Fetch(typeof(C2G_TeamReservationJoin)));
    public static pb::MessageParser<C2G_TeamReservationJoin> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long reservationId_;
    public long ReservationId {
      get { return reservationId_; }
      set {
        reservationId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (ReservationId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(ReservationId);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ReservationId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ReservationId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      reservationId_ = 0;
      rpcId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ReservationId = input.ReadInt64();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// TODO:Obsolete
  /// </summary>
  public partial class G2C_TeamReservationJoin : pb::IMessage {
    private static readonly pb::MessageParser<G2C_TeamReservationJoin> _parser = new pb::MessageParser<G2C_TeamReservationJoin>(() => (G2C_TeamReservationJoin)MessagePool.Instance.Fetch(typeof(G2C_TeamReservationJoin)));
    public static pb::MessageParser<G2C_TeamReservationJoin> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private global::ETHotfix.RoomInfo info_;
    public global::ETHotfix.RoomInfo Info {
      get { return info_; }
      set {
        info_ = value;
      }
    }

    private global::ETHotfix.TeamRoomData data_;
    public global::ETHotfix.TeamRoomData Data {
      get { return data_; }
      set {
        data_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::ETHotfix.TeamMemberData> _repeated_memberDatas_codec
        = pb::FieldCodec.ForMessage(26, global::ETHotfix.TeamMemberData.Parser);
    private pbc::RepeatedField<global::ETHotfix.TeamMemberData> memberDatas_ = new pbc::RepeatedField<global::ETHotfix.TeamMemberData>();
    public pbc::RepeatedField<global::ETHotfix.TeamMemberData> MemberDatas {
      get { return memberDatas_; }
      set { memberDatas_ = value; }
    }

    private static readonly pb::FieldCodec<global::ETHotfix.ReservationMemberData> _repeated_reservationMemberDatas_codec
        = pb::FieldCodec.ForMessage(34, global::ETHotfix.ReservationMemberData.Parser);
    private pbc::RepeatedField<global::ETHotfix.ReservationMemberData> reservationMemberDatas_ = new pbc::RepeatedField<global::ETHotfix.ReservationMemberData>();
    public pbc::RepeatedField<global::ETHotfix.ReservationMemberData> ReservationMemberDatas {
      get { return reservationMemberDatas_; }
      set { reservationMemberDatas_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (info_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Info);
      }
      if (data_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Data);
      }
      memberDatas_.WriteTo(output, _repeated_memberDatas_codec);
      reservationMemberDatas_.WriteTo(output, _repeated_reservationMemberDatas_codec);
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (info_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Info);
      }
      if (data_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Data);
      }
      size += memberDatas_.CalculateSize(_repeated_memberDatas_codec);
      size += reservationMemberDatas_.CalculateSize(_repeated_reservationMemberDatas_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      if (info_ != null) MessagePool.Instance.Recycle(info_); info_ = null;
      if (data_ != null) MessagePool.Instance.Recycle(data_); data_ = null;
      for (int i = 0; i < memberDatas_.Count; i++) { MessagePool.Instance.Recycle(memberDatas_[i]); }
      memberDatas_.Clear();
      for (int i = 0; i < reservationMemberDatas_.Count; i++) { MessagePool.Instance.Recycle(reservationMemberDatas_[i]); }
      reservationMemberDatas_.Clear();
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (info_ == null) {
              info_ = new global::ETHotfix.RoomInfo();
            }
            input.ReadMessage(info_);
            break;
          }
          case 18: {
            if (data_ == null) {
              data_ = new global::ETHotfix.TeamRoomData();
            }
            input.ReadMessage(data_);
            break;
          }
          case 26: {
            memberDatas_.AddEntriesFrom(input, _repeated_memberDatas_codec);
            break;
          }
          case 34: {
            reservationMemberDatas_.AddEntriesFrom(input, _repeated_reservationMemberDatas_codec);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class G2C_TeamReservationAdd : pb::IMessage {
    private static readonly pb::MessageParser<G2C_TeamReservationAdd> _parser = new pb::MessageParser<G2C_TeamReservationAdd>(() => (G2C_TeamReservationAdd)MessagePool.Instance.Fetch(typeof(G2C_TeamReservationAdd)));
    public static pb::MessageParser<G2C_TeamReservationAdd> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private global::ETHotfix.ReservationData reservationData_;
    public global::ETHotfix.ReservationData ReservationData {
      get { return reservationData_; }
      set {
        reservationData_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (reservationData_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(ReservationData);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (reservationData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(ReservationData);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      if (reservationData_ != null) MessagePool.Instance.Recycle(reservationData_); reservationData_ = null;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (reservationData_ == null) {
              reservationData_ = new global::ETHotfix.ReservationData();
            }
            input.ReadMessage(reservationData_);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class G2C_TeamReservationRemove : pb::IMessage {
    private static readonly pb::MessageParser<G2C_TeamReservationRemove> _parser = new pb::MessageParser<G2C_TeamReservationRemove>(() => (G2C_TeamReservationRemove)MessagePool.Instance.Fetch(typeof(G2C_TeamReservationRemove)));
    public static pb::MessageParser<G2C_TeamReservationRemove> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private long reservationId_;
    public long ReservationId {
      get { return reservationId_; }
      set {
        reservationId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (ReservationId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(ReservationId);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (ReservationId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ReservationId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      reservationId_ = 0;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ReservationId = input.ReadInt64();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// TODO:Obsolete
  /// </summary>
  public partial class C2G_TeamReservationCreate : pb::IMessage {
    private static readonly pb::MessageParser<C2G_TeamReservationCreate> _parser = new pb::MessageParser<C2G_TeamReservationCreate>(() => (C2G_TeamReservationCreate)MessagePool.Instance.Fetch(typeof(C2G_TeamReservationCreate)));
    public static pb::MessageParser<C2G_TeamReservationCreate> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long roadSettingId_;
    public long RoadSettingId {
      get { return roadSettingId_; }
      set {
        roadSettingId_ = value;
      }
    }

    private long startUTCTimeTick_;
    public long StartUTCTimeTick {
      get { return startUTCTimeTick_; }
      set {
        startUTCTimeTick_ = value;
      }
    }

    private static readonly pb::FieldCodec<long> _repeated_memberUid_codec
        = pb::FieldCodec.ForInt64(26);
    private pbc::RepeatedField<long> memberUid_ = new pbc::RepeatedField<long>();
    public pbc::RepeatedField<long> MemberUid {
      get { return memberUid_; }
      set { memberUid_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RoadSettingId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(RoadSettingId);
      }
      if (StartUTCTimeTick != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(StartUTCTimeTick);
      }
      memberUid_.WriteTo(output, _repeated_memberUid_codec);
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (RoadSettingId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RoadSettingId);
      }
      if (StartUTCTimeTick != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(StartUTCTimeTick);
      }
      size += memberUid_.CalculateSize(_repeated_memberUid_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      roadSettingId_ = 0;
      startUTCTimeTick_ = 0;
      memberUid_.Clear();
      rpcId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoadSettingId = input.ReadInt64();
            break;
          }
          case 16: {
            StartUTCTimeTick = input.ReadInt64();
            break;
          }
          case 26:
          case 24: {
            memberUid_.AddEntriesFrom(input, _repeated_memberUid_codec);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// TODO:Obsolete
  /// </summary>
  public partial class G2C_TeamReservationCreate : pb::IMessage {
    private static readonly pb::MessageParser<G2C_TeamReservationCreate> _parser = new pb::MessageParser<G2C_TeamReservationCreate>(() => (G2C_TeamReservationCreate)MessagePool.Instance.Fetch(typeof(G2C_TeamReservationCreate)));
    public static pb::MessageParser<G2C_TeamReservationCreate> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class InviteData : pb::IMessage {
    private static readonly pb::MessageParser<InviteData> _parser = new pb::MessageParser<InviteData>(() => (InviteData)MessagePool.Instance.Fetch(typeof(InviteData)));
    public static pb::MessageParser<InviteData> Parser { get { return _parser; } }

    private long inviteId_;
    public long InviteId {
      get { return inviteId_; }
      set {
        inviteId_ = value;
      }
    }

    private string senderName_ = "";
    public string SenderName {
      get { return senderName_; }
      set {
        senderName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private long senderUid_;
    public long SenderUid {
      get { return senderUid_; }
      set {
        senderUid_ = value;
      }
    }

    private long receiverUid_;
    public long ReceiverUid {
      get { return receiverUid_; }
      set {
        receiverUid_ = value;
      }
    }

    private long teamRoomId_;
    public long TeamRoomId {
      get { return teamRoomId_; }
      set {
        teamRoomId_ = value;
      }
    }

    private long roadSettingId_;
    public long RoadSettingId {
      get { return roadSettingId_; }
      set {
        roadSettingId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (InviteId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(InviteId);
      }
      if (SenderName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(SenderName);
      }
      if (SenderUid != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(SenderUid);
      }
      if (ReceiverUid != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(ReceiverUid);
      }
      if (TeamRoomId != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(TeamRoomId);
      }
      if (RoadSettingId != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(RoadSettingId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (InviteId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(InviteId);
      }
      if (SenderName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SenderName);
      }
      if (SenderUid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SenderUid);
      }
      if (ReceiverUid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ReceiverUid);
      }
      if (TeamRoomId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TeamRoomId);
      }
      if (RoadSettingId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RoadSettingId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      inviteId_ = 0;
      senderName_ = "";
      senderUid_ = 0;
      receiverUid_ = 0;
      teamRoomId_ = 0;
      roadSettingId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            InviteId = input.ReadInt64();
            break;
          }
          case 18: {
            SenderName = input.ReadString();
            break;
          }
          case 24: {
            SenderUid = input.ReadInt64();
            break;
          }
          case 32: {
            ReceiverUid = input.ReadInt64();
            break;
          }
          case 40: {
            TeamRoomId = input.ReadInt64();
            break;
          }
          case 48: {
            RoadSettingId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class C2M_TeamInvite : pb::IMessage {
    private static readonly pb::MessageParser<C2M_TeamInvite> _parser = new pb::MessageParser<C2M_TeamInvite>(() => (C2M_TeamInvite)MessagePool.Instance.Fetch(typeof(C2M_TeamInvite)));
    public static pb::MessageParser<C2M_TeamInvite> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private long receiverUid_;
    public long ReceiverUid {
      get { return receiverUid_; }
      set {
        receiverUid_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (ReceiverUid != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(ReceiverUid);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (ReceiverUid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ReceiverUid);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      receiverUid_ = 0;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ReceiverUid = input.ReadInt64();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_TeamInvite : pb::IMessage {
    private static readonly pb::MessageParser<M2C_TeamInvite> _parser = new pb::MessageParser<M2C_TeamInvite>(() => (M2C_TeamInvite)MessagePool.Instance.Fetch(typeof(M2C_TeamInvite)));
    public static pb::MessageParser<M2C_TeamInvite> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class G2C_TeamInviteReceiver : pb::IMessage {
    private static readonly pb::MessageParser<G2C_TeamInviteReceiver> _parser = new pb::MessageParser<G2C_TeamInviteReceiver>(() => (G2C_TeamInviteReceiver)MessagePool.Instance.Fetch(typeof(G2C_TeamInviteReceiver)));
    public static pb::MessageParser<G2C_TeamInviteReceiver> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private string senderName_ = "";
    public string SenderName {
      get { return senderName_; }
      set {
        senderName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private long inviteId_;
    public long InviteId {
      get { return inviteId_; }
      set {
        inviteId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (SenderName.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(SenderName);
      }
      if (InviteId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(InviteId);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (SenderName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SenderName);
      }
      if (InviteId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(InviteId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      senderName_ = "";
      inviteId_ = 0;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            SenderName = input.ReadString();
            break;
          }
          case 16: {
            InviteId = input.ReadInt64();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class G2C_TeamInviteTargerRefuse : pb::IMessage {
    private static readonly pb::MessageParser<G2C_TeamInviteTargerRefuse> _parser = new pb::MessageParser<G2C_TeamInviteTargerRefuse>(() => (G2C_TeamInviteTargerRefuse)MessagePool.Instance.Fetch(typeof(G2C_TeamInviteTargerRefuse)));
    public static pb::MessageParser<G2C_TeamInviteTargerRefuse> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private long refuseUid_;
    public long RefuseUid {
      get { return refuseUid_; }
      set {
        refuseUid_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RefuseUid != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(RefuseUid);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (RefuseUid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RefuseUid);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      refuseUid_ = 0;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RefuseUid = input.ReadInt64();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// TODO:Obsolete
  /// </summary>
  public partial class C2G_TeamInviteGetList : pb::IMessage {
    private static readonly pb::MessageParser<C2G_TeamInviteGetList> _parser = new pb::MessageParser<C2G_TeamInviteGetList>(() => (C2G_TeamInviteGetList)MessagePool.Instance.Fetch(typeof(C2G_TeamInviteGetList)));
    public static pb::MessageParser<C2G_TeamInviteGetList> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// TODO:Obsolete
  /// </summary>
  public partial class G2C_TeamInviteGetList : pb::IMessage {
    private static readonly pb::MessageParser<G2C_TeamInviteGetList> _parser = new pb::MessageParser<G2C_TeamInviteGetList>(() => (G2C_TeamInviteGetList)MessagePool.Instance.Fetch(typeof(G2C_TeamInviteGetList)));
    public static pb::MessageParser<G2C_TeamInviteGetList> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private static readonly pb::FieldCodec<string> _repeated_senderNames_codec
        = pb::FieldCodec.ForString(10);
    private pbc::RepeatedField<string> senderNames_ = new pbc::RepeatedField<string>();
    public pbc::RepeatedField<string> SenderNames {
      get { return senderNames_; }
      set { senderNames_ = value; }
    }

    private static readonly pb::FieldCodec<long> _repeated_inviteIds_codec
        = pb::FieldCodec.ForInt64(18);
    private pbc::RepeatedField<long> inviteIds_ = new pbc::RepeatedField<long>();
    public pbc::RepeatedField<long> InviteIds {
      get { return inviteIds_; }
      set { inviteIds_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      senderNames_.WriteTo(output, _repeated_senderNames_codec);
      inviteIds_.WriteTo(output, _repeated_inviteIds_codec);
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      size += senderNames_.CalculateSize(_repeated_senderNames_codec);
      size += inviteIds_.CalculateSize(_repeated_inviteIds_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      senderNames_.Clear();
      inviteIds_.Clear();
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            senderNames_.AddEntriesFrom(input, _repeated_senderNames_codec);
            break;
          }
          case 18:
          case 16: {
            inviteIds_.AddEntriesFrom(input, _repeated_inviteIds_codec);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// TODO:Obsolete
  /// </summary>
  public partial class C2G_TeamInviteAccept : pb::IMessage {
    private static readonly pb::MessageParser<C2G_TeamInviteAccept> _parser = new pb::MessageParser<C2G_TeamInviteAccept>(() => (C2G_TeamInviteAccept)MessagePool.Instance.Fetch(typeof(C2G_TeamInviteAccept)));
    public static pb::MessageParser<C2G_TeamInviteAccept> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long inviteId_;
    public long InviteId {
      get { return inviteId_; }
      set {
        inviteId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (InviteId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(InviteId);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (InviteId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(InviteId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      inviteId_ = 0;
      rpcId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            InviteId = input.ReadInt64();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// TODO:Obsolete
  /// </summary>
  public partial class G2C_TeamInviteAccept : pb::IMessage {
    private static readonly pb::MessageParser<G2C_TeamInviteAccept> _parser = new pb::MessageParser<G2C_TeamInviteAccept>(() => (G2C_TeamInviteAccept)MessagePool.Instance.Fetch(typeof(G2C_TeamInviteAccept)));
    public static pb::MessageParser<G2C_TeamInviteAccept> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private global::ETHotfix.RoomInfo info_;
    public global::ETHotfix.RoomInfo Info {
      get { return info_; }
      set {
        info_ = value;
      }
    }

    private global::ETHotfix.TeamRoomData data_;
    public global::ETHotfix.TeamRoomData Data {
      get { return data_; }
      set {
        data_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::ETHotfix.TeamMemberData> _repeated_memberDatas_codec
        = pb::FieldCodec.ForMessage(26, global::ETHotfix.TeamMemberData.Parser);
    private pbc::RepeatedField<global::ETHotfix.TeamMemberData> memberDatas_ = new pbc::RepeatedField<global::ETHotfix.TeamMemberData>();
    public pbc::RepeatedField<global::ETHotfix.TeamMemberData> MemberDatas {
      get { return memberDatas_; }
      set { memberDatas_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (info_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Info);
      }
      if (data_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Data);
      }
      memberDatas_.WriteTo(output, _repeated_memberDatas_codec);
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (info_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Info);
      }
      if (data_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Data);
      }
      size += memberDatas_.CalculateSize(_repeated_memberDatas_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      if (info_ != null) MessagePool.Instance.Recycle(info_); info_ = null;
      if (data_ != null) MessagePool.Instance.Recycle(data_); data_ = null;
      for (int i = 0; i < memberDatas_.Count; i++) { MessagePool.Instance.Recycle(memberDatas_[i]); }
      memberDatas_.Clear();
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (info_ == null) {
              info_ = new global::ETHotfix.RoomInfo();
            }
            input.ReadMessage(info_);
            break;
          }
          case 18: {
            if (data_ == null) {
              data_ = new global::ETHotfix.TeamRoomData();
            }
            input.ReadMessage(data_);
            break;
          }
          case 26: {
            memberDatas_.AddEntriesFrom(input, _repeated_memberDatas_codec);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// TODO:Obsolete
  /// </summary>
  public partial class C2G_TeamInviteRefuse : pb::IMessage {
    private static readonly pb::MessageParser<C2G_TeamInviteRefuse> _parser = new pb::MessageParser<C2G_TeamInviteRefuse>(() => (C2G_TeamInviteRefuse)MessagePool.Instance.Fetch(typeof(C2G_TeamInviteRefuse)));
    public static pb::MessageParser<C2G_TeamInviteRefuse> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long inviteId_;
    public long InviteId {
      get { return inviteId_; }
      set {
        inviteId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (InviteId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(InviteId);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (InviteId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(InviteId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      inviteId_ = 0;
      rpcId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            InviteId = input.ReadInt64();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// TODO:Obsolete
  /// </summary>
  public partial class G2C_TeamInviteRefuse : pb::IMessage {
    private static readonly pb::MessageParser<G2C_TeamInviteRefuse> _parser = new pb::MessageParser<G2C_TeamInviteRefuse>(() => (G2C_TeamInviteRefuse)MessagePool.Instance.Fetch(typeof(G2C_TeamInviteRefuse)));
    public static pb::MessageParser<G2C_TeamInviteRefuse> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// TODO:Obsolete
  /// </summary>
  public partial class C2G_TeamInviteRefuseAll : pb::IMessage {
    private static readonly pb::MessageParser<C2G_TeamInviteRefuseAll> _parser = new pb::MessageParser<C2G_TeamInviteRefuseAll>(() => (C2G_TeamInviteRefuseAll)MessagePool.Instance.Fetch(typeof(C2G_TeamInviteRefuseAll)));
    public static pb::MessageParser<C2G_TeamInviteRefuseAll> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// TODO:Obsolete
  /// </summary>
  public partial class G2C_TeamInviteRefuseAll : pb::IMessage {
    private static readonly pb::MessageParser<G2C_TeamInviteRefuseAll> _parser = new pb::MessageParser<G2C_TeamInviteRefuseAll>(() => (G2C_TeamInviteRefuseAll)MessagePool.Instance.Fetch(typeof(G2C_TeamInviteRefuseAll)));
    public static pb::MessageParser<G2C_TeamInviteRefuseAll> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class TeamMemberData : pb::IMessage {
    private static readonly pb::MessageParser<TeamMemberData> _parser = new pb::MessageParser<TeamMemberData>(() => (TeamMemberData)MessagePool.Instance.Fetch(typeof(TeamMemberData)));
    public static pb::MessageParser<TeamMemberData> Parser { get { return _parser; } }

    private int memberIndex_;
    public int MemberIndex {
      get { return memberIndex_; }
      set {
        memberIndex_ = value;
      }
    }

    private long uid_;
    public long Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    private string name_ = "";
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private int location_;
    public int Location {
      get { return location_; }
      set {
        location_ = value;
      }
    }

    private float progress_;
    public float Progress {
      get { return progress_; }
      set {
        progress_ = value;
      }
    }

    private bool loadingDone_;
    public bool LoadingDone {
      get { return loadingDone_; }
      set {
        loadingDone_ = value;
      }
    }

    private bool isReady_;
    public bool IsReady {
      get { return isReady_; }
      set {
        isReady_ = value;
      }
    }

    private global::ETHotfix.PlayerCharSetting charSetting_;
    public global::ETHotfix.PlayerCharSetting CharSetting {
      get { return charSetting_; }
      set {
        charSetting_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (MemberIndex != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(MemberIndex);
      }
      if (Uid != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Uid);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Name);
      }
      if (Location != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Location);
      }
      if (Progress != 0F) {
        output.WriteRawTag(45);
        output.WriteFloat(Progress);
      }
      if (LoadingDone != false) {
        output.WriteRawTag(48);
        output.WriteBool(LoadingDone);
      }
      if (IsReady != false) {
        output.WriteRawTag(56);
        output.WriteBool(IsReady);
      }
      if (charSetting_ != null) {
        output.WriteRawTag(66);
        output.WriteMessage(CharSetting);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (MemberIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(MemberIndex);
      }
      if (Uid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Uid);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Location != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Location);
      }
      if (Progress != 0F) {
        size += 1 + 4;
      }
      if (LoadingDone != false) {
        size += 1 + 1;
      }
      if (IsReady != false) {
        size += 1 + 1;
      }
      if (charSetting_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CharSetting);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      memberIndex_ = 0;
      uid_ = 0;
      name_ = "";
      location_ = 0;
      progress_ = 0f;
      loadingDone_ = false;
      isReady_ = false;
      if (charSetting_ != null) MessagePool.Instance.Recycle(charSetting_); charSetting_ = null;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            MemberIndex = input.ReadInt32();
            break;
          }
          case 16: {
            Uid = input.ReadInt64();
            break;
          }
          case 26: {
            Name = input.ReadString();
            break;
          }
          case 32: {
            Location = input.ReadInt32();
            break;
          }
          case 45: {
            Progress = input.ReadFloat();
            break;
          }
          case 48: {
            LoadingDone = input.ReadBool();
            break;
          }
          case 56: {
            IsReady = input.ReadBool();
            break;
          }
          case 66: {
            if (charSetting_ == null) {
              charSetting_ = new global::ETHotfix.PlayerCharSetting();
            }
            input.ReadMessage(charSetting_);
            break;
          }
        }
      }
    }

  }

  public partial class TeamRoomData : pb::IMessage {
    private static readonly pb::MessageParser<TeamRoomData> _parser = new pb::MessageParser<TeamRoomData>(() => (TeamRoomData)MessagePool.Instance.Fetch(typeof(TeamRoomData)));
    public static pb::MessageParser<TeamRoomData> Parser { get { return _parser; } }

    private long leaderUid_;
    public long LeaderUid {
      get { return leaderUid_; }
      set {
        leaderUid_ = value;
      }
    }

    private string leaderName_ = "";
    public string LeaderName {
      get { return leaderName_; }
      set {
        leaderName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private long startUTCTimeTick_;
    public long StartUTCTimeTick {
      get { return startUTCTimeTick_; }
      set {
        startUTCTimeTick_ = value;
      }
    }

    private bool isReservation_;
    public bool IsReservation {
      get { return isReservation_; }
      set {
        isReservation_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (LeaderUid != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(LeaderUid);
      }
      if (LeaderName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(LeaderName);
      }
      if (StartUTCTimeTick != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(StartUTCTimeTick);
      }
      if (IsReservation != false) {
        output.WriteRawTag(32);
        output.WriteBool(IsReservation);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (LeaderUid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(LeaderUid);
      }
      if (LeaderName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(LeaderName);
      }
      if (StartUTCTimeTick != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(StartUTCTimeTick);
      }
      if (IsReservation != false) {
        size += 1 + 1;
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      leaderUid_ = 0;
      leaderName_ = "";
      startUTCTimeTick_ = 0;
      isReservation_ = false;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            LeaderUid = input.ReadInt64();
            break;
          }
          case 18: {
            LeaderName = input.ReadString();
            break;
          }
          case 24: {
            StartUTCTimeTick = input.ReadInt64();
            break;
          }
          case 32: {
            IsReservation = input.ReadBool();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// TODO:Obsolete
  /// </summary>
  public partial class C2G_TeamGetList : pb::IMessage {
    private static readonly pb::MessageParser<C2G_TeamGetList> _parser = new pb::MessageParser<C2G_TeamGetList>(() => (C2G_TeamGetList)MessagePool.Instance.Fetch(typeof(C2G_TeamGetList)));
    public static pb::MessageParser<C2G_TeamGetList> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private bool isReservation_;
    public bool IsReservation {
      get { return isReservation_; }
      set {
        isReservation_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (IsReservation != false) {
        output.WriteRawTag(8);
        output.WriteBool(IsReservation);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (IsReservation != false) {
        size += 1 + 1;
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      isReservation_ = false;
      rpcId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            IsReservation = input.ReadBool();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// TODO:Obsolete
  /// </summary>
  public partial class G2C_TeamGetList : pb::IMessage {
    private static readonly pb::MessageParser<G2C_TeamGetList> _parser = new pb::MessageParser<G2C_TeamGetList>(() => (G2C_TeamGetList)MessagePool.Instance.Fetch(typeof(G2C_TeamGetList)));
    public static pb::MessageParser<G2C_TeamGetList> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private static readonly pb::FieldCodec<global::ETHotfix.RoomInfo> _repeated_infos_codec
        = pb::FieldCodec.ForMessage(10, global::ETHotfix.RoomInfo.Parser);
    private pbc::RepeatedField<global::ETHotfix.RoomInfo> infos_ = new pbc::RepeatedField<global::ETHotfix.RoomInfo>();
    public pbc::RepeatedField<global::ETHotfix.RoomInfo> Infos {
      get { return infos_; }
      set { infos_ = value; }
    }

    private static readonly pb::FieldCodec<global::ETHotfix.TeamRoomData> _repeated_datas_codec
        = pb::FieldCodec.ForMessage(18, global::ETHotfix.TeamRoomData.Parser);
    private pbc::RepeatedField<global::ETHotfix.TeamRoomData> datas_ = new pbc::RepeatedField<global::ETHotfix.TeamRoomData>();
    public pbc::RepeatedField<global::ETHotfix.TeamRoomData> Datas {
      get { return datas_; }
      set { datas_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      infos_.WriteTo(output, _repeated_infos_codec);
      datas_.WriteTo(output, _repeated_datas_codec);
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      size += infos_.CalculateSize(_repeated_infos_codec);
      size += datas_.CalculateSize(_repeated_datas_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      for (int i = 0; i < infos_.Count; i++) { MessagePool.Instance.Recycle(infos_[i]); }
      infos_.Clear();
      for (int i = 0; i < datas_.Count; i++) { MessagePool.Instance.Recycle(datas_[i]); }
      datas_.Clear();
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            infos_.AddEntriesFrom(input, _repeated_infos_codec);
            break;
          }
          case 18: {
            datas_.AddEntriesFrom(input, _repeated_datas_codec);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// TODO:Obsolete
  /// </summary>
  public partial class C2G_TeamEnter : pb::IMessage {
    private static readonly pb::MessageParser<C2G_TeamEnter> _parser = new pb::MessageParser<C2G_TeamEnter>(() => (C2G_TeamEnter)MessagePool.Instance.Fetch(typeof(C2G_TeamEnter)));
    public static pb::MessageParser<C2G_TeamEnter> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long teamRoomId_;
    public long TeamRoomId {
      get { return teamRoomId_; }
      set {
        teamRoomId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (TeamRoomId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(TeamRoomId);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (TeamRoomId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TeamRoomId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      teamRoomId_ = 0;
      rpcId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TeamRoomId = input.ReadInt64();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// TODO:Obsolete
  /// </summary>
  public partial class G2C_TeamEnter : pb::IMessage {
    private static readonly pb::MessageParser<G2C_TeamEnter> _parser = new pb::MessageParser<G2C_TeamEnter>(() => (G2C_TeamEnter)MessagePool.Instance.Fetch(typeof(G2C_TeamEnter)));
    public static pb::MessageParser<G2C_TeamEnter> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private global::ETHotfix.RoomInfo info_;
    public global::ETHotfix.RoomInfo Info {
      get { return info_; }
      set {
        info_ = value;
      }
    }

    private global::ETHotfix.TeamRoomData data_;
    public global::ETHotfix.TeamRoomData Data {
      get { return data_; }
      set {
        data_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::ETHotfix.TeamMemberData> _repeated_memberDatas_codec
        = pb::FieldCodec.ForMessage(26, global::ETHotfix.TeamMemberData.Parser);
    private pbc::RepeatedField<global::ETHotfix.TeamMemberData> memberDatas_ = new pbc::RepeatedField<global::ETHotfix.TeamMemberData>();
    public pbc::RepeatedField<global::ETHotfix.TeamMemberData> MemberDatas {
      get { return memberDatas_; }
      set { memberDatas_ = value; }
    }

    private static readonly pb::FieldCodec<global::ETHotfix.ReservationMemberData> _repeated_reservationMemberDatas_codec
        = pb::FieldCodec.ForMessage(34, global::ETHotfix.ReservationMemberData.Parser);
    private pbc::RepeatedField<global::ETHotfix.ReservationMemberData> reservationMemberDatas_ = new pbc::RepeatedField<global::ETHotfix.ReservationMemberData>();
    public pbc::RepeatedField<global::ETHotfix.ReservationMemberData> ReservationMemberDatas {
      get { return reservationMemberDatas_; }
      set { reservationMemberDatas_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (info_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Info);
      }
      if (data_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Data);
      }
      memberDatas_.WriteTo(output, _repeated_memberDatas_codec);
      reservationMemberDatas_.WriteTo(output, _repeated_reservationMemberDatas_codec);
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (info_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Info);
      }
      if (data_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Data);
      }
      size += memberDatas_.CalculateSize(_repeated_memberDatas_codec);
      size += reservationMemberDatas_.CalculateSize(_repeated_reservationMemberDatas_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      if (info_ != null) MessagePool.Instance.Recycle(info_); info_ = null;
      if (data_ != null) MessagePool.Instance.Recycle(data_); data_ = null;
      for (int i = 0; i < memberDatas_.Count; i++) { MessagePool.Instance.Recycle(memberDatas_[i]); }
      memberDatas_.Clear();
      for (int i = 0; i < reservationMemberDatas_.Count; i++) { MessagePool.Instance.Recycle(reservationMemberDatas_[i]); }
      reservationMemberDatas_.Clear();
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (info_ == null) {
              info_ = new global::ETHotfix.RoomInfo();
            }
            input.ReadMessage(info_);
            break;
          }
          case 18: {
            if (data_ == null) {
              data_ = new global::ETHotfix.TeamRoomData();
            }
            input.ReadMessage(data_);
            break;
          }
          case 26: {
            memberDatas_.AddEntriesFrom(input, _repeated_memberDatas_codec);
            break;
          }
          case 34: {
            reservationMemberDatas_.AddEntriesFrom(input, _repeated_reservationMemberDatas_codec);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// TODO:Obsolete
  /// </summary>
  public partial class C2G_TeamCreate : pb::IMessage {
    private static readonly pb::MessageParser<C2G_TeamCreate> _parser = new pb::MessageParser<C2G_TeamCreate>(() => (C2G_TeamCreate)MessagePool.Instance.Fetch(typeof(C2G_TeamCreate)));
    public static pb::MessageParser<C2G_TeamCreate> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long roadSettingId_;
    public long RoadSettingId {
      get { return roadSettingId_; }
      set {
        roadSettingId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RoadSettingId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(RoadSettingId);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (RoadSettingId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RoadSettingId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      roadSettingId_ = 0;
      rpcId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoadSettingId = input.ReadInt64();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// TODO:Obsolete
  /// </summary>
  public partial class G2C_TeamCreate : pb::IMessage {
    private static readonly pb::MessageParser<G2C_TeamCreate> _parser = new pb::MessageParser<G2C_TeamCreate>(() => (G2C_TeamCreate)MessagePool.Instance.Fetch(typeof(G2C_TeamCreate)));
    public static pb::MessageParser<G2C_TeamCreate> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private global::ETHotfix.RoomInfo info_;
    public global::ETHotfix.RoomInfo Info {
      get { return info_; }
      set {
        info_ = value;
      }
    }

    private global::ETHotfix.TeamRoomData data_;
    public global::ETHotfix.TeamRoomData Data {
      get { return data_; }
      set {
        data_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::ETHotfix.TeamMemberData> _repeated_memberDatas_codec
        = pb::FieldCodec.ForMessage(26, global::ETHotfix.TeamMemberData.Parser);
    private pbc::RepeatedField<global::ETHotfix.TeamMemberData> memberDatas_ = new pbc::RepeatedField<global::ETHotfix.TeamMemberData>();
    public pbc::RepeatedField<global::ETHotfix.TeamMemberData> MemberDatas {
      get { return memberDatas_; }
      set { memberDatas_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (info_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Info);
      }
      if (data_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Data);
      }
      memberDatas_.WriteTo(output, _repeated_memberDatas_codec);
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (info_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Info);
      }
      if (data_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Data);
      }
      size += memberDatas_.CalculateSize(_repeated_memberDatas_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      if (info_ != null) MessagePool.Instance.Recycle(info_); info_ = null;
      if (data_ != null) MessagePool.Instance.Recycle(data_); data_ = null;
      for (int i = 0; i < memberDatas_.Count; i++) { MessagePool.Instance.Recycle(memberDatas_[i]); }
      memberDatas_.Clear();
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (info_ == null) {
              info_ = new global::ETHotfix.RoomInfo();
            }
            input.ReadMessage(info_);
            break;
          }
          case 18: {
            if (data_ == null) {
              data_ = new global::ETHotfix.TeamRoomData();
            }
            input.ReadMessage(data_);
            break;
          }
          case 26: {
            memberDatas_.AddEntriesFrom(input, _repeated_memberDatas_codec);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_TeamGoBattleProgressReceiver : pb::IMessage {
    private static readonly pb::MessageParser<M2C_TeamGoBattleProgressReceiver> _parser = new pb::MessageParser<M2C_TeamGoBattleProgressReceiver>(() => (M2C_TeamGoBattleProgressReceiver)MessagePool.Instance.Fetch(typeof(M2C_TeamGoBattleProgressReceiver)));
    public static pb::MessageParser<M2C_TeamGoBattleProgressReceiver> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private long uid_;
    public long Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    private float progress_;
    public float Progress {
      get { return progress_; }
      set {
        progress_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Uid != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Uid);
      }
      if (Progress != 0F) {
        output.WriteRawTag(21);
        output.WriteFloat(Progress);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (Uid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Uid);
      }
      if (Progress != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uid_ = 0;
      progress_ = 0f;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uid = input.ReadInt64();
            break;
          }
          case 21: {
            Progress = input.ReadFloat();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_TeamGoBattleProgressAllDone : pb::IMessage {
    private static readonly pb::MessageParser<M2C_TeamGoBattleProgressAllDone> _parser = new pb::MessageParser<M2C_TeamGoBattleProgressAllDone>(() => (M2C_TeamGoBattleProgressAllDone)MessagePool.Instance.Fetch(typeof(M2C_TeamGoBattleProgressAllDone)));
    public static pb::MessageParser<M2C_TeamGoBattleProgressAllDone> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private long startUTCTick_;
    public long StartUTCTick {
      get { return startUTCTick_; }
      set {
        startUTCTick_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (StartUTCTick != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(StartUTCTick);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (StartUTCTick != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(StartUTCTick);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      startUTCTick_ = 0;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            StartUTCTick = input.ReadInt64();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_TeamGoBattle : pb::IMessage {
    private static readonly pb::MessageParser<M2C_TeamGoBattle> _parser = new pb::MessageParser<M2C_TeamGoBattle>(() => (M2C_TeamGoBattle)MessagePool.Instance.Fetch(typeof(M2C_TeamGoBattle)));
    public static pb::MessageParser<M2C_TeamGoBattle> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private long mapUnitId_;
    /// <summary>
    /// 自己的unit id
    /// </summary>
    public long MapUnitId {
      get { return mapUnitId_; }
      set {
        mapUnitId_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::ETHotfix.MapUnitInfo> _repeated_mapUnitInfos_codec
        = pb::FieldCodec.ForMessage(18, global::ETHotfix.MapUnitInfo.Parser);
    private pbc::RepeatedField<global::ETHotfix.MapUnitInfo> mapUnitInfos_ = new pbc::RepeatedField<global::ETHotfix.MapUnitInfo>();
    /// <summary>
    /// 全體玩家資訊
    /// </summary>
    public pbc::RepeatedField<global::ETHotfix.MapUnitInfo> MapUnitInfos {
      get { return mapUnitInfos_; }
      set { mapUnitInfos_ = value; }
    }

    private string flag_ = "";
    public string Flag {
      get { return flag_; }
      set {
        flag_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (MapUnitId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(MapUnitId);
      }
      mapUnitInfos_.WriteTo(output, _repeated_mapUnitInfos_codec);
      if (Flag.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Flag);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (MapUnitId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MapUnitId);
      }
      size += mapUnitInfos_.CalculateSize(_repeated_mapUnitInfos_codec);
      if (Flag.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Flag);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      mapUnitId_ = 0;
      for (int i = 0; i < mapUnitInfos_.Count; i++) { MessagePool.Instance.Recycle(mapUnitInfos_[i]); }
      mapUnitInfos_.Clear();
      flag_ = "";
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            MapUnitId = input.ReadInt64();
            break;
          }
          case 18: {
            mapUnitInfos_.AddEntriesFrom(input, _repeated_mapUnitInfos_codec);
            break;
          }
          case 26: {
            Flag = input.ReadString();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_TeamGoLobby : pb::IMessage {
    private static readonly pb::MessageParser<M2C_TeamGoLobby> _parser = new pb::MessageParser<M2C_TeamGoLobby>(() => (M2C_TeamGoLobby)MessagePool.Instance.Fetch(typeof(M2C_TeamGoLobby)));
    public static pb::MessageParser<M2C_TeamGoLobby> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_TeamLose : pb::IMessage {
    private static readonly pb::MessageParser<M2C_TeamLose> _parser = new pb::MessageParser<M2C_TeamLose>(() => (M2C_TeamLose)MessagePool.Instance.Fetch(typeof(M2C_TeamLose)));
    public static pb::MessageParser<M2C_TeamLose> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private global::ETHotfix.TeamLoseType loseType_ = 0;
    /// <summary>
    /// 失去隊伍原因
    /// </summary>
    public global::ETHotfix.TeamLoseType LoseType {
      get { return loseType_; }
      set {
        loseType_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (LoseType != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) LoseType);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (LoseType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) LoseType);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            loseType_ = (global::ETHotfix.TeamLoseType) input.ReadEnum();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_TeamModifyData : pb::IMessage {
    private static readonly pb::MessageParser<M2C_TeamModifyData> _parser = new pb::MessageParser<M2C_TeamModifyData>(() => (M2C_TeamModifyData)MessagePool.Instance.Fetch(typeof(M2C_TeamModifyData)));
    public static pb::MessageParser<M2C_TeamModifyData> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private global::ETHotfix.RoomInfo info_;
    public global::ETHotfix.RoomInfo Info {
      get { return info_; }
      set {
        info_ = value;
      }
    }

    private global::ETHotfix.TeamRoomData data_;
    public global::ETHotfix.TeamRoomData Data {
      get { return data_; }
      set {
        data_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (info_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Info);
      }
      if (data_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Data);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (info_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Info);
      }
      if (data_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Data);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      if (info_ != null) MessagePool.Instance.Recycle(info_); info_ = null;
      if (data_ != null) MessagePool.Instance.Recycle(data_); data_ = null;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (info_ == null) {
              info_ = new global::ETHotfix.RoomInfo();
            }
            input.ReadMessage(info_);
            break;
          }
          case 18: {
            if (data_ == null) {
              data_ = new global::ETHotfix.TeamRoomData();
            }
            input.ReadMessage(data_);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_TeamModifyMember : pb::IMessage {
    private static readonly pb::MessageParser<M2C_TeamModifyMember> _parser = new pb::MessageParser<M2C_TeamModifyMember>(() => (M2C_TeamModifyMember)MessagePool.Instance.Fetch(typeof(M2C_TeamModifyMember)));
    public static pb::MessageParser<M2C_TeamModifyMember> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private long uid_;
    public long Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    private global::ETHotfix.TeamMemberData memberData_;
    public global::ETHotfix.TeamMemberData MemberData {
      get { return memberData_; }
      set {
        memberData_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Uid != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Uid);
      }
      if (memberData_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(MemberData);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (Uid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Uid);
      }
      if (memberData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MemberData);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uid_ = 0;
      if (memberData_ != null) MessagePool.Instance.Recycle(memberData_); memberData_ = null;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uid = input.ReadInt64();
            break;
          }
          case 18: {
            if (memberData_ == null) {
              memberData_ = new global::ETHotfix.TeamMemberData();
            }
            input.ReadMessage(memberData_);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_TeamReadyModify : pb::IMessage {
    private static readonly pb::MessageParser<M2C_TeamReadyModify> _parser = new pb::MessageParser<M2C_TeamReadyModify>(() => (M2C_TeamReadyModify)MessagePool.Instance.Fetch(typeof(M2C_TeamReadyModify)));
    public static pb::MessageParser<M2C_TeamReadyModify> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private long uid_;
    public long Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    private bool isReady_;
    public bool IsReady {
      get { return isReady_; }
      set {
        isReady_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Uid != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Uid);
      }
      if (IsReady != false) {
        output.WriteRawTag(16);
        output.WriteBool(IsReady);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (Uid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Uid);
      }
      if (IsReady != false) {
        size += 1 + 1;
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uid_ = 0;
      isReady_ = false;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uid = input.ReadInt64();
            break;
          }
          case 16: {
            IsReady = input.ReadBool();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class C2M_TeamGoBattleProgress : pb::IMessage {
    private static readonly pb::MessageParser<C2M_TeamGoBattleProgress> _parser = new pb::MessageParser<C2M_TeamGoBattleProgress>(() => (C2M_TeamGoBattleProgress)MessagePool.Instance.Fetch(typeof(C2M_TeamGoBattleProgress)));
    public static pb::MessageParser<C2M_TeamGoBattleProgress> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private float progress_;
    public float Progress {
      get { return progress_; }
      set {
        progress_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Progress != 0F) {
        output.WriteRawTag(13);
        output.WriteFloat(Progress);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (Progress != 0F) {
        size += 1 + 4;
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      progress_ = 0f;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 13: {
            Progress = input.ReadFloat();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// TODO:Obsolete
  /// </summary>
  public partial class C2M_TeamLeave : pb::IMessage {
    private static readonly pb::MessageParser<C2M_TeamLeave> _parser = new pb::MessageParser<C2M_TeamLeave>(() => (C2M_TeamLeave)MessagePool.Instance.Fetch(typeof(C2M_TeamLeave)));
    public static pb::MessageParser<C2M_TeamLeave> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// TODO:Obsolete
  /// </summary>
  public partial class M2C_TeamLeave : pb::IMessage {
    private static readonly pb::MessageParser<M2C_TeamLeave> _parser = new pb::MessageParser<M2C_TeamLeave>(() => (M2C_TeamLeave)MessagePool.Instance.Fetch(typeof(M2C_TeamLeave)));
    public static pb::MessageParser<M2C_TeamLeave> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class C2M_TeamReady : pb::IMessage {
    private static readonly pb::MessageParser<C2M_TeamReady> _parser = new pb::MessageParser<C2M_TeamReady>(() => (C2M_TeamReady)MessagePool.Instance.Fetch(typeof(C2M_TeamReady)));
    public static pb::MessageParser<C2M_TeamReady> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private bool isReady_;
    public bool IsReady {
      get { return isReady_; }
      set {
        isReady_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (IsReady != false) {
        output.WriteRawTag(8);
        output.WriteBool(IsReady);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (IsReady != false) {
        size += 1 + 1;
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      isReady_ = false;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            IsReady = input.ReadBool();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_TeamReady : pb::IMessage {
    private static readonly pb::MessageParser<M2C_TeamReady> _parser = new pb::MessageParser<M2C_TeamReady>(() => (M2C_TeamReady)MessagePool.Instance.Fetch(typeof(M2C_TeamReady)));
    public static pb::MessageParser<M2C_TeamReady> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///----隊伍中隊長RPC---Start----
  /// </summary>
  public partial class C2M_TeamRun : pb::IMessage {
    private static readonly pb::MessageParser<C2M_TeamRun> _parser = new pb::MessageParser<C2M_TeamRun>(() => (C2M_TeamRun)MessagePool.Instance.Fetch(typeof(C2M_TeamRun)));
    public static pb::MessageParser<C2M_TeamRun> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_TeamRun : pb::IMessage {
    private static readonly pb::MessageParser<M2C_TeamRun> _parser = new pb::MessageParser<M2C_TeamRun>(() => (M2C_TeamRun)MessagePool.Instance.Fetch(typeof(M2C_TeamRun)));
    public static pb::MessageParser<M2C_TeamRun> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class C2M_TeamKick : pb::IMessage {
    private static readonly pb::MessageParser<C2M_TeamKick> _parser = new pb::MessageParser<C2M_TeamKick>(() => (C2M_TeamKick)MessagePool.Instance.Fetch(typeof(C2M_TeamKick)));
    public static pb::MessageParser<C2M_TeamKick> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private long uid_;
    public long Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Uid != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Uid);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (Uid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Uid);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uid_ = 0;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uid = input.ReadInt64();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_TeamKick : pb::IMessage {
    private static readonly pb::MessageParser<M2C_TeamKick> _parser = new pb::MessageParser<M2C_TeamKick>(() => (M2C_TeamKick)MessagePool.Instance.Fetch(typeof(M2C_TeamKick)));
    public static pb::MessageParser<M2C_TeamKick> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class C2M_TeamDeliveryLeader : pb::IMessage {
    private static readonly pb::MessageParser<C2M_TeamDeliveryLeader> _parser = new pb::MessageParser<C2M_TeamDeliveryLeader>(() => (C2M_TeamDeliveryLeader)MessagePool.Instance.Fetch(typeof(C2M_TeamDeliveryLeader)));
    public static pb::MessageParser<C2M_TeamDeliveryLeader> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private long uid_;
    public long Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Uid != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Uid);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (Uid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Uid);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uid_ = 0;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uid = input.ReadInt64();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_TeamDeliveryLeader : pb::IMessage {
    private static readonly pb::MessageParser<M2C_TeamDeliveryLeader> _parser = new pb::MessageParser<M2C_TeamDeliveryLeader>(() => (M2C_TeamDeliveryLeader)MessagePool.Instance.Fetch(typeof(M2C_TeamDeliveryLeader)));
    public static pb::MessageParser<M2C_TeamDeliveryLeader> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class C2M_TeamDisband : pb::IMessage {
    private static readonly pb::MessageParser<C2M_TeamDisband> _parser = new pb::MessageParser<C2M_TeamDisband>(() => (C2M_TeamDisband)MessagePool.Instance.Fetch(typeof(C2M_TeamDisband)));
    public static pb::MessageParser<C2M_TeamDisband> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_TeamDisband : pb::IMessage {
    private static readonly pb::MessageParser<M2C_TeamDisband> _parser = new pb::MessageParser<M2C_TeamDisband>(() => (M2C_TeamDisband)MessagePool.Instance.Fetch(typeof(M2C_TeamDisband)));
    public static pb::MessageParser<M2C_TeamDisband> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class BattleLeaderboardUnitInfo : pb::IMessage {
    private static readonly pb::MessageParser<BattleLeaderboardUnitInfo> _parser = new pb::MessageParser<BattleLeaderboardUnitInfo>(() => (BattleLeaderboardUnitInfo)MessagePool.Instance.Fetch(typeof(BattleLeaderboardUnitInfo)));
    public static pb::MessageParser<BattleLeaderboardUnitInfo> Parser { get { return _parser; } }

    private long uid_;
    public long Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    private string name_ = "";
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private double distanceTravelledTarget_;
    public double DistanceTravelledTarget {
      get { return distanceTravelledTarget_; }
      set {
        distanceTravelledTarget_ = value;
      }
    }

    private int location_;
    public int Location {
      get { return location_; }
      set {
        location_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Uid != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Uid);
      }
      if (Name.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Name);
      }
      if (DistanceTravelledTarget != 0D) {
        output.WriteRawTag(25);
        output.WriteDouble(DistanceTravelledTarget);
      }
      if (Location != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Location);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Uid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Uid);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (DistanceTravelledTarget != 0D) {
        size += 1 + 8;
      }
      if (Location != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Location);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uid_ = 0;
      name_ = "";
      location_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uid = input.ReadInt64();
            break;
          }
          case 18: {
            Name = input.ReadString();
            break;
          }
          case 25: {
            DistanceTravelledTarget = input.ReadDouble();
            break;
          }
          case 32: {
            Location = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_BattleLeaderboard : pb::IMessage {
    private static readonly pb::MessageParser<M2C_BattleLeaderboard> _parser = new pb::MessageParser<M2C_BattleLeaderboard>(() => (M2C_BattleLeaderboard)MessagePool.Instance.Fetch(typeof(M2C_BattleLeaderboard)));
    public static pb::MessageParser<M2C_BattleLeaderboard> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::ETHotfix.BattleLeaderboardUnitInfo> _repeated_battleLeaderboardUnitInfos_codec
        = pb::FieldCodec.ForMessage(10, global::ETHotfix.BattleLeaderboardUnitInfo.Parser);
    private pbc::RepeatedField<global::ETHotfix.BattleLeaderboardUnitInfo> battleLeaderboardUnitInfos_ = new pbc::RepeatedField<global::ETHotfix.BattleLeaderboardUnitInfo>();
    public pbc::RepeatedField<global::ETHotfix.BattleLeaderboardUnitInfo> BattleLeaderboardUnitInfos {
      get { return battleLeaderboardUnitInfos_; }
      set { battleLeaderboardUnitInfos_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      battleLeaderboardUnitInfos_.WriteTo(output, _repeated_battleLeaderboardUnitInfos_codec);
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      size += battleLeaderboardUnitInfos_.CalculateSize(_repeated_battleLeaderboardUnitInfos_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      for (int i = 0; i < battleLeaderboardUnitInfos_.Count; i++) { MessagePool.Instance.Recycle(battleLeaderboardUnitInfos_[i]); }
      battleLeaderboardUnitInfos_.Clear();
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            battleLeaderboardUnitInfos_.AddEntriesFrom(input, _repeated_battleLeaderboardUnitInfos_codec);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///連線
  /// </summary>
  public partial class G2C_ForceDisconnect : pb::IMessage {
    private static readonly pb::MessageParser<G2C_ForceDisconnect> _parser = new pb::MessageParser<G2C_ForceDisconnect>(() => (G2C_ForceDisconnect)MessagePool.Instance.Fetch(typeof(G2C_ForceDisconnect)));
    public static pb::MessageParser<G2C_ForceDisconnect> Parser { get { return _parser; } }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private int disconnectInfo_;
    public int DisconnectInfo {
      get { return disconnectInfo_; }
      set {
        disconnectInfo_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (DisconnectInfo != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(DisconnectInfo);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (DisconnectInfo != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(DisconnectInfo);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      disconnectInfo_ = 0;
      error_ = 0;
      message_ = "";
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            DisconnectInfo = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class PlayerStateData : pb::IMessage {
    private static readonly pb::MessageParser<PlayerStateData> _parser = new pb::MessageParser<PlayerStateData>(() => (PlayerStateData)MessagePool.Instance.Fetch(typeof(PlayerStateData)));
    public static pb::MessageParser<PlayerStateData> Parser { get { return _parser; } }

    private global::ETHotfix.PlayerStateData.Types.StateType type_ = 0;
    public global::ETHotfix.PlayerStateData.Types.StateType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    private static readonly pb::FieldCodec<ulong> _repeated_parameters_codec
        = pb::FieldCodec.ForUInt64(18);
    private pbc::RepeatedField<ulong> parameters_ = new pbc::RepeatedField<ulong>();
    public pbc::RepeatedField<ulong> Parameters {
      get { return parameters_; }
      set { parameters_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      parameters_.WriteTo(output, _repeated_parameters_codec);
    }

    public int CalculateSize() {
      int size = 0;
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      size += parameters_.CalculateSize(_repeated_parameters_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      parameters_.Clear();
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            type_ = (global::ETHotfix.PlayerStateData.Types.StateType) input.ReadEnum();
            break;
          }
          case 18:
          case 16: {
            parameters_.AddEntriesFrom(input, _repeated_parameters_codec);
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the PlayerStateData message type.</summary>
    public static class Types {
      public enum StateType {
        /// <summary>
        ///Parameter : 無
        /// </summary>
        Start = 0,
        /// <summary>
        ///Parameter : 無
        /// </summary>
        Lobby = 1,
        /// <summary>
        ///Parameter : 是否準備
        /// </summary>
        EnterRoom = 2,
        /// <summary>
        ///Parameter : 觀看角色Uid
        /// </summary>
        StartRoom = 3,
      }

    }
    #endregion

  }

  /// <summary>
  /// TODO:Obsolete
  /// </summary>
  public partial class C2G_SyncPlayerState : pb::IMessage {
    private static readonly pb::MessageParser<C2G_SyncPlayerState> _parser = new pb::MessageParser<C2G_SyncPlayerState>(() => (C2G_SyncPlayerState)MessagePool.Instance.Fetch(typeof(C2G_SyncPlayerState)));
    public static pb::MessageParser<C2G_SyncPlayerState> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private global::ETHotfix.PlayerStateData stateData_;
    public global::ETHotfix.PlayerStateData StateData {
      get { return stateData_; }
      set {
        stateData_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (stateData_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(StateData);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (stateData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StateData);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      if (stateData_ != null) MessagePool.Instance.Recycle(stateData_); stateData_ = null;
      rpcId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (stateData_ == null) {
              stateData_ = new global::ETHotfix.PlayerStateData();
            }
            input.ReadMessage(stateData_);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  /// TODO:Obsolete
  /// </summary>
  public partial class G2C_SyncPlayerState : pb::IMessage {
    private static readonly pb::MessageParser<G2C_SyncPlayerState> _parser = new pb::MessageParser<G2C_SyncPlayerState>(() => (G2C_SyncPlayerState)MessagePool.Instance.Fetch(typeof(G2C_SyncPlayerState)));
    public static pb::MessageParser<G2C_SyncPlayerState> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private global::ETHotfix.G2C_SyncPlayerState.Types.OptionType type_ = 0;
    public global::ETHotfix.G2C_SyncPlayerState.Types.OptionType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    private global::ETHotfix.RoomInfo info_;
    public global::ETHotfix.RoomInfo Info {
      get { return info_; }
      set {
        info_ = value;
      }
    }

    private global::ETHotfix.TeamRoomData data_;
    public global::ETHotfix.TeamRoomData Data {
      get { return data_; }
      set {
        data_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::ETHotfix.TeamMemberData> _repeated_memberDatas_codec
        = pb::FieldCodec.ForMessage(34, global::ETHotfix.TeamMemberData.Parser);
    private pbc::RepeatedField<global::ETHotfix.TeamMemberData> memberDatas_ = new pbc::RepeatedField<global::ETHotfix.TeamMemberData>();
    public pbc::RepeatedField<global::ETHotfix.TeamMemberData> MemberDatas {
      get { return memberDatas_; }
      set { memberDatas_ = value; }
    }

    private static readonly pb::FieldCodec<global::ETHotfix.ReservationMemberData> _repeated_reservationMemberDatas_codec
        = pb::FieldCodec.ForMessage(42, global::ETHotfix.ReservationMemberData.Parser);
    private pbc::RepeatedField<global::ETHotfix.ReservationMemberData> reservationMemberDatas_ = new pbc::RepeatedField<global::ETHotfix.ReservationMemberData>();
    public pbc::RepeatedField<global::ETHotfix.ReservationMemberData> ReservationMemberDatas {
      get { return reservationMemberDatas_; }
      set { reservationMemberDatas_ = value; }
    }

    private long mapUnitId_;
    public long MapUnitId {
      get { return mapUnitId_; }
      set {
        mapUnitId_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::ETHotfix.MapUnitInfo> _repeated_mapUnitInfos_codec
        = pb::FieldCodec.ForMessage(58, global::ETHotfix.MapUnitInfo.Parser);
    private pbc::RepeatedField<global::ETHotfix.MapUnitInfo> mapUnitInfos_ = new pbc::RepeatedField<global::ETHotfix.MapUnitInfo>();
    public pbc::RepeatedField<global::ETHotfix.MapUnitInfo> MapUnitInfos {
      get { return mapUnitInfos_; }
      set { mapUnitInfos_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (info_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Info);
      }
      if (data_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Data);
      }
      memberDatas_.WriteTo(output, _repeated_memberDatas_codec);
      reservationMemberDatas_.WriteTo(output, _repeated_reservationMemberDatas_codec);
      if (MapUnitId != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(MapUnitId);
      }
      mapUnitInfos_.WriteTo(output, _repeated_mapUnitInfos_codec);
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (info_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Info);
      }
      if (data_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Data);
      }
      size += memberDatas_.CalculateSize(_repeated_memberDatas_codec);
      size += reservationMemberDatas_.CalculateSize(_repeated_reservationMemberDatas_codec);
      if (MapUnitId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MapUnitId);
      }
      size += mapUnitInfos_.CalculateSize(_repeated_mapUnitInfos_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      if (info_ != null) MessagePool.Instance.Recycle(info_); info_ = null;
      if (data_ != null) MessagePool.Instance.Recycle(data_); data_ = null;
      for (int i = 0; i < memberDatas_.Count; i++) { MessagePool.Instance.Recycle(memberDatas_[i]); }
      memberDatas_.Clear();
      for (int i = 0; i < reservationMemberDatas_.Count; i++) { MessagePool.Instance.Recycle(reservationMemberDatas_[i]); }
      reservationMemberDatas_.Clear();
      mapUnitId_ = 0;
      for (int i = 0; i < mapUnitInfos_.Count; i++) { MessagePool.Instance.Recycle(mapUnitInfos_[i]); }
      mapUnitInfos_.Clear();
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            type_ = (global::ETHotfix.G2C_SyncPlayerState.Types.OptionType) input.ReadEnum();
            break;
          }
          case 18: {
            if (info_ == null) {
              info_ = new global::ETHotfix.RoomInfo();
            }
            input.ReadMessage(info_);
            break;
          }
          case 26: {
            if (data_ == null) {
              data_ = new global::ETHotfix.TeamRoomData();
            }
            input.ReadMessage(data_);
            break;
          }
          case 34: {
            memberDatas_.AddEntriesFrom(input, _repeated_memberDatas_codec);
            break;
          }
          case 42: {
            reservationMemberDatas_.AddEntriesFrom(input, _repeated_reservationMemberDatas_codec);
            break;
          }
          case 48: {
            MapUnitId = input.ReadInt64();
            break;
          }
          case 58: {
            mapUnitInfos_.AddEntriesFrom(input, _repeated_mapUnitInfos_codec);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the G2C_SyncPlayerState message type.</summary>
    public static class Types {
      public enum OptionType {
        /// <summary>
        ///不處理
        /// </summary>
        Nothing = 0,
        /// <summary>
        ///問要不要回EnterRoom
        /// </summary>
        CanReturnEnterRoom = 1,
        /// <summary>
        ///問要不要回StartRoom
        /// </summary>
        CanReturnStartRoom = 2,
        /// <summary>
        ///更新EnterRoom資料
        /// </summary>
        GetInfoEnterRoom = 3,
        /// <summary>
        ///更新StartRoom資料
        /// </summary>
        GetInfoStartRoom = 4,
        /// <summary>
        ///重跑進入StartRoom
        /// </summary>
        GoMap = 5,
      }

    }
    #endregion

  }

  public partial class C2G_SyncPlayerState_Return : pb::IMessage {
    private static readonly pb::MessageParser<C2G_SyncPlayerState_Return> _parser = new pb::MessageParser<C2G_SyncPlayerState_Return>(() => (C2G_SyncPlayerState_Return)MessagePool.Instance.Fetch(typeof(C2G_SyncPlayerState_Return)));
    public static pb::MessageParser<C2G_SyncPlayerState_Return> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private bool isReturn_;
    public bool IsReturn {
      get { return isReturn_; }
      set {
        isReturn_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (IsReturn != false) {
        output.WriteRawTag(8);
        output.WriteBool(IsReturn);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (IsReturn != false) {
        size += 1 + 1;
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      isReturn_ = false;
      rpcId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            IsReturn = input.ReadBool();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public partial class G2C_SyncPlayerState_Return : pb::IMessage {
    private static readonly pb::MessageParser<G2C_SyncPlayerState_Return> _parser = new pb::MessageParser<G2C_SyncPlayerState_Return>(() => (G2C_SyncPlayerState_Return)MessagePool.Instance.Fetch(typeof(G2C_SyncPlayerState_Return)));
    public static pb::MessageParser<G2C_SyncPlayerState_Return> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  /// <summary>
  ///註冊
  /// </summary>
  public partial class C2R_SignUp : pb::IMessage {
    private static readonly pb::MessageParser<C2R_SignUp> _parser = new pb::MessageParser<C2R_SignUp>(() => (C2R_SignUp)MessagePool.Instance.Fetch(typeof(C2R_SignUp)));
    public static pb::MessageParser<C2R_SignUp> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private string email_ = "";
    /// <summary>
    /// 信箱
    /// </summary>
    public string Email {
      get { return email_; }
      set {
        email_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string password_ = "";
    /// <summary>
    /// 密碼
    /// </summary>
    public string Password {
      get { return password_; }
      set {
        password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string secret_ = "";
    /// <summary>
    /// 秘密
    /// </summary>
    public string Secret {
      get { return secret_; }
      set {
        secret_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Email.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Email);
      }
      if (Password.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Password);
      }
      if (Secret.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Secret);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Email.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Email);
      }
      if (Password.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
      }
      if (Secret.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Secret);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      email_ = "";
      password_ = "";
      secret_ = "";
      rpcId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Email = input.ReadString();
            break;
          }
          case 18: {
            Password = input.ReadString();
            break;
          }
          case 26: {
            Secret = input.ReadString();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public partial class R2C_SignUp : pb::IMessage {
    private static readonly pb::MessageParser<R2C_SignUp> _parser = new pb::MessageParser<R2C_SignUp>(() => (R2C_SignUp)MessagePool.Instance.Fetch(typeof(R2C_SignUp)));
    public static pb::MessageParser<R2C_SignUp> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private static readonly pb::FieldCodec<int> _repeated_errorCodeList_codec
        = pb::FieldCodec.ForInt32(34);
    private pbc::RepeatedField<int> errorCodeList_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///錯誤列表
    /// </summary>
    public pbc::RepeatedField<int> ErrorCodeList {
      get { return errorCodeList_; }
      set { errorCodeList_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      errorCodeList_.WriteTo(output, _repeated_errorCodeList_codec);
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      size += errorCodeList_.CalculateSize(_repeated_errorCodeList_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      errorCodeList_.Clear();
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 34:
          case 32: {
            errorCodeList_.AddEntriesFrom(input, _repeated_errorCodeList_codec);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class AuthenticationInfo : pb::IMessage {
    private static readonly pb::MessageParser<AuthenticationInfo> _parser = new pb::MessageParser<AuthenticationInfo>(() => (AuthenticationInfo)MessagePool.Instance.Fetch(typeof(AuthenticationInfo)));
    public static pb::MessageParser<AuthenticationInfo> Parser { get { return _parser; } }

    private int language_;
    public int Language {
      get { return language_; }
      set {
        language_ = value;
      }
    }

    private string secret_ = "";
    public string Secret {
      get { return secret_; }
      set {
        secret_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string firebaseDeviceToken_ = "";
    public string FirebaseDeviceToken {
      get { return firebaseDeviceToken_; }
      set {
        firebaseDeviceToken_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private global::ETHotfix.AuthenticationType type_ = 0;
    public global::ETHotfix.AuthenticationType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    private string deviceId_ = "";
    public string DeviceId {
      get { return deviceId_; }
      set {
        deviceId_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Language != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Language);
      }
      if (Secret.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Secret);
      }
      if (FirebaseDeviceToken.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(FirebaseDeviceToken);
      }
      if (Type != 0) {
        output.WriteRawTag(32);
        output.WriteEnum((int) Type);
      }
      if (DeviceId.Length != 0) {
        output.WriteRawTag(42);
        output.WriteString(DeviceId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Language != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Language);
      }
      if (Secret.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Secret);
      }
      if (FirebaseDeviceToken.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(FirebaseDeviceToken);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (DeviceId.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(DeviceId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      language_ = 0;
      secret_ = "";
      firebaseDeviceToken_ = "";
      deviceId_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Language = input.ReadInt32();
            break;
          }
          case 18: {
            Secret = input.ReadString();
            break;
          }
          case 26: {
            FirebaseDeviceToken = input.ReadString();
            break;
          }
          case 32: {
            type_ = (global::ETHotfix.AuthenticationType) input.ReadEnum();
            break;
          }
          case 42: {
            DeviceId = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class C2R_Authentication : pb::IMessage {
    private static readonly pb::MessageParser<C2R_Authentication> _parser = new pb::MessageParser<C2R_Authentication>(() => (C2R_Authentication)MessagePool.Instance.Fetch(typeof(C2R_Authentication)));
    public static pb::MessageParser<C2R_Authentication> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private global::ETHotfix.AuthenticationInfo info_;
    public global::ETHotfix.AuthenticationInfo Info {
      get { return info_; }
      set {
        info_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (info_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Info);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (info_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Info);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      if (info_ != null) MessagePool.Instance.Recycle(info_); info_ = null;
      rpcId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (info_ == null) {
              info_ = new global::ETHotfix.AuthenticationInfo();
            }
            input.ReadMessage(info_);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public partial class R2C_Authentication : pb::IMessage {
    private static readonly pb::MessageParser<R2C_Authentication> _parser = new pb::MessageParser<R2C_Authentication>(() => (R2C_Authentication)MessagePool.Instance.Fetch(typeof(R2C_Authentication)));
    public static pb::MessageParser<R2C_Authentication> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string address_ = "";
    public string Address {
      get { return address_; }
      set {
        address_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private long key_;
    public long Key {
      get { return key_; }
      set {
        key_ = value;
      }
    }

    private static readonly pb::FieldCodec<int> _repeated_errorCodeList_codec
        = pb::FieldCodec.ForInt32(34);
    private pbc::RepeatedField<int> errorCodeList_ = new pbc::RepeatedField<int>();
    /// <summary>
    ///錯誤列表
    /// </summary>
    public pbc::RepeatedField<int> ErrorCodeList {
      get { return errorCodeList_; }
      set { errorCodeList_ = value; }
    }

    private global::ETHotfix.PlayerBaseInfo data_;
    /// <summary>
    ///需要使用的資料
    /// </summary>
    public global::ETHotfix.PlayerBaseInfo Data {
      get { return data_; }
      set {
        data_ = value;
      }
    }

    private string token_ = "";
    public string Token {
      get { return token_; }
      set {
        token_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private static readonly pb::FieldCodec<global::ETHotfix.AuthenticationType> _repeated_linkTypes_codec
        = pb::FieldCodec.ForEnum(58, x => (int) x, x => (global::ETHotfix.AuthenticationType) x);
    private pbc::RepeatedField<global::ETHotfix.AuthenticationType> linkTypes_ = new pbc::RepeatedField<global::ETHotfix.AuthenticationType>();
    /// <summary>
    ///連接第三方平台
    /// </summary>
    public pbc::RepeatedField<global::ETHotfix.AuthenticationType> LinkTypes {
      get { return linkTypes_; }
      set { linkTypes_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Address.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Address);
      }
      if (Key != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Key);
      }
      errorCodeList_.WriteTo(output, _repeated_errorCodeList_codec);
      if (data_ != null) {
        output.WriteRawTag(42);
        output.WriteMessage(Data);
      }
      if (Token.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(Token);
      }
      linkTypes_.WriteTo(output, _repeated_linkTypes_codec);
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (Address.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Address);
      }
      if (Key != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Key);
      }
      size += errorCodeList_.CalculateSize(_repeated_errorCodeList_codec);
      if (data_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Data);
      }
      if (Token.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Token);
      }
      size += linkTypes_.CalculateSize(_repeated_linkTypes_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      address_ = "";
      key_ = 0;
      errorCodeList_.Clear();
      if (data_ != null) MessagePool.Instance.Recycle(data_); data_ = null;
      token_ = "";
      linkTypes_.Clear();
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Address = input.ReadString();
            break;
          }
          case 16: {
            Key = input.ReadInt64();
            break;
          }
          case 34:
          case 32: {
            errorCodeList_.AddEntriesFrom(input, _repeated_errorCodeList_codec);
            break;
          }
          case 42: {
            if (data_ == null) {
              data_ = new global::ETHotfix.PlayerBaseInfo();
            }
            input.ReadMessage(data_);
            break;
          }
          case 50: {
            Token = input.ReadString();
            break;
          }
          case 58:
          case 56: {
            linkTypes_.AddEntriesFrom(input, _repeated_linkTypes_codec);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class C2G_Logout : pb::IMessage {
    private static readonly pb::MessageParser<C2G_Logout> _parser = new pb::MessageParser<C2G_Logout>(() => (C2G_Logout)MessagePool.Instance.Fetch(typeof(C2G_Logout)));
    public static pb::MessageParser<C2G_Logout> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public partial class G2C_Logout : pb::IMessage {
    private static readonly pb::MessageParser<G2C_Logout> _parser = new pb::MessageParser<G2C_Logout>(() => (G2C_Logout)MessagePool.Instance.Fetch(typeof(G2C_Logout)));
    public static pb::MessageParser<G2C_Logout> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class LinkInfo : pb::IMessage {
    private static readonly pb::MessageParser<LinkInfo> _parser = new pb::MessageParser<LinkInfo>(() => (LinkInfo)MessagePool.Instance.Fetch(typeof(LinkInfo)));
    public static pb::MessageParser<LinkInfo> Parser { get { return _parser; } }

    private string secret_ = "";
    public string Secret {
      get { return secret_; }
      set {
        secret_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private global::ETHotfix.AuthenticationType type_ = 0;
    public global::ETHotfix.AuthenticationType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Secret.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Secret);
      }
      if (Type != 0) {
        output.WriteRawTag(16);
        output.WriteEnum((int) Type);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Secret.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Secret);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      secret_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Secret = input.ReadString();
            break;
          }
          case 16: {
            type_ = (global::ETHotfix.AuthenticationType) input.ReadEnum();
            break;
          }
        }
      }
    }

  }

  public partial class C2L_Link : pb::IMessage {
    private static readonly pb::MessageParser<C2L_Link> _parser = new pb::MessageParser<C2L_Link>(() => (C2L_Link)MessagePool.Instance.Fetch(typeof(C2L_Link)));
    public static pb::MessageParser<C2L_Link> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private global::ETHotfix.LinkInfo info_;
    public global::ETHotfix.LinkInfo Info {
      get { return info_; }
      set {
        info_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (info_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Info);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(216, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (info_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Info);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      if (info_ != null) MessagePool.Instance.Recycle(info_); info_ = null;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (info_ == null) {
              info_ = new global::ETHotfix.LinkInfo();
            }
            input.ReadMessage(info_);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class L2C_Link : pb::IMessage {
    private static readonly pb::MessageParser<L2C_Link> _parser = new pb::MessageParser<L2C_Link>(() => (L2C_Link)MessagePool.Instance.Fetch(typeof(L2C_Link)));
    public static pb::MessageParser<L2C_Link> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private static readonly pb::FieldCodec<global::ETHotfix.AuthenticationType> _repeated_linkTypes_codec
        = pb::FieldCodec.ForEnum(10, x => (int) x, x => (global::ETHotfix.AuthenticationType) x);
    private pbc::RepeatedField<global::ETHotfix.AuthenticationType> linkTypes_ = new pbc::RepeatedField<global::ETHotfix.AuthenticationType>();
    public pbc::RepeatedField<global::ETHotfix.AuthenticationType> LinkTypes {
      get { return linkTypes_; }
      set { linkTypes_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      linkTypes_.WriteTo(output, _repeated_linkTypes_codec);
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      size += linkTypes_.CalculateSize(_repeated_linkTypes_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      linkTypes_.Clear();
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            linkTypes_.AddEntriesFrom(input, _repeated_linkTypes_codec);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class C2L_UpdateUserProfile : pb::IMessage {
    private static readonly pb::MessageParser<C2L_UpdateUserProfile> _parser = new pb::MessageParser<C2L_UpdateUserProfile>(() => (C2L_UpdateUserProfile)MessagePool.Instance.Fetch(typeof(C2L_UpdateUserProfile)));
    public static pb::MessageParser<C2L_UpdateUserProfile> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private string name_ = "";
    /// <summary>
    /// 名子
    /// </summary>
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private int sex_;
    /// <summary>
    ///性別
    /// </summary>
    public int Sex {
      get { return sex_; }
      set {
        sex_ = value;
      }
    }

    private int height_;
    /// <summary>
    ///身高
    /// </summary>
    public int Height {
      get { return height_; }
      set {
        height_ = value;
      }
    }

    private int weight_;
    /// <summary>
    ///體重
    /// </summary>
    public int Weight {
      get { return weight_; }
      set {
        weight_ = value;
      }
    }

    private int location_;
    /// <summary>
    ///國家
    /// </summary>
    public int Location {
      get { return location_; }
      set {
        location_ = value;
      }
    }

    private int birthday_;
    /// <summary>
    ///生日
    /// </summary>
    public int Birthday {
      get { return birthday_; }
      set {
        birthday_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Sex != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(Sex);
      }
      if (Height != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Height);
      }
      if (Weight != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(Weight);
      }
      if (Location != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Location);
      }
      if (Birthday != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(Birthday);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(216, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Sex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Sex);
      }
      if (Height != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Height);
      }
      if (Weight != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Weight);
      }
      if (Location != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Location);
      }
      if (Birthday != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Birthday);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      name_ = "";
      sex_ = 0;
      height_ = 0;
      weight_ = 0;
      location_ = 0;
      birthday_ = 0;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 16: {
            Sex = input.ReadInt32();
            break;
          }
          case 24: {
            Height = input.ReadInt32();
            break;
          }
          case 32: {
            Weight = input.ReadInt32();
            break;
          }
          case 40: {
            Location = input.ReadInt32();
            break;
          }
          case 48: {
            Birthday = input.ReadInt32();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class L2C_UpdateUserProfile : pb::IMessage {
    private static readonly pb::MessageParser<L2C_UpdateUserProfile> _parser = new pb::MessageParser<L2C_UpdateUserProfile>(() => (L2C_UpdateUserProfile)MessagePool.Instance.Fetch(typeof(L2C_UpdateUserProfile)));
    public static pb::MessageParser<L2C_UpdateUserProfile> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class C2L_UpdateUserEquip : pb::IMessage {
    private static readonly pb::MessageParser<C2L_UpdateUserEquip> _parser = new pb::MessageParser<C2L_UpdateUserEquip>(() => (C2L_UpdateUserEquip)MessagePool.Instance.Fetch(typeof(C2L_UpdateUserEquip)));
    public static pb::MessageParser<C2L_UpdateUserEquip> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private global::ETHotfix.PlayerCharSetting charSetting_;
    public global::ETHotfix.PlayerCharSetting CharSetting {
      get { return charSetting_; }
      set {
        charSetting_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (charSetting_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(CharSetting);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(216, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (charSetting_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(CharSetting);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      if (charSetting_ != null) MessagePool.Instance.Recycle(charSetting_); charSetting_ = null;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (charSetting_ == null) {
              charSetting_ = new global::ETHotfix.PlayerCharSetting();
            }
            input.ReadMessage(charSetting_);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class L2C_UpdateUserEquip : pb::IMessage {
    private static readonly pb::MessageParser<L2C_UpdateUserEquip> _parser = new pb::MessageParser<L2C_UpdateUserEquip>(() => (L2C_UpdateUserEquip)MessagePool.Instance.Fetch(typeof(L2C_UpdateUserEquip)));
    public static pb::MessageParser<L2C_UpdateUserEquip> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class C2L_UpdateUserLanguage : pb::IMessage {
    private static readonly pb::MessageParser<C2L_UpdateUserLanguage> _parser = new pb::MessageParser<C2L_UpdateUserLanguage>(() => (C2L_UpdateUserLanguage)MessagePool.Instance.Fetch(typeof(C2L_UpdateUserLanguage)));
    public static pb::MessageParser<C2L_UpdateUserLanguage> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private int language_;
    /// <summary>
    /// </summary>
    public int Language {
      get { return language_; }
      set {
        language_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Language != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(Language);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(216, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (Language != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Language);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      language_ = 0;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Language = input.ReadInt32();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class L2C_UpdateUserLanguage : pb::IMessage {
    private static readonly pb::MessageParser<L2C_UpdateUserLanguage> _parser = new pb::MessageParser<L2C_UpdateUserLanguage>(() => (L2C_UpdateUserLanguage)MessagePool.Instance.Fetch(typeof(L2C_UpdateUserLanguage)));
    public static pb::MessageParser<L2C_UpdateUserLanguage> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class C2L_PrepareToUploadUserPortrait : pb::IMessage {
    private static readonly pb::MessageParser<C2L_PrepareToUploadUserPortrait> _parser = new pb::MessageParser<C2L_PrepareToUploadUserPortrait>(() => (C2L_PrepareToUploadUserPortrait)MessagePool.Instance.Fetch(typeof(C2L_PrepareToUploadUserPortrait)));
    public static pb::MessageParser<C2L_PrepareToUploadUserPortrait> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(216, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class L2C_PrepareToUploadUserPortrait : pb::IMessage {
    private static readonly pb::MessageParser<L2C_PrepareToUploadUserPortrait> _parser = new pb::MessageParser<L2C_PrepareToUploadUserPortrait>(() => (L2C_PrepareToUploadUserPortrait)MessagePool.Instance.Fetch(typeof(L2C_PrepareToUploadUserPortrait)));
    public static pb::MessageParser<L2C_PrepareToUploadUserPortrait> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string address_ = "";
    public string Address {
      get { return address_; }
      set {
        address_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private long key_;
    public long Key {
      get { return key_; }
      set {
        key_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Address.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Address);
      }
      if (Key != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Key);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (Address.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Address);
      }
      if (Key != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Key);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      address_ = "";
      key_ = 0;
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Address = input.ReadString();
            break;
          }
          case 16: {
            Key = input.ReadInt64();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class EquipmentInfo : pb::IMessage {
    private static readonly pb::MessageParser<EquipmentInfo> _parser = new pb::MessageParser<EquipmentInfo>(() => (EquipmentInfo)MessagePool.Instance.Fetch(typeof(EquipmentInfo)));
    public static pb::MessageParser<EquipmentInfo> Parser { get { return _parser; } }

    private long id_;
    public long Id {
      get { return id_; }
      set {
        id_ = value;
      }
    }

    private long configId_;
    public long ConfigId {
      get { return configId_; }
      set {
        configId_ = value;
      }
    }

    private int count_;
    public int Count {
      get { return count_; }
      set {
        count_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Id != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Id);
      }
      if (ConfigId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(ConfigId);
      }
      if (Count != 0) {
        output.WriteRawTag(24);
        output.WriteInt32(Count);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Id != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Id);
      }
      if (ConfigId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ConfigId);
      }
      if (Count != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Count);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      id_ = 0;
      configId_ = 0;
      count_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Id = input.ReadInt64();
            break;
          }
          case 16: {
            ConfigId = input.ReadInt64();
            break;
          }
          case 24: {
            Count = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public partial class UserBagCapacity : pb::IMessage {
    private static readonly pb::MessageParser<UserBagCapacity> _parser = new pb::MessageParser<UserBagCapacity>(() => (UserBagCapacity)MessagePool.Instance.Fetch(typeof(UserBagCapacity)));
    public static pb::MessageParser<UserBagCapacity> Parser { get { return _parser; } }

    private int usedDecorationCount_;
    public int UsedDecorationCount {
      get { return usedDecorationCount_; }
      set {
        usedDecorationCount_ = value;
      }
    }

    private int totalDecorationCount_;
    public int TotalDecorationCount {
      get { return totalDecorationCount_; }
      set {
        totalDecorationCount_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (UsedDecorationCount != 0) {
        output.WriteRawTag(8);
        output.WriteInt32(UsedDecorationCount);
      }
      if (TotalDecorationCount != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(TotalDecorationCount);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (UsedDecorationCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(UsedDecorationCount);
      }
      if (TotalDecorationCount != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(TotalDecorationCount);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      usedDecorationCount_ = 0;
      totalDecorationCount_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            UsedDecorationCount = input.ReadInt32();
            break;
          }
          case 16: {
            TotalDecorationCount = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public partial class C2L_GetUserAllEquipment : pb::IMessage {
    private static readonly pb::MessageParser<C2L_GetUserAllEquipment> _parser = new pb::MessageParser<C2L_GetUserAllEquipment>(() => (C2L_GetUserAllEquipment)MessagePool.Instance.Fetch(typeof(C2L_GetUserAllEquipment)));
    public static pb::MessageParser<C2L_GetUserAllEquipment> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private long uid_;
    public long Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Uid != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Uid);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(216, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (Uid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Uid);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uid_ = 0;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uid = input.ReadInt64();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class L2C_GetUserAllEquipment : pb::IMessage {
    private static readonly pb::MessageParser<L2C_GetUserAllEquipment> _parser = new pb::MessageParser<L2C_GetUserAllEquipment>(() => (L2C_GetUserAllEquipment)MessagePool.Instance.Fetch(typeof(L2C_GetUserAllEquipment)));
    public static pb::MessageParser<L2C_GetUserAllEquipment> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private long uid_;
    public long Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::ETHotfix.EquipmentInfo> _repeated_equipmentInfoList_codec
        = pb::FieldCodec.ForMessage(18, global::ETHotfix.EquipmentInfo.Parser);
    private pbc::RepeatedField<global::ETHotfix.EquipmentInfo> equipmentInfoList_ = new pbc::RepeatedField<global::ETHotfix.EquipmentInfo>();
    public pbc::RepeatedField<global::ETHotfix.EquipmentInfo> EquipmentInfoList {
      get { return equipmentInfoList_; }
      set { equipmentInfoList_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Uid != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Uid);
      }
      equipmentInfoList_.WriteTo(output, _repeated_equipmentInfoList_codec);
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (Uid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Uid);
      }
      size += equipmentInfoList_.CalculateSize(_repeated_equipmentInfoList_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uid_ = 0;
      for (int i = 0; i < equipmentInfoList_.Count; i++) { MessagePool.Instance.Recycle(equipmentInfoList_[i]); }
      equipmentInfoList_.Clear();
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uid = input.ReadInt64();
            break;
          }
          case 18: {
            equipmentInfoList_.AddEntriesFrom(input, _repeated_equipmentInfoList_codec);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class L2C_OnEquipmentsCreated : pb::IMessage {
    private static readonly pb::MessageParser<L2C_OnEquipmentsCreated> _parser = new pb::MessageParser<L2C_OnEquipmentsCreated>(() => (L2C_OnEquipmentsCreated)MessagePool.Instance.Fetch(typeof(L2C_OnEquipmentsCreated)));
    public static pb::MessageParser<L2C_OnEquipmentsCreated> Parser { get { return _parser; } }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private long fromUid_;
    public long FromUid {
      get { return fromUid_; }
      set {
        fromUid_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::ETHotfix.EquipmentInfo> _repeated_equipmentInfoList_codec
        = pb::FieldCodec.ForMessage(18, global::ETHotfix.EquipmentInfo.Parser);
    private pbc::RepeatedField<global::ETHotfix.EquipmentInfo> equipmentInfoList_ = new pbc::RepeatedField<global::ETHotfix.EquipmentInfo>();
    public pbc::RepeatedField<global::ETHotfix.EquipmentInfo> EquipmentInfoList {
      get { return equipmentInfoList_; }
      set { equipmentInfoList_ = value; }
    }

    private global::ETHotfix.UserBagCapacity userBagInfo_;
    public global::ETHotfix.UserBagCapacity UserBagInfo {
      get { return userBagInfo_; }
      set {
        userBagInfo_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (FromUid != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(FromUid);
      }
      equipmentInfoList_.WriteTo(output, _repeated_equipmentInfoList_codec);
      if (userBagInfo_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(UserBagInfo);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (FromUid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(FromUid);
      }
      size += equipmentInfoList_.CalculateSize(_repeated_equipmentInfoList_codec);
      if (userBagInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserBagInfo);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      fromUid_ = 0;
      for (int i = 0; i < equipmentInfoList_.Count; i++) { MessagePool.Instance.Recycle(equipmentInfoList_[i]); }
      equipmentInfoList_.Clear();
      if (userBagInfo_ != null) MessagePool.Instance.Recycle(userBagInfo_); userBagInfo_ = null;
      error_ = 0;
      message_ = "";
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            FromUid = input.ReadInt64();
            break;
          }
          case 18: {
            equipmentInfoList_.AddEntriesFrom(input, _repeated_equipmentInfoList_codec);
            break;
          }
          case 26: {
            if (userBagInfo_ == null) {
              userBagInfo_ = new global::ETHotfix.UserBagCapacity();
            }
            input.ReadMessage(userBagInfo_);
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class L2C_OnEquipmentsDeleted : pb::IMessage {
    private static readonly pb::MessageParser<L2C_OnEquipmentsDeleted> _parser = new pb::MessageParser<L2C_OnEquipmentsDeleted>(() => (L2C_OnEquipmentsDeleted)MessagePool.Instance.Fetch(typeof(L2C_OnEquipmentsDeleted)));
    public static pb::MessageParser<L2C_OnEquipmentsDeleted> Parser { get { return _parser; } }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private long fromUid_;
    public long FromUid {
      get { return fromUid_; }
      set {
        fromUid_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::ETHotfix.EquipmentInfo> _repeated_equipmentInfoList_codec
        = pb::FieldCodec.ForMessage(18, global::ETHotfix.EquipmentInfo.Parser);
    private pbc::RepeatedField<global::ETHotfix.EquipmentInfo> equipmentInfoList_ = new pbc::RepeatedField<global::ETHotfix.EquipmentInfo>();
    public pbc::RepeatedField<global::ETHotfix.EquipmentInfo> EquipmentInfoList {
      get { return equipmentInfoList_; }
      set { equipmentInfoList_ = value; }
    }

    private global::ETHotfix.UserBagCapacity userBagInfo_;
    public global::ETHotfix.UserBagCapacity UserBagInfo {
      get { return userBagInfo_; }
      set {
        userBagInfo_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (FromUid != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(FromUid);
      }
      equipmentInfoList_.WriteTo(output, _repeated_equipmentInfoList_codec);
      if (userBagInfo_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(UserBagInfo);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (FromUid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(FromUid);
      }
      size += equipmentInfoList_.CalculateSize(_repeated_equipmentInfoList_codec);
      if (userBagInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(UserBagInfo);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      fromUid_ = 0;
      for (int i = 0; i < equipmentInfoList_.Count; i++) { MessagePool.Instance.Recycle(equipmentInfoList_[i]); }
      equipmentInfoList_.Clear();
      if (userBagInfo_ != null) MessagePool.Instance.Recycle(userBagInfo_); userBagInfo_ = null;
      error_ = 0;
      message_ = "";
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            FromUid = input.ReadInt64();
            break;
          }
          case 18: {
            equipmentInfoList_.AddEntriesFrom(input, _repeated_equipmentInfoList_codec);
            break;
          }
          case 26: {
            if (userBagInfo_ == null) {
              userBagInfo_ = new global::ETHotfix.UserBagCapacity();
            }
            input.ReadMessage(userBagInfo_);
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class RelationshipSimpleInfo : pb::IMessage {
    private static readonly pb::MessageParser<RelationshipSimpleInfo> _parser = new pb::MessageParser<RelationshipSimpleInfo>(() => (RelationshipSimpleInfo)MessagePool.Instance.Fetch(typeof(RelationshipSimpleInfo)));
    public static pb::MessageParser<RelationshipSimpleInfo> Parser { get { return _parser; } }

    private string name_ = "";
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private long mileage_;
    public long Mileage {
      get { return mileage_; }
      set {
        mileage_ = value;
      }
    }

    private long disconnectTime_;
    public long DisconnectTime {
      get { return disconnectTime_; }
      set {
        disconnectTime_ = value;
      }
    }

    private long uid_;
    public long Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    private int location_;
    public int Location {
      get { return location_; }
      set {
        location_ = value;
      }
    }

    private int relationshipType_;
    public int RelationshipType {
      get { return relationshipType_; }
      set {
        relationshipType_ = value;
      }
    }

    private string portraitImageName_ = "";
    public string PortraitImageName {
      get { return portraitImageName_; }
      set {
        portraitImageName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Mileage != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Mileage);
      }
      if (DisconnectTime != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(DisconnectTime);
      }
      if (Uid != 0L) {
        output.WriteRawTag(32);
        output.WriteInt64(Uid);
      }
      if (Location != 0) {
        output.WriteRawTag(40);
        output.WriteInt32(Location);
      }
      if (RelationshipType != 0) {
        output.WriteRawTag(48);
        output.WriteInt32(RelationshipType);
      }
      if (PortraitImageName.Length != 0) {
        output.WriteRawTag(58);
        output.WriteString(PortraitImageName);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Mileage != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Mileage);
      }
      if (DisconnectTime != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(DisconnectTime);
      }
      if (Uid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Uid);
      }
      if (Location != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(Location);
      }
      if (RelationshipType != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(RelationshipType);
      }
      if (PortraitImageName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(PortraitImageName);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      name_ = "";
      mileage_ = 0;
      disconnectTime_ = 0;
      uid_ = 0;
      location_ = 0;
      relationshipType_ = 0;
      portraitImageName_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 16: {
            Mileage = input.ReadInt64();
            break;
          }
          case 24: {
            DisconnectTime = input.ReadInt64();
            break;
          }
          case 32: {
            Uid = input.ReadInt64();
            break;
          }
          case 40: {
            Location = input.ReadInt32();
            break;
          }
          case 48: {
            RelationshipType = input.ReadInt32();
            break;
          }
          case 58: {
            PortraitImageName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class C2L_GetRelationshipList : pb::IMessage {
    private static readonly pb::MessageParser<C2L_GetRelationshipList> _parser = new pb::MessageParser<C2L_GetRelationshipList>(() => (C2L_GetRelationshipList)MessagePool.Instance.Fetch(typeof(C2L_GetRelationshipList)));
    public static pb::MessageParser<C2L_GetRelationshipList> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(216, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class L2C_GetRelationshipList : pb::IMessage {
    private static readonly pb::MessageParser<L2C_GetRelationshipList> _parser = new pb::MessageParser<L2C_GetRelationshipList>(() => (L2C_GetRelationshipList)MessagePool.Instance.Fetch(typeof(L2C_GetRelationshipList)));
    public static pb::MessageParser<L2C_GetRelationshipList> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private long totalCount_;
    public long TotalCount {
      get { return totalCount_; }
      set {
        totalCount_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::ETHotfix.RelationshipSimpleInfo> _repeated_relationshipList_codec
        = pb::FieldCodec.ForMessage(754, global::ETHotfix.RelationshipSimpleInfo.Parser);
    private pbc::RepeatedField<global::ETHotfix.RelationshipSimpleInfo> relationshipList_ = new pbc::RepeatedField<global::ETHotfix.RelationshipSimpleInfo>();
    public pbc::RepeatedField<global::ETHotfix.RelationshipSimpleInfo> RelationshipList {
      get { return relationshipList_; }
      set { relationshipList_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
      if (TotalCount != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(TotalCount);
      }
      relationshipList_.WriteTo(output, _repeated_relationshipList_codec);
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (TotalCount != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(TotalCount);
      }
      size += relationshipList_.CalculateSize(_repeated_relationshipList_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      totalCount_ = 0;
      for (int i = 0; i < relationshipList_.Count; i++) { MessagePool.Instance.Recycle(relationshipList_[i]); }
      relationshipList_.Clear();
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
          case 744: {
            TotalCount = input.ReadInt64();
            break;
          }
          case 754: {
            relationshipList_.AddEntriesFrom(input, _repeated_relationshipList_codec);
            break;
          }
        }
      }
    }

  }

  public partial class C2L_AddRelationship : pb::IMessage {
    private static readonly pb::MessageParser<C2L_AddRelationship> _parser = new pb::MessageParser<C2L_AddRelationship>(() => (C2L_AddRelationship)MessagePool.Instance.Fetch(typeof(C2L_AddRelationship)));
    public static pb::MessageParser<C2L_AddRelationship> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private long uid_;
    public long Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Uid != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Uid);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(216, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (Uid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Uid);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uid_ = 0;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uid = input.ReadInt64();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class L2C_AddRelationship : pb::IMessage {
    private static readonly pb::MessageParser<L2C_AddRelationship> _parser = new pb::MessageParser<L2C_AddRelationship>(() => (L2C_AddRelationship)MessagePool.Instance.Fetch(typeof(L2C_AddRelationship)));
    public static pb::MessageParser<L2C_AddRelationship> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class L2C_NotifyRelationshipState : pb::IMessage {
    private static readonly pb::MessageParser<L2C_NotifyRelationshipState> _parser = new pb::MessageParser<L2C_NotifyRelationshipState>(() => (L2C_NotifyRelationshipState)MessagePool.Instance.Fetch(typeof(L2C_NotifyRelationshipState)));
    public static pb::MessageParser<L2C_NotifyRelationshipState> Parser { get { return _parser; } }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private global::ETHotfix.RelationshipSimpleInfo info_;
    public global::ETHotfix.RelationshipSimpleInfo Info {
      get { return info_; }
      set {
        info_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (info_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Info);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (info_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Info);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      if (info_ != null) MessagePool.Instance.Recycle(info_); info_ = null;
      error_ = 0;
      message_ = "";
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 18: {
            if (info_ == null) {
              info_ = new global::ETHotfix.RelationshipSimpleInfo();
            }
            input.ReadMessage(info_);
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class C2L_RemoveRelationship : pb::IMessage {
    private static readonly pb::MessageParser<C2L_RemoveRelationship> _parser = new pb::MessageParser<C2L_RemoveRelationship>(() => (C2L_RemoveRelationship)MessagePool.Instance.Fetch(typeof(C2L_RemoveRelationship)));
    public static pb::MessageParser<C2L_RemoveRelationship> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private long uid_;
    public long Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Uid != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Uid);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(216, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (Uid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Uid);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uid_ = 0;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uid = input.ReadInt64();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class L2C_RemoveRelationship : pb::IMessage {
    private static readonly pb::MessageParser<L2C_RemoveRelationship> _parser = new pb::MessageParser<L2C_RemoveRelationship>(() => (L2C_RemoveRelationship)MessagePool.Instance.Fetch(typeof(L2C_RemoveRelationship)));
    public static pb::MessageParser<L2C_RemoveRelationship> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class C2L_RefreshStranger : pb::IMessage {
    private static readonly pb::MessageParser<C2L_RefreshStranger> _parser = new pb::MessageParser<C2L_RefreshStranger>(() => (C2L_RefreshStranger)MessagePool.Instance.Fetch(typeof(C2L_RefreshStranger)));
    public static pb::MessageParser<C2L_RefreshStranger> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private long skip_;
    public long Skip {
      get { return skip_; }
      set {
        skip_ = value;
      }
    }

    private long limit_;
    public long Limit {
      get { return limit_; }
      set {
        limit_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Skip != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Skip);
      }
      if (Limit != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Limit);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(216, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (Skip != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Skip);
      }
      if (Limit != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Limit);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      skip_ = 0;
      limit_ = 0;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Skip = input.ReadInt64();
            break;
          }
          case 16: {
            Limit = input.ReadInt64();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class L2C_RefreshStranger : pb::IMessage {
    private static readonly pb::MessageParser<L2C_RefreshStranger> _parser = new pb::MessageParser<L2C_RefreshStranger>(() => (L2C_RefreshStranger)MessagePool.Instance.Fetch(typeof(L2C_RefreshStranger)));
    public static pb::MessageParser<L2C_RefreshStranger> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private long totalCount_;
    public long TotalCount {
      get { return totalCount_; }
      set {
        totalCount_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::ETHotfix.RelationshipSimpleInfo> _repeated_relationshipList_codec
        = pb::FieldCodec.ForMessage(754, global::ETHotfix.RelationshipSimpleInfo.Parser);
    private pbc::RepeatedField<global::ETHotfix.RelationshipSimpleInfo> relationshipList_ = new pbc::RepeatedField<global::ETHotfix.RelationshipSimpleInfo>();
    public pbc::RepeatedField<global::ETHotfix.RelationshipSimpleInfo> RelationshipList {
      get { return relationshipList_; }
      set { relationshipList_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
      if (TotalCount != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(TotalCount);
      }
      relationshipList_.WriteTo(output, _repeated_relationshipList_codec);
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (TotalCount != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(TotalCount);
      }
      size += relationshipList_.CalculateSize(_repeated_relationshipList_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      totalCount_ = 0;
      for (int i = 0; i < relationshipList_.Count; i++) { MessagePool.Instance.Recycle(relationshipList_[i]); }
      relationshipList_.Clear();
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
          case 744: {
            TotalCount = input.ReadInt64();
            break;
          }
          case 754: {
            relationshipList_.AddEntriesFrom(input, _repeated_relationshipList_codec);
            break;
          }
        }
      }
    }

  }

  public partial class RelationshipApplyInfo : pb::IMessage {
    private static readonly pb::MessageParser<RelationshipApplyInfo> _parser = new pb::MessageParser<RelationshipApplyInfo>(() => (RelationshipApplyInfo)MessagePool.Instance.Fetch(typeof(RelationshipApplyInfo)));
    public static pb::MessageParser<RelationshipApplyInfo> Parser { get { return _parser; } }

    private long applyId_;
    public long ApplyId {
      get { return applyId_; }
      set {
        applyId_ = value;
      }
    }

    private string senderName_ = "";
    public string SenderName {
      get { return senderName_; }
      set {
        senderName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private long senderUid_;
    public long SenderUid {
      get { return senderUid_; }
      set {
        senderUid_ = value;
      }
    }

    private int senderLocation_;
    public int SenderLocation {
      get { return senderLocation_; }
      set {
        senderLocation_ = value;
      }
    }

    private long senderMileage_;
    public long SenderMileage {
      get { return senderMileage_; }
      set {
        senderMileage_ = value;
      }
    }

    private string receiverName_ = "";
    public string ReceiverName {
      get { return receiverName_; }
      set {
        receiverName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private long receiverUid_;
    public long ReceiverUid {
      get { return receiverUid_; }
      set {
        receiverUid_ = value;
      }
    }

    private int receiverLocation_;
    public int ReceiverLocation {
      get { return receiverLocation_; }
      set {
        receiverLocation_ = value;
      }
    }

    private long receiverMileage_;
    public long ReceiverMileage {
      get { return receiverMileage_; }
      set {
        receiverMileage_ = value;
      }
    }

    private string senderPortraitImageName_ = "";
    public string SenderPortraitImageName {
      get { return senderPortraitImageName_; }
      set {
        senderPortraitImageName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string receiverPortraitImageName_ = "";
    public string ReceiverPortraitImageName {
      get { return receiverPortraitImageName_; }
      set {
        receiverPortraitImageName_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (ApplyId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(ApplyId);
      }
      if (SenderName.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(SenderName);
      }
      if (SenderUid != 0L) {
        output.WriteRawTag(24);
        output.WriteInt64(SenderUid);
      }
      if (SenderLocation != 0) {
        output.WriteRawTag(32);
        output.WriteInt32(SenderLocation);
      }
      if (SenderMileage != 0L) {
        output.WriteRawTag(40);
        output.WriteInt64(SenderMileage);
      }
      if (ReceiverName.Length != 0) {
        output.WriteRawTag(50);
        output.WriteString(ReceiverName);
      }
      if (ReceiverUid != 0L) {
        output.WriteRawTag(56);
        output.WriteInt64(ReceiverUid);
      }
      if (ReceiverLocation != 0) {
        output.WriteRawTag(64);
        output.WriteInt32(ReceiverLocation);
      }
      if (ReceiverMileage != 0L) {
        output.WriteRawTag(72);
        output.WriteInt64(ReceiverMileage);
      }
      if (SenderPortraitImageName.Length != 0) {
        output.WriteRawTag(82);
        output.WriteString(SenderPortraitImageName);
      }
      if (ReceiverPortraitImageName.Length != 0) {
        output.WriteRawTag(90);
        output.WriteString(ReceiverPortraitImageName);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (ApplyId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ApplyId);
      }
      if (SenderName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SenderName);
      }
      if (SenderUid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SenderUid);
      }
      if (SenderLocation != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(SenderLocation);
      }
      if (SenderMileage != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(SenderMileage);
      }
      if (ReceiverName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ReceiverName);
      }
      if (ReceiverUid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ReceiverUid);
      }
      if (ReceiverLocation != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(ReceiverLocation);
      }
      if (ReceiverMileage != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ReceiverMileage);
      }
      if (SenderPortraitImageName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(SenderPortraitImageName);
      }
      if (ReceiverPortraitImageName.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(ReceiverPortraitImageName);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      applyId_ = 0;
      senderName_ = "";
      senderUid_ = 0;
      senderLocation_ = 0;
      senderMileage_ = 0;
      receiverName_ = "";
      receiverUid_ = 0;
      receiverLocation_ = 0;
      receiverMileage_ = 0;
      senderPortraitImageName_ = "";
      receiverPortraitImageName_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ApplyId = input.ReadInt64();
            break;
          }
          case 18: {
            SenderName = input.ReadString();
            break;
          }
          case 24: {
            SenderUid = input.ReadInt64();
            break;
          }
          case 32: {
            SenderLocation = input.ReadInt32();
            break;
          }
          case 40: {
            SenderMileage = input.ReadInt64();
            break;
          }
          case 50: {
            ReceiverName = input.ReadString();
            break;
          }
          case 56: {
            ReceiverUid = input.ReadInt64();
            break;
          }
          case 64: {
            ReceiverLocation = input.ReadInt32();
            break;
          }
          case 72: {
            ReceiverMileage = input.ReadInt64();
            break;
          }
          case 82: {
            SenderPortraitImageName = input.ReadString();
            break;
          }
          case 90: {
            ReceiverPortraitImageName = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class C2L_GetRelationshipApplyList : pb::IMessage {
    private static readonly pb::MessageParser<C2L_GetRelationshipApplyList> _parser = new pb::MessageParser<C2L_GetRelationshipApplyList>(() => (C2L_GetRelationshipApplyList)MessagePool.Instance.Fetch(typeof(C2L_GetRelationshipApplyList)));
    public static pb::MessageParser<C2L_GetRelationshipApplyList> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private bool isRequested_;
    public bool IsRequested {
      get { return isRequested_; }
      set {
        isRequested_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (IsRequested != false) {
        output.WriteRawTag(8);
        output.WriteBool(IsRequested);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(216, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (IsRequested != false) {
        size += 1 + 1;
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      isRequested_ = false;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            IsRequested = input.ReadBool();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class L2C_GetRelationshipApplyList : pb::IMessage {
    private static readonly pb::MessageParser<L2C_GetRelationshipApplyList> _parser = new pb::MessageParser<L2C_GetRelationshipApplyList>(() => (L2C_GetRelationshipApplyList)MessagePool.Instance.Fetch(typeof(L2C_GetRelationshipApplyList)));
    public static pb::MessageParser<L2C_GetRelationshipApplyList> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private long totalCount_;
    public long TotalCount {
      get { return totalCount_; }
      set {
        totalCount_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::ETHotfix.RelationshipApplyInfo> _repeated_relationshipApplyList_codec
        = pb::FieldCodec.ForMessage(754, global::ETHotfix.RelationshipApplyInfo.Parser);
    private pbc::RepeatedField<global::ETHotfix.RelationshipApplyInfo> relationshipApplyList_ = new pbc::RepeatedField<global::ETHotfix.RelationshipApplyInfo>();
    public pbc::RepeatedField<global::ETHotfix.RelationshipApplyInfo> RelationshipApplyList {
      get { return relationshipApplyList_; }
      set { relationshipApplyList_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
      if (TotalCount != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(TotalCount);
      }
      relationshipApplyList_.WriteTo(output, _repeated_relationshipApplyList_codec);
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (TotalCount != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(TotalCount);
      }
      size += relationshipApplyList_.CalculateSize(_repeated_relationshipApplyList_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      totalCount_ = 0;
      for (int i = 0; i < relationshipApplyList_.Count; i++) { MessagePool.Instance.Recycle(relationshipApplyList_[i]); }
      relationshipApplyList_.Clear();
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
          case 744: {
            TotalCount = input.ReadInt64();
            break;
          }
          case 754: {
            relationshipApplyList_.AddEntriesFrom(input, _repeated_relationshipApplyList_codec);
            break;
          }
        }
      }
    }

  }

  public partial class L2C_NotifyRelationshipApplyState : pb::IMessage {
    private static readonly pb::MessageParser<L2C_NotifyRelationshipApplyState> _parser = new pb::MessageParser<L2C_NotifyRelationshipApplyState>(() => (L2C_NotifyRelationshipApplyState)MessagePool.Instance.Fetch(typeof(L2C_NotifyRelationshipApplyState)));
    public static pb::MessageParser<L2C_NotifyRelationshipApplyState> Parser { get { return _parser; } }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private long deleteApplyId_;
    public long DeleteApplyId {
      get { return deleteApplyId_; }
      set {
        deleteApplyId_ = value;
      }
    }

    private global::ETHotfix.RelationshipApplyInfo addApplyInfo_;
    public global::ETHotfix.RelationshipApplyInfo AddApplyInfo {
      get { return addApplyInfo_; }
      set {
        addApplyInfo_ = value;
      }
    }

    private bool isRequested_;
    public bool IsRequested {
      get { return isRequested_; }
      set {
        isRequested_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (DeleteApplyId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(DeleteApplyId);
      }
      if (addApplyInfo_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(AddApplyInfo);
      }
      if (IsRequested != false) {
        output.WriteRawTag(24);
        output.WriteBool(IsRequested);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (DeleteApplyId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(DeleteApplyId);
      }
      if (addApplyInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(AddApplyInfo);
      }
      if (IsRequested != false) {
        size += 1 + 1;
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      deleteApplyId_ = 0;
      if (addApplyInfo_ != null) MessagePool.Instance.Recycle(addApplyInfo_); addApplyInfo_ = null;
      isRequested_ = false;
      error_ = 0;
      message_ = "";
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            DeleteApplyId = input.ReadInt64();
            break;
          }
          case 18: {
            if (addApplyInfo_ == null) {
              addApplyInfo_ = new global::ETHotfix.RelationshipApplyInfo();
            }
            input.ReadMessage(addApplyInfo_);
            break;
          }
          case 24: {
            IsRequested = input.ReadBool();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class C2L_RefreshRelationshipApply : pb::IMessage {
    private static readonly pb::MessageParser<C2L_RefreshRelationshipApply> _parser = new pb::MessageParser<C2L_RefreshRelationshipApply>(() => (C2L_RefreshRelationshipApply)MessagePool.Instance.Fetch(typeof(C2L_RefreshRelationshipApply)));
    public static pb::MessageParser<C2L_RefreshRelationshipApply> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private bool isRequested_;
    public bool IsRequested {
      get { return isRequested_; }
      set {
        isRequested_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (IsRequested != false) {
        output.WriteRawTag(8);
        output.WriteBool(IsRequested);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(216, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (IsRequested != false) {
        size += 1 + 1;
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      isRequested_ = false;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            IsRequested = input.ReadBool();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class L2C_RefreshRelationshipApply : pb::IMessage {
    private static readonly pb::MessageParser<L2C_RefreshRelationshipApply> _parser = new pb::MessageParser<L2C_RefreshRelationshipApply>(() => (L2C_RefreshRelationshipApply)MessagePool.Instance.Fetch(typeof(L2C_RefreshRelationshipApply)));
    public static pb::MessageParser<L2C_RefreshRelationshipApply> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private long totalCount_;
    public long TotalCount {
      get { return totalCount_; }
      set {
        totalCount_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::ETHotfix.RelationshipApplyInfo> _repeated_relationshipApplyList_codec
        = pb::FieldCodec.ForMessage(754, global::ETHotfix.RelationshipApplyInfo.Parser);
    private pbc::RepeatedField<global::ETHotfix.RelationshipApplyInfo> relationshipApplyList_ = new pbc::RepeatedField<global::ETHotfix.RelationshipApplyInfo>();
    public pbc::RepeatedField<global::ETHotfix.RelationshipApplyInfo> RelationshipApplyList {
      get { return relationshipApplyList_; }
      set { relationshipApplyList_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
      if (TotalCount != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(TotalCount);
      }
      relationshipApplyList_.WriteTo(output, _repeated_relationshipApplyList_codec);
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (TotalCount != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(TotalCount);
      }
      size += relationshipApplyList_.CalculateSize(_repeated_relationshipApplyList_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      totalCount_ = 0;
      for (int i = 0; i < relationshipApplyList_.Count; i++) { MessagePool.Instance.Recycle(relationshipApplyList_[i]); }
      relationshipApplyList_.Clear();
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
          case 744: {
            TotalCount = input.ReadInt64();
            break;
          }
          case 754: {
            relationshipApplyList_.AddEntriesFrom(input, _repeated_relationshipApplyList_codec);
            break;
          }
        }
      }
    }

  }

  public partial class C2L_AcceptRelationshipApply : pb::IMessage {
    private static readonly pb::MessageParser<C2L_AcceptRelationshipApply> _parser = new pb::MessageParser<C2L_AcceptRelationshipApply>(() => (C2L_AcceptRelationshipApply)MessagePool.Instance.Fetch(typeof(C2L_AcceptRelationshipApply)));
    public static pb::MessageParser<C2L_AcceptRelationshipApply> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private long applyId_;
    public long ApplyId {
      get { return applyId_; }
      set {
        applyId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (ApplyId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(ApplyId);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(216, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (ApplyId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ApplyId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      applyId_ = 0;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ApplyId = input.ReadInt64();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class L2C_AcceptRelationshipApply : pb::IMessage {
    private static readonly pb::MessageParser<L2C_AcceptRelationshipApply> _parser = new pb::MessageParser<L2C_AcceptRelationshipApply>(() => (L2C_AcceptRelationshipApply)MessagePool.Instance.Fetch(typeof(L2C_AcceptRelationshipApply)));
    public static pb::MessageParser<L2C_AcceptRelationshipApply> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class C2L_RefuseRelationshipApply : pb::IMessage {
    private static readonly pb::MessageParser<C2L_RefuseRelationshipApply> _parser = new pb::MessageParser<C2L_RefuseRelationshipApply>(() => (C2L_RefuseRelationshipApply)MessagePool.Instance.Fetch(typeof(C2L_RefuseRelationshipApply)));
    public static pb::MessageParser<C2L_RefuseRelationshipApply> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private long applyId_;
    public long ApplyId {
      get { return applyId_; }
      set {
        applyId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (ApplyId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(ApplyId);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(216, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (ApplyId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ApplyId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      applyId_ = 0;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ApplyId = input.ReadInt64();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class L2C_RefuseRelationshipApply : pb::IMessage {
    private static readonly pb::MessageParser<L2C_RefuseRelationshipApply> _parser = new pb::MessageParser<L2C_RefuseRelationshipApply>(() => (L2C_RefuseRelationshipApply)MessagePool.Instance.Fetch(typeof(L2C_RefuseRelationshipApply)));
    public static pb::MessageParser<L2C_RefuseRelationshipApply> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class C2L_QueryRelationshipByUids : pb::IMessage {
    private static readonly pb::MessageParser<C2L_QueryRelationshipByUids> _parser = new pb::MessageParser<C2L_QueryRelationshipByUids>(() => (C2L_QueryRelationshipByUids)MessagePool.Instance.Fetch(typeof(C2L_QueryRelationshipByUids)));
    public static pb::MessageParser<C2L_QueryRelationshipByUids> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private static readonly pb::FieldCodec<long> _repeated_uids_codec
        = pb::FieldCodec.ForInt64(10);
    private pbc::RepeatedField<long> uids_ = new pbc::RepeatedField<long>();
    public pbc::RepeatedField<long> Uids {
      get { return uids_; }
      set { uids_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      uids_.WriteTo(output, _repeated_uids_codec);
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(216, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      size += uids_.CalculateSize(_repeated_uids_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uids_.Clear();
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10:
          case 8: {
            uids_.AddEntriesFrom(input, _repeated_uids_codec);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class L2C_QueryRelationshipByUids : pb::IMessage {
    private static readonly pb::MessageParser<L2C_QueryRelationshipByUids> _parser = new pb::MessageParser<L2C_QueryRelationshipByUids>(() => (L2C_QueryRelationshipByUids)MessagePool.Instance.Fetch(typeof(L2C_QueryRelationshipByUids)));
    public static pb::MessageParser<L2C_QueryRelationshipByUids> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private static readonly pb::FieldCodec<global::ETHotfix.RelationshipSimpleInfo> _repeated_relationshipList_codec
        = pb::FieldCodec.ForMessage(10, global::ETHotfix.RelationshipSimpleInfo.Parser);
    private pbc::RepeatedField<global::ETHotfix.RelationshipSimpleInfo> relationshipList_ = new pbc::RepeatedField<global::ETHotfix.RelationshipSimpleInfo>();
    public pbc::RepeatedField<global::ETHotfix.RelationshipSimpleInfo> RelationshipList {
      get { return relationshipList_; }
      set { relationshipList_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      relationshipList_.WriteTo(output, _repeated_relationshipList_codec);
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      size += relationshipList_.CalculateSize(_repeated_relationshipList_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      for (int i = 0; i < relationshipList_.Count; i++) { MessagePool.Instance.Recycle(relationshipList_[i]); }
      relationshipList_.Clear();
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            relationshipList_.AddEntriesFrom(input, _repeated_relationshipList_codec);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class C2L_QueryRelationshipByName : pb::IMessage {
    private static readonly pb::MessageParser<C2L_QueryRelationshipByName> _parser = new pb::MessageParser<C2L_QueryRelationshipByName>(() => (C2L_QueryRelationshipByName)MessagePool.Instance.Fetch(typeof(C2L_QueryRelationshipByName)));
    public static pb::MessageParser<C2L_QueryRelationshipByName> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private string name_ = "";
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(216, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      name_ = "";
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class L2C_QueryRelationshipByName : pb::IMessage {
    private static readonly pb::MessageParser<L2C_QueryRelationshipByName> _parser = new pb::MessageParser<L2C_QueryRelationshipByName>(() => (L2C_QueryRelationshipByName)MessagePool.Instance.Fetch(typeof(L2C_QueryRelationshipByName)));
    public static pb::MessageParser<L2C_QueryRelationshipByName> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private static readonly pb::FieldCodec<global::ETHotfix.RelationshipSimpleInfo> _repeated_relationshipList_codec
        = pb::FieldCodec.ForMessage(10, global::ETHotfix.RelationshipSimpleInfo.Parser);
    private pbc::RepeatedField<global::ETHotfix.RelationshipSimpleInfo> relationshipList_ = new pbc::RepeatedField<global::ETHotfix.RelationshipSimpleInfo>();
    public pbc::RepeatedField<global::ETHotfix.RelationshipSimpleInfo> RelationshipList {
      get { return relationshipList_; }
      set { relationshipList_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      relationshipList_.WriteTo(output, _repeated_relationshipList_codec);
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      size += relationshipList_.CalculateSize(_repeated_relationshipList_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      for (int i = 0; i < relationshipList_.Count; i++) { MessagePool.Instance.Recycle(relationshipList_[i]); }
      relationshipList_.Clear();
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            relationshipList_.AddEntriesFrom(input, _repeated_relationshipList_codec);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class C2M_GiveEmoticon : pb::IMessage {
    private static readonly pb::MessageParser<C2M_GiveEmoticon> _parser = new pb::MessageParser<C2M_GiveEmoticon>(() => (C2M_GiveEmoticon)MessagePool.Instance.Fetch(typeof(C2M_GiveEmoticon)));
    public static pb::MessageParser<C2M_GiveEmoticon> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private long mapUnitId_;
    public long MapUnitId {
      get { return mapUnitId_; }
      set {
        mapUnitId_ = value;
      }
    }

    private int emoticonIndex_;
    public int EmoticonIndex {
      get { return emoticonIndex_; }
      set {
        emoticonIndex_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (MapUnitId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(MapUnitId);
      }
      if (EmoticonIndex != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(EmoticonIndex);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (MapUnitId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MapUnitId);
      }
      if (EmoticonIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EmoticonIndex);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      mapUnitId_ = 0;
      emoticonIndex_ = 0;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            MapUnitId = input.ReadInt64();
            break;
          }
          case 16: {
            EmoticonIndex = input.ReadInt32();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_GiveEmoticon : pb::IMessage {
    private static readonly pb::MessageParser<M2C_GiveEmoticon> _parser = new pb::MessageParser<M2C_GiveEmoticon>(() => (M2C_GiveEmoticon)MessagePool.Instance.Fetch(typeof(M2C_GiveEmoticon)));
    public static pb::MessageParser<M2C_GiveEmoticon> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private string name_ = "";
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private int emoticonIndex_;
    public int EmoticonIndex {
      get { return emoticonIndex_; }
      set {
        emoticonIndex_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (EmoticonIndex != 0) {
        output.WriteRawTag(16);
        output.WriteInt32(EmoticonIndex);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (EmoticonIndex != 0) {
        size += 1 + pb::CodedOutputStream.ComputeInt32Size(EmoticonIndex);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      name_ = "";
      emoticonIndex_ = 0;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 16: {
            EmoticonIndex = input.ReadInt32();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class C2M_GiveAisatsu : pb::IMessage {
    private static readonly pb::MessageParser<C2M_GiveAisatsu> _parser = new pb::MessageParser<C2M_GiveAisatsu>(() => (C2M_GiveAisatsu)MessagePool.Instance.Fetch(typeof(C2M_GiveAisatsu)));
    public static pb::MessageParser<C2M_GiveAisatsu> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private long mapUnitId_;
    public long MapUnitId {
      get { return mapUnitId_; }
      set {
        mapUnitId_ = value;
      }
    }

    private string content_ = "";
    public string Content {
      get { return content_; }
      set {
        content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (MapUnitId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(MapUnitId);
      }
      if (Content.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Content);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (MapUnitId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MapUnitId);
      }
      if (Content.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Content);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      mapUnitId_ = 0;
      content_ = "";
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            MapUnitId = input.ReadInt64();
            break;
          }
          case 18: {
            Content = input.ReadString();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_GiveAisatsu : pb::IMessage {
    private static readonly pb::MessageParser<M2C_GiveAisatsu> _parser = new pb::MessageParser<M2C_GiveAisatsu>(() => (M2C_GiveAisatsu)MessagePool.Instance.Fetch(typeof(M2C_GiveAisatsu)));
    public static pb::MessageParser<M2C_GiveAisatsu> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private string name_ = "";
    public string Name {
      get { return name_; }
      set {
        name_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string content_ = "";
    public string Content {
      get { return content_; }
      set {
        content_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Name.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Name);
      }
      if (Content.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Content);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(232, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (Name.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Name);
      }
      if (Content.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Content);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      name_ = "";
      content_ = "";
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Name = input.ReadString();
            break;
          }
          case 18: {
            Content = input.ReadString();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 744: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class AnnouncementInfo : pb::IMessage {
    private static readonly pb::MessageParser<AnnouncementInfo> _parser = new pb::MessageParser<AnnouncementInfo>(() => (AnnouncementInfo)MessagePool.Instance.Fetch(typeof(AnnouncementInfo)));
    public static pb::MessageParser<AnnouncementInfo> Parser { get { return _parser; } }

    private long timestamp_;
    public long Timestamp {
      get { return timestamp_; }
      set {
        timestamp_ = value;
      }
    }

    private string title_ = "";
    public string Title {
      get { return title_; }
      set {
        title_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string context_ = "";
    public string Context {
      get { return context_; }
      set {
        context_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Timestamp != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Timestamp);
      }
      if (Title.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Title);
      }
      if (Context.Length != 0) {
        output.WriteRawTag(26);
        output.WriteString(Context);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (Timestamp != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Timestamp);
      }
      if (Title.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Title);
      }
      if (Context.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Context);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      timestamp_ = 0;
      title_ = "";
      context_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Timestamp = input.ReadInt64();
            break;
          }
          case 18: {
            Title = input.ReadString();
            break;
          }
          case 26: {
            Context = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class C2L_Announcement : pb::IMessage {
    private static readonly pb::MessageParser<C2L_Announcement> _parser = new pb::MessageParser<C2L_Announcement>(() => (C2L_Announcement)MessagePool.Instance.Fetch(typeof(C2L_Announcement)));
    public static pb::MessageParser<C2L_Announcement> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(216, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class L2C_Announcement : pb::IMessage {
    private static readonly pb::MessageParser<L2C_Announcement> _parser = new pb::MessageParser<L2C_Announcement>(() => (L2C_Announcement)MessagePool.Instance.Fetch(typeof(L2C_Announcement)));
    public static pb::MessageParser<L2C_Announcement> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private static readonly pb::FieldCodec<global::ETHotfix.AnnouncementInfo> _repeated_announcementInfos_codec
        = pb::FieldCodec.ForMessage(10, global::ETHotfix.AnnouncementInfo.Parser);
    private pbc::RepeatedField<global::ETHotfix.AnnouncementInfo> announcementInfos_ = new pbc::RepeatedField<global::ETHotfix.AnnouncementInfo>();
    public pbc::RepeatedField<global::ETHotfix.AnnouncementInfo> AnnouncementInfos {
      get { return announcementInfos_; }
      set { announcementInfos_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      announcementInfos_.WriteTo(output, _repeated_announcementInfos_codec);
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      size += announcementInfos_.CalculateSize(_repeated_announcementInfos_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      for (int i = 0; i < announcementInfos_.Count; i++) { MessagePool.Instance.Recycle(announcementInfos_[i]); }
      announcementInfos_.Clear();
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            announcementInfos_.AddEntriesFrom(input, _repeated_announcementInfos_codec);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class C2R_Login : pb::IMessage {
    private static readonly pb::MessageParser<C2R_Login> _parser = new pb::MessageParser<C2R_Login>(() => (C2R_Login)MessagePool.Instance.Fetch(typeof(C2R_Login)));
    public static pb::MessageParser<C2R_Login> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private string account_ = "";
    /// <summary>
    /// 帐号
    /// </summary>
    public string Account {
      get { return account_; }
      set {
        account_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string password_ = "";
    /// <summary>
    /// 密码
    /// </summary>
    public string Password {
      get { return password_; }
      set {
        password_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Account.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Account);
      }
      if (Password.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Password);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Account.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Account);
      }
      if (Password.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Password);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      account_ = "";
      password_ = "";
      rpcId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Account = input.ReadString();
            break;
          }
          case 18: {
            Password = input.ReadString();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public partial class R2C_Login : pb::IMessage {
    private static readonly pb::MessageParser<R2C_Login> _parser = new pb::MessageParser<R2C_Login>(() => (R2C_Login)MessagePool.Instance.Fetch(typeof(R2C_Login)));
    public static pb::MessageParser<R2C_Login> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string address_ = "";
    public string Address {
      get { return address_; }
      set {
        address_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private long key_;
    public long Key {
      get { return key_; }
      set {
        key_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Address.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Address);
      }
      if (Key != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Key);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (Address.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Address);
      }
      if (Key != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Key);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      address_ = "";
      key_ = 0;
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Address = input.ReadString();
            break;
          }
          case 16: {
            Key = input.ReadInt64();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class C2G_LoginGate : pb::IMessage {
    private static readonly pb::MessageParser<C2G_LoginGate> _parser = new pb::MessageParser<C2G_LoginGate>(() => (C2G_LoginGate)MessagePool.Instance.Fetch(typeof(C2G_LoginGate)));
    public static pb::MessageParser<C2G_LoginGate> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long key_;
    /// <summary>
    /// 帐号
    /// </summary>
    public long Key {
      get { return key_; }
      set {
        key_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Key != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Key);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Key != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Key);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      key_ = 0;
      rpcId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Key = input.ReadInt64();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public partial class G2C_LoginGate : pb::IMessage {
    private static readonly pb::MessageParser<G2C_LoginGate> _parser = new pb::MessageParser<G2C_LoginGate>(() => (G2C_LoginGate)MessagePool.Instance.Fetch(typeof(G2C_LoginGate)));
    public static pb::MessageParser<G2C_LoginGate> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private long playerId_;
    public long PlayerId {
      get { return playerId_; }
      set {
        playerId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (PlayerId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(PlayerId);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (PlayerId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(PlayerId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      playerId_ = 0;
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            PlayerId = input.ReadInt64();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class C2M_TestActorRequest : pb::IMessage {
    private static readonly pb::MessageParser<C2M_TestActorRequest> _parser = new pb::MessageParser<C2M_TestActorRequest>(() => (C2M_TestActorRequest)MessagePool.Instance.Fetch(typeof(C2M_TestActorRequest)));
    public static pb::MessageParser<C2M_TestActorRequest> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private string info_ = "";
    public string Info {
      get { return info_; }
      set {
        info_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Info.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Info);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(216, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (Info.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Info);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      info_ = "";
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Info = input.ReadString();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class M2C_TestActorResponse : pb::IMessage {
    private static readonly pb::MessageParser<M2C_TestActorResponse> _parser = new pb::MessageParser<M2C_TestActorResponse>(() => (M2C_TestActorResponse)MessagePool.Instance.Fetch(typeof(M2C_TestActorResponse)));
    public static pb::MessageParser<M2C_TestActorResponse> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string info_ = "";
    public string Info {
      get { return info_; }
      set {
        info_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Info.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(Info);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (Info.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Info);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      info_ = "";
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            Info = input.ReadString();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class PlayerInfo : pb::IMessage {
    private static readonly pb::MessageParser<PlayerInfo> _parser = new pb::MessageParser<PlayerInfo>(() => (PlayerInfo)MessagePool.Instance.Fetch(typeof(PlayerInfo)));
    public static pb::MessageParser<PlayerInfo> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public partial class C2G_PlayerInfo : pb::IMessage {
    private static readonly pb::MessageParser<C2G_PlayerInfo> _parser = new pb::MessageParser<C2G_PlayerInfo>(() => (C2G_PlayerInfo)MessagePool.Instance.Fetch(typeof(C2G_PlayerInfo)));
    public static pb::MessageParser<C2G_PlayerInfo> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public partial class G2C_PlayerInfo : pb::IMessage {
    private static readonly pb::MessageParser<G2C_PlayerInfo> _parser = new pb::MessageParser<G2C_PlayerInfo>(() => (G2C_PlayerInfo)MessagePool.Instance.Fetch(typeof(G2C_PlayerInfo)));
    public static pb::MessageParser<G2C_PlayerInfo> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private global::ETHotfix.PlayerInfo playerInfo_;
    public global::ETHotfix.PlayerInfo PlayerInfo {
      get { return playerInfo_; }
      set {
        playerInfo_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::ETHotfix.PlayerInfo> _repeated_playerInfos_codec
        = pb::FieldCodec.ForMessage(18, global::ETHotfix.PlayerInfo.Parser);
    private pbc::RepeatedField<global::ETHotfix.PlayerInfo> playerInfos_ = new pbc::RepeatedField<global::ETHotfix.PlayerInfo>();
    public pbc::RepeatedField<global::ETHotfix.PlayerInfo> PlayerInfos {
      get { return playerInfos_; }
      set { playerInfos_ = value; }
    }

    private static readonly pb::FieldCodec<string> _repeated_testRepeatedString_codec
        = pb::FieldCodec.ForString(26);
    private pbc::RepeatedField<string> testRepeatedString_ = new pbc::RepeatedField<string>();
    public pbc::RepeatedField<string> TestRepeatedString {
      get { return testRepeatedString_; }
      set { testRepeatedString_ = value; }
    }

    private static readonly pb::FieldCodec<int> _repeated_testRepeatedInt32_codec
        = pb::FieldCodec.ForInt32(34);
    private pbc::RepeatedField<int> testRepeatedInt32_ = new pbc::RepeatedField<int>();
    public pbc::RepeatedField<int> TestRepeatedInt32 {
      get { return testRepeatedInt32_; }
      set { testRepeatedInt32_ = value; }
    }

    private static readonly pb::FieldCodec<long> _repeated_testRepeatedInt64_codec
        = pb::FieldCodec.ForInt64(42);
    private pbc::RepeatedField<long> testRepeatedInt64_ = new pbc::RepeatedField<long>();
    public pbc::RepeatedField<long> TestRepeatedInt64 {
      get { return testRepeatedInt64_; }
      set { testRepeatedInt64_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (playerInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(PlayerInfo);
      }
      playerInfos_.WriteTo(output, _repeated_playerInfos_codec);
      testRepeatedString_.WriteTo(output, _repeated_testRepeatedString_codec);
      testRepeatedInt32_.WriteTo(output, _repeated_testRepeatedInt32_codec);
      testRepeatedInt64_.WriteTo(output, _repeated_testRepeatedInt64_codec);
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (playerInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(PlayerInfo);
      }
      size += playerInfos_.CalculateSize(_repeated_playerInfos_codec);
      size += testRepeatedString_.CalculateSize(_repeated_testRepeatedString_codec);
      size += testRepeatedInt32_.CalculateSize(_repeated_testRepeatedInt32_codec);
      size += testRepeatedInt64_.CalculateSize(_repeated_testRepeatedInt64_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      if (playerInfo_ != null) MessagePool.Instance.Recycle(playerInfo_); playerInfo_ = null;
      for (int i = 0; i < playerInfos_.Count; i++) { MessagePool.Instance.Recycle(playerInfos_[i]); }
      playerInfos_.Clear();
      testRepeatedString_.Clear();
      testRepeatedInt32_.Clear();
      testRepeatedInt64_.Clear();
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (playerInfo_ == null) {
              playerInfo_ = new global::ETHotfix.PlayerInfo();
            }
            input.ReadMessage(playerInfo_);
            break;
          }
          case 18: {
            playerInfos_.AddEntriesFrom(input, _repeated_playerInfos_codec);
            break;
          }
          case 26: {
            testRepeatedString_.AddEntriesFrom(input, _repeated_testRepeatedString_codec);
            break;
          }
          case 34:
          case 32: {
            testRepeatedInt32_.AddEntriesFrom(input, _repeated_testRepeatedInt32_codec);
            break;
          }
          case 42:
          case 40: {
            testRepeatedInt64_.AddEntriesFrom(input, _repeated_testRepeatedInt64_codec);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class C2L_RoamingGetList : pb::IMessage {
    private static readonly pb::MessageParser<C2L_RoamingGetList> _parser = new pb::MessageParser<C2L_RoamingGetList>(() => (C2L_RoamingGetList)MessagePool.Instance.Fetch(typeof(C2L_RoamingGetList)));
    public static pb::MessageParser<C2L_RoamingGetList> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(216, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class L2C_RoamingGetList : pb::IMessage {
    private static readonly pb::MessageParser<L2C_RoamingGetList> _parser = new pb::MessageParser<L2C_RoamingGetList>(() => (L2C_RoamingGetList)MessagePool.Instance.Fetch(typeof(L2C_RoamingGetList)));
    public static pb::MessageParser<L2C_RoamingGetList> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private static readonly pb::FieldCodec<global::ETHotfix.RoomInfo> _repeated_infos_codec
        = pb::FieldCodec.ForMessage(10, global::ETHotfix.RoomInfo.Parser);
    private pbc::RepeatedField<global::ETHotfix.RoomInfo> infos_ = new pbc::RepeatedField<global::ETHotfix.RoomInfo>();
    public pbc::RepeatedField<global::ETHotfix.RoomInfo> Infos {
      get { return infos_; }
      set { infos_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      infos_.WriteTo(output, _repeated_infos_codec);
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      size += infos_.CalculateSize(_repeated_infos_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      for (int i = 0; i < infos_.Count; i++) { MessagePool.Instance.Recycle(infos_[i]); }
      infos_.Clear();
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            infos_.AddEntriesFrom(input, _repeated_infos_codec);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class C2L_RoamingEnter : pb::IMessage {
    private static readonly pb::MessageParser<C2L_RoamingEnter> _parser = new pb::MessageParser<C2L_RoamingEnter>(() => (C2L_RoamingEnter)MessagePool.Instance.Fetch(typeof(C2L_RoamingEnter)));
    public static pb::MessageParser<C2L_RoamingEnter> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private long roamingRoomId_;
    public long RoamingRoomId {
      get { return roamingRoomId_; }
      set {
        roamingRoomId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RoamingRoomId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(RoamingRoomId);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(216, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (RoamingRoomId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RoamingRoomId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      roamingRoomId_ = 0;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoamingRoomId = input.ReadInt64();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class L2C_RoamingEnter : pb::IMessage {
    private static readonly pb::MessageParser<L2C_RoamingEnter> _parser = new pb::MessageParser<L2C_RoamingEnter>(() => (L2C_RoamingEnter)MessagePool.Instance.Fetch(typeof(L2C_RoamingEnter)));
    public static pb::MessageParser<L2C_RoamingEnter> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private global::ETHotfix.MapUnitInfo selfInfo_;
    public global::ETHotfix.MapUnitInfo SelfInfo {
      get { return selfInfo_; }
      set {
        selfInfo_ = value;
      }
    }

    private long roadSettingId_;
    public long RoadSettingId {
      get { return roadSettingId_; }
      set {
        roadSettingId_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::ETHotfix.MapUnitInfo_Global> _repeated_globalInfos_codec
        = pb::FieldCodec.ForMessage(26, global::ETHotfix.MapUnitInfo_Global.Parser);
    private pbc::RepeatedField<global::ETHotfix.MapUnitInfo_Global> globalInfos_ = new pbc::RepeatedField<global::ETHotfix.MapUnitInfo_Global>();
    public pbc::RepeatedField<global::ETHotfix.MapUnitInfo_Global> GlobalInfos {
      get { return globalInfos_; }
      set { globalInfos_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (selfInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(SelfInfo);
      }
      if (RoadSettingId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(RoadSettingId);
      }
      globalInfos_.WriteTo(output, _repeated_globalInfos_codec);
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (selfInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(SelfInfo);
      }
      if (RoadSettingId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RoadSettingId);
      }
      size += globalInfos_.CalculateSize(_repeated_globalInfos_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      if (selfInfo_ != null) MessagePool.Instance.Recycle(selfInfo_); selfInfo_ = null;
      roadSettingId_ = 0;
      for (int i = 0; i < globalInfos_.Count; i++) { MessagePool.Instance.Recycle(globalInfos_[i]); }
      globalInfos_.Clear();
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (selfInfo_ == null) {
              selfInfo_ = new global::ETHotfix.MapUnitInfo();
            }
            input.ReadMessage(selfInfo_);
            break;
          }
          case 16: {
            RoadSettingId = input.ReadInt64();
            break;
          }
          case 26: {
            globalInfos_.AddEntriesFrom(input, _repeated_globalInfos_codec);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class C2L_TeamGetList : pb::IMessage {
    private static readonly pb::MessageParser<C2L_TeamGetList> _parser = new pb::MessageParser<C2L_TeamGetList>(() => (C2L_TeamGetList)MessagePool.Instance.Fetch(typeof(C2L_TeamGetList)));
    public static pb::MessageParser<C2L_TeamGetList> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private bool isReservation_;
    public bool IsReservation {
      get { return isReservation_; }
      set {
        isReservation_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (IsReservation != false) {
        output.WriteRawTag(8);
        output.WriteBool(IsReservation);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(216, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (IsReservation != false) {
        size += 1 + 1;
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      isReservation_ = false;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            IsReservation = input.ReadBool();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class L2C_TeamGetList : pb::IMessage {
    private static readonly pb::MessageParser<L2C_TeamGetList> _parser = new pb::MessageParser<L2C_TeamGetList>(() => (L2C_TeamGetList)MessagePool.Instance.Fetch(typeof(L2C_TeamGetList)));
    public static pb::MessageParser<L2C_TeamGetList> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private static readonly pb::FieldCodec<global::ETHotfix.RoomInfo> _repeated_infos_codec
        = pb::FieldCodec.ForMessage(10, global::ETHotfix.RoomInfo.Parser);
    private pbc::RepeatedField<global::ETHotfix.RoomInfo> infos_ = new pbc::RepeatedField<global::ETHotfix.RoomInfo>();
    public pbc::RepeatedField<global::ETHotfix.RoomInfo> Infos {
      get { return infos_; }
      set { infos_ = value; }
    }

    private static readonly pb::FieldCodec<global::ETHotfix.TeamRoomData> _repeated_datas_codec
        = pb::FieldCodec.ForMessage(18, global::ETHotfix.TeamRoomData.Parser);
    private pbc::RepeatedField<global::ETHotfix.TeamRoomData> datas_ = new pbc::RepeatedField<global::ETHotfix.TeamRoomData>();
    public pbc::RepeatedField<global::ETHotfix.TeamRoomData> Datas {
      get { return datas_; }
      set { datas_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      infos_.WriteTo(output, _repeated_infos_codec);
      datas_.WriteTo(output, _repeated_datas_codec);
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      size += infos_.CalculateSize(_repeated_infos_codec);
      size += datas_.CalculateSize(_repeated_datas_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      for (int i = 0; i < infos_.Count; i++) { MessagePool.Instance.Recycle(infos_[i]); }
      infos_.Clear();
      for (int i = 0; i < datas_.Count; i++) { MessagePool.Instance.Recycle(datas_[i]); }
      datas_.Clear();
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            infos_.AddEntriesFrom(input, _repeated_infos_codec);
            break;
          }
          case 18: {
            datas_.AddEntriesFrom(input, _repeated_datas_codec);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class C2L_TeamInviteAccept : pb::IMessage {
    private static readonly pb::MessageParser<C2L_TeamInviteAccept> _parser = new pb::MessageParser<C2L_TeamInviteAccept>(() => (C2L_TeamInviteAccept)MessagePool.Instance.Fetch(typeof(C2L_TeamInviteAccept)));
    public static pb::MessageParser<C2L_TeamInviteAccept> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private long inviteId_;
    public long InviteId {
      get { return inviteId_; }
      set {
        inviteId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (InviteId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(InviteId);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(216, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (InviteId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(InviteId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      inviteId_ = 0;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            InviteId = input.ReadInt64();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class L2C_TeamInviteAccept : pb::IMessage {
    private static readonly pb::MessageParser<L2C_TeamInviteAccept> _parser = new pb::MessageParser<L2C_TeamInviteAccept>(() => (L2C_TeamInviteAccept)MessagePool.Instance.Fetch(typeof(L2C_TeamInviteAccept)));
    public static pb::MessageParser<L2C_TeamInviteAccept> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private global::ETHotfix.RoomInfo info_;
    public global::ETHotfix.RoomInfo Info {
      get { return info_; }
      set {
        info_ = value;
      }
    }

    private global::ETHotfix.TeamRoomData data_;
    public global::ETHotfix.TeamRoomData Data {
      get { return data_; }
      set {
        data_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::ETHotfix.TeamMemberData> _repeated_memberDatas_codec
        = pb::FieldCodec.ForMessage(26, global::ETHotfix.TeamMemberData.Parser);
    private pbc::RepeatedField<global::ETHotfix.TeamMemberData> memberDatas_ = new pbc::RepeatedField<global::ETHotfix.TeamMemberData>();
    public pbc::RepeatedField<global::ETHotfix.TeamMemberData> MemberDatas {
      get { return memberDatas_; }
      set { memberDatas_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (info_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Info);
      }
      if (data_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Data);
      }
      memberDatas_.WriteTo(output, _repeated_memberDatas_codec);
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (info_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Info);
      }
      if (data_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Data);
      }
      size += memberDatas_.CalculateSize(_repeated_memberDatas_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      if (info_ != null) MessagePool.Instance.Recycle(info_); info_ = null;
      if (data_ != null) MessagePool.Instance.Recycle(data_); data_ = null;
      for (int i = 0; i < memberDatas_.Count; i++) { MessagePool.Instance.Recycle(memberDatas_[i]); }
      memberDatas_.Clear();
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (info_ == null) {
              info_ = new global::ETHotfix.RoomInfo();
            }
            input.ReadMessage(info_);
            break;
          }
          case 18: {
            if (data_ == null) {
              data_ = new global::ETHotfix.TeamRoomData();
            }
            input.ReadMessage(data_);
            break;
          }
          case 26: {
            memberDatas_.AddEntriesFrom(input, _repeated_memberDatas_codec);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class C2L_TeamEnter : pb::IMessage {
    private static readonly pb::MessageParser<C2L_TeamEnter> _parser = new pb::MessageParser<C2L_TeamEnter>(() => (C2L_TeamEnter)MessagePool.Instance.Fetch(typeof(C2L_TeamEnter)));
    public static pb::MessageParser<C2L_TeamEnter> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private long teamRoomId_;
    public long TeamRoomId {
      get { return teamRoomId_; }
      set {
        teamRoomId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (TeamRoomId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(TeamRoomId);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(216, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (TeamRoomId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(TeamRoomId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      teamRoomId_ = 0;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            TeamRoomId = input.ReadInt64();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class L2C_TeamEnter : pb::IMessage {
    private static readonly pb::MessageParser<L2C_TeamEnter> _parser = new pb::MessageParser<L2C_TeamEnter>(() => (L2C_TeamEnter)MessagePool.Instance.Fetch(typeof(L2C_TeamEnter)));
    public static pb::MessageParser<L2C_TeamEnter> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private global::ETHotfix.RoomInfo info_;
    public global::ETHotfix.RoomInfo Info {
      get { return info_; }
      set {
        info_ = value;
      }
    }

    private global::ETHotfix.TeamRoomData data_;
    public global::ETHotfix.TeamRoomData Data {
      get { return data_; }
      set {
        data_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::ETHotfix.TeamMemberData> _repeated_memberDatas_codec
        = pb::FieldCodec.ForMessage(26, global::ETHotfix.TeamMemberData.Parser);
    private pbc::RepeatedField<global::ETHotfix.TeamMemberData> memberDatas_ = new pbc::RepeatedField<global::ETHotfix.TeamMemberData>();
    public pbc::RepeatedField<global::ETHotfix.TeamMemberData> MemberDatas {
      get { return memberDatas_; }
      set { memberDatas_ = value; }
    }

    private static readonly pb::FieldCodec<global::ETHotfix.ReservationMemberData> _repeated_reservationMemberDatas_codec
        = pb::FieldCodec.ForMessage(34, global::ETHotfix.ReservationMemberData.Parser);
    private pbc::RepeatedField<global::ETHotfix.ReservationMemberData> reservationMemberDatas_ = new pbc::RepeatedField<global::ETHotfix.ReservationMemberData>();
    public pbc::RepeatedField<global::ETHotfix.ReservationMemberData> ReservationMemberDatas {
      get { return reservationMemberDatas_; }
      set { reservationMemberDatas_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (info_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Info);
      }
      if (data_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Data);
      }
      memberDatas_.WriteTo(output, _repeated_memberDatas_codec);
      reservationMemberDatas_.WriteTo(output, _repeated_reservationMemberDatas_codec);
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (info_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Info);
      }
      if (data_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Data);
      }
      size += memberDatas_.CalculateSize(_repeated_memberDatas_codec);
      size += reservationMemberDatas_.CalculateSize(_repeated_reservationMemberDatas_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      if (info_ != null) MessagePool.Instance.Recycle(info_); info_ = null;
      if (data_ != null) MessagePool.Instance.Recycle(data_); data_ = null;
      for (int i = 0; i < memberDatas_.Count; i++) { MessagePool.Instance.Recycle(memberDatas_[i]); }
      memberDatas_.Clear();
      for (int i = 0; i < reservationMemberDatas_.Count; i++) { MessagePool.Instance.Recycle(reservationMemberDatas_[i]); }
      reservationMemberDatas_.Clear();
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (info_ == null) {
              info_ = new global::ETHotfix.RoomInfo();
            }
            input.ReadMessage(info_);
            break;
          }
          case 18: {
            if (data_ == null) {
              data_ = new global::ETHotfix.TeamRoomData();
            }
            input.ReadMessage(data_);
            break;
          }
          case 26: {
            memberDatas_.AddEntriesFrom(input, _repeated_memberDatas_codec);
            break;
          }
          case 34: {
            reservationMemberDatas_.AddEntriesFrom(input, _repeated_reservationMemberDatas_codec);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class C2L_TeamCreate : pb::IMessage {
    private static readonly pb::MessageParser<C2L_TeamCreate> _parser = new pb::MessageParser<C2L_TeamCreate>(() => (C2L_TeamCreate)MessagePool.Instance.Fetch(typeof(C2L_TeamCreate)));
    public static pb::MessageParser<C2L_TeamCreate> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private long roadSettingId_;
    public long RoadSettingId {
      get { return roadSettingId_; }
      set {
        roadSettingId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RoadSettingId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(RoadSettingId);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(216, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (RoadSettingId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RoadSettingId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      roadSettingId_ = 0;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoadSettingId = input.ReadInt64();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class L2C_TeamCreate : pb::IMessage {
    private static readonly pb::MessageParser<L2C_TeamCreate> _parser = new pb::MessageParser<L2C_TeamCreate>(() => (L2C_TeamCreate)MessagePool.Instance.Fetch(typeof(L2C_TeamCreate)));
    public static pb::MessageParser<L2C_TeamCreate> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private global::ETHotfix.RoomInfo info_;
    public global::ETHotfix.RoomInfo Info {
      get { return info_; }
      set {
        info_ = value;
      }
    }

    private global::ETHotfix.TeamRoomData data_;
    public global::ETHotfix.TeamRoomData Data {
      get { return data_; }
      set {
        data_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::ETHotfix.TeamMemberData> _repeated_memberDatas_codec
        = pb::FieldCodec.ForMessage(26, global::ETHotfix.TeamMemberData.Parser);
    private pbc::RepeatedField<global::ETHotfix.TeamMemberData> memberDatas_ = new pbc::RepeatedField<global::ETHotfix.TeamMemberData>();
    public pbc::RepeatedField<global::ETHotfix.TeamMemberData> MemberDatas {
      get { return memberDatas_; }
      set { memberDatas_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (info_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Info);
      }
      if (data_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Data);
      }
      memberDatas_.WriteTo(output, _repeated_memberDatas_codec);
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (info_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Info);
      }
      if (data_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Data);
      }
      size += memberDatas_.CalculateSize(_repeated_memberDatas_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      if (info_ != null) MessagePool.Instance.Recycle(info_); info_ = null;
      if (data_ != null) MessagePool.Instance.Recycle(data_); data_ = null;
      for (int i = 0; i < memberDatas_.Count; i++) { MessagePool.Instance.Recycle(memberDatas_[i]); }
      memberDatas_.Clear();
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (info_ == null) {
              info_ = new global::ETHotfix.RoomInfo();
            }
            input.ReadMessage(info_);
            break;
          }
          case 18: {
            if (data_ == null) {
              data_ = new global::ETHotfix.TeamRoomData();
            }
            input.ReadMessage(data_);
            break;
          }
          case 26: {
            memberDatas_.AddEntriesFrom(input, _repeated_memberDatas_codec);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class C2L_TeamReservationJoin : pb::IMessage {
    private static readonly pb::MessageParser<C2L_TeamReservationJoin> _parser = new pb::MessageParser<C2L_TeamReservationJoin>(() => (C2L_TeamReservationJoin)MessagePool.Instance.Fetch(typeof(C2L_TeamReservationJoin)));
    public static pb::MessageParser<C2L_TeamReservationJoin> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private long reservationId_;
    public long ReservationId {
      get { return reservationId_; }
      set {
        reservationId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (ReservationId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(ReservationId);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(216, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (ReservationId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ReservationId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      reservationId_ = 0;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ReservationId = input.ReadInt64();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class L2C_TeamReservationJoin : pb::IMessage {
    private static readonly pb::MessageParser<L2C_TeamReservationJoin> _parser = new pb::MessageParser<L2C_TeamReservationJoin>(() => (L2C_TeamReservationJoin)MessagePool.Instance.Fetch(typeof(L2C_TeamReservationJoin)));
    public static pb::MessageParser<L2C_TeamReservationJoin> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private global::ETHotfix.RoomInfo info_;
    public global::ETHotfix.RoomInfo Info {
      get { return info_; }
      set {
        info_ = value;
      }
    }

    private global::ETHotfix.TeamRoomData data_;
    public global::ETHotfix.TeamRoomData Data {
      get { return data_; }
      set {
        data_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::ETHotfix.TeamMemberData> _repeated_memberDatas_codec
        = pb::FieldCodec.ForMessage(26, global::ETHotfix.TeamMemberData.Parser);
    private pbc::RepeatedField<global::ETHotfix.TeamMemberData> memberDatas_ = new pbc::RepeatedField<global::ETHotfix.TeamMemberData>();
    public pbc::RepeatedField<global::ETHotfix.TeamMemberData> MemberDatas {
      get { return memberDatas_; }
      set { memberDatas_ = value; }
    }

    private static readonly pb::FieldCodec<global::ETHotfix.ReservationMemberData> _repeated_reservationMemberDatas_codec
        = pb::FieldCodec.ForMessage(34, global::ETHotfix.ReservationMemberData.Parser);
    private pbc::RepeatedField<global::ETHotfix.ReservationMemberData> reservationMemberDatas_ = new pbc::RepeatedField<global::ETHotfix.ReservationMemberData>();
    public pbc::RepeatedField<global::ETHotfix.ReservationMemberData> ReservationMemberDatas {
      get { return reservationMemberDatas_; }
      set { reservationMemberDatas_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (info_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(Info);
      }
      if (data_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Data);
      }
      memberDatas_.WriteTo(output, _repeated_memberDatas_codec);
      reservationMemberDatas_.WriteTo(output, _repeated_reservationMemberDatas_codec);
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (info_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Info);
      }
      if (data_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Data);
      }
      size += memberDatas_.CalculateSize(_repeated_memberDatas_codec);
      size += reservationMemberDatas_.CalculateSize(_repeated_reservationMemberDatas_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      if (info_ != null) MessagePool.Instance.Recycle(info_); info_ = null;
      if (data_ != null) MessagePool.Instance.Recycle(data_); data_ = null;
      for (int i = 0; i < memberDatas_.Count; i++) { MessagePool.Instance.Recycle(memberDatas_[i]); }
      memberDatas_.Clear();
      for (int i = 0; i < reservationMemberDatas_.Count; i++) { MessagePool.Instance.Recycle(reservationMemberDatas_[i]); }
      reservationMemberDatas_.Clear();
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (info_ == null) {
              info_ = new global::ETHotfix.RoomInfo();
            }
            input.ReadMessage(info_);
            break;
          }
          case 18: {
            if (data_ == null) {
              data_ = new global::ETHotfix.TeamRoomData();
            }
            input.ReadMessage(data_);
            break;
          }
          case 26: {
            memberDatas_.AddEntriesFrom(input, _repeated_memberDatas_codec);
            break;
          }
          case 34: {
            reservationMemberDatas_.AddEntriesFrom(input, _repeated_reservationMemberDatas_codec);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class C2L_TeamReservationCreate : pb::IMessage {
    private static readonly pb::MessageParser<C2L_TeamReservationCreate> _parser = new pb::MessageParser<C2L_TeamReservationCreate>(() => (C2L_TeamReservationCreate)MessagePool.Instance.Fetch(typeof(C2L_TeamReservationCreate)));
    public static pb::MessageParser<C2L_TeamReservationCreate> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private long roadSettingId_;
    public long RoadSettingId {
      get { return roadSettingId_; }
      set {
        roadSettingId_ = value;
      }
    }

    private long startUTCTimeTick_;
    public long StartUTCTimeTick {
      get { return startUTCTimeTick_; }
      set {
        startUTCTimeTick_ = value;
      }
    }

    private static readonly pb::FieldCodec<long> _repeated_memberUid_codec
        = pb::FieldCodec.ForInt64(26);
    private pbc::RepeatedField<long> memberUid_ = new pbc::RepeatedField<long>();
    public pbc::RepeatedField<long> MemberUid {
      get { return memberUid_; }
      set { memberUid_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RoadSettingId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(RoadSettingId);
      }
      if (StartUTCTimeTick != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(StartUTCTimeTick);
      }
      memberUid_.WriteTo(output, _repeated_memberUid_codec);
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(216, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (RoadSettingId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RoadSettingId);
      }
      if (StartUTCTimeTick != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(StartUTCTimeTick);
      }
      size += memberUid_.CalculateSize(_repeated_memberUid_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      roadSettingId_ = 0;
      startUTCTimeTick_ = 0;
      memberUid_.Clear();
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoadSettingId = input.ReadInt64();
            break;
          }
          case 16: {
            StartUTCTimeTick = input.ReadInt64();
            break;
          }
          case 26:
          case 24: {
            memberUid_.AddEntriesFrom(input, _repeated_memberUid_codec);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class L2C_TeamReservationCreate : pb::IMessage {
    private static readonly pb::MessageParser<L2C_TeamReservationCreate> _parser = new pb::MessageParser<L2C_TeamReservationCreate>(() => (L2C_TeamReservationCreate)MessagePool.Instance.Fetch(typeof(L2C_TeamReservationCreate)));
    public static pb::MessageParser<L2C_TeamReservationCreate> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class C2L_TeamInviteGetList : pb::IMessage {
    private static readonly pb::MessageParser<C2L_TeamInviteGetList> _parser = new pb::MessageParser<C2L_TeamInviteGetList>(() => (C2L_TeamInviteGetList)MessagePool.Instance.Fetch(typeof(C2L_TeamInviteGetList)));
    public static pb::MessageParser<C2L_TeamInviteGetList> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(216, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class L2C_TeamInviteGetList : pb::IMessage {
    private static readonly pb::MessageParser<L2C_TeamInviteGetList> _parser = new pb::MessageParser<L2C_TeamInviteGetList>(() => (L2C_TeamInviteGetList)MessagePool.Instance.Fetch(typeof(L2C_TeamInviteGetList)));
    public static pb::MessageParser<L2C_TeamInviteGetList> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private static readonly pb::FieldCodec<string> _repeated_senderNames_codec
        = pb::FieldCodec.ForString(10);
    private pbc::RepeatedField<string> senderNames_ = new pbc::RepeatedField<string>();
    public pbc::RepeatedField<string> SenderNames {
      get { return senderNames_; }
      set { senderNames_ = value; }
    }

    private static readonly pb::FieldCodec<long> _repeated_inviteIds_codec
        = pb::FieldCodec.ForInt64(18);
    private pbc::RepeatedField<long> inviteIds_ = new pbc::RepeatedField<long>();
    public pbc::RepeatedField<long> InviteIds {
      get { return inviteIds_; }
      set { inviteIds_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      senderNames_.WriteTo(output, _repeated_senderNames_codec);
      inviteIds_.WriteTo(output, _repeated_inviteIds_codec);
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      size += senderNames_.CalculateSize(_repeated_senderNames_codec);
      size += inviteIds_.CalculateSize(_repeated_inviteIds_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      senderNames_.Clear();
      inviteIds_.Clear();
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            senderNames_.AddEntriesFrom(input, _repeated_senderNames_codec);
            break;
          }
          case 18:
          case 16: {
            inviteIds_.AddEntriesFrom(input, _repeated_inviteIds_codec);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class C2L_TeamInviteRefuseAll : pb::IMessage {
    private static readonly pb::MessageParser<C2L_TeamInviteRefuseAll> _parser = new pb::MessageParser<C2L_TeamInviteRefuseAll>(() => (C2L_TeamInviteRefuseAll)MessagePool.Instance.Fetch(typeof(C2L_TeamInviteRefuseAll)));
    public static pb::MessageParser<C2L_TeamInviteRefuseAll> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(216, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class L2C_TeamInviteRefuseAll : pb::IMessage {
    private static readonly pb::MessageParser<L2C_TeamInviteRefuseAll> _parser = new pb::MessageParser<L2C_TeamInviteRefuseAll>(() => (L2C_TeamInviteRefuseAll)MessagePool.Instance.Fetch(typeof(L2C_TeamInviteRefuseAll)));
    public static pb::MessageParser<L2C_TeamInviteRefuseAll> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class C2L_TeamInviteRefuse : pb::IMessage {
    private static readonly pb::MessageParser<C2L_TeamInviteRefuse> _parser = new pb::MessageParser<C2L_TeamInviteRefuse>(() => (C2L_TeamInviteRefuse)MessagePool.Instance.Fetch(typeof(C2L_TeamInviteRefuse)));
    public static pb::MessageParser<C2L_TeamInviteRefuse> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private long inviteId_;
    public long InviteId {
      get { return inviteId_; }
      set {
        inviteId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (InviteId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(InviteId);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(216, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (InviteId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(InviteId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      inviteId_ = 0;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            InviteId = input.ReadInt64();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class L2C_TeamInviteRefuse : pb::IMessage {
    private static readonly pb::MessageParser<L2C_TeamInviteRefuse> _parser = new pb::MessageParser<L2C_TeamInviteRefuse>(() => (L2C_TeamInviteRefuse)MessagePool.Instance.Fetch(typeof(L2C_TeamInviteRefuse)));
    public static pb::MessageParser<L2C_TeamInviteRefuse> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class C2L_TeamReservationCancel : pb::IMessage {
    private static readonly pb::MessageParser<C2L_TeamReservationCancel> _parser = new pb::MessageParser<C2L_TeamReservationCancel>(() => (C2L_TeamReservationCancel)MessagePool.Instance.Fetch(typeof(C2L_TeamReservationCancel)));
    public static pb::MessageParser<C2L_TeamReservationCancel> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private long reservationId_;
    public long ReservationId {
      get { return reservationId_; }
      set {
        reservationId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (ReservationId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(ReservationId);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(216, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (ReservationId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(ReservationId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      reservationId_ = 0;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            ReservationId = input.ReadInt64();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class L2C_TeamReservationCancel : pb::IMessage {
    private static readonly pb::MessageParser<L2C_TeamReservationCancel> _parser = new pb::MessageParser<L2C_TeamReservationCancel>(() => (L2C_TeamReservationCancel)MessagePool.Instance.Fetch(typeof(L2C_TeamReservationCancel)));
    public static pb::MessageParser<L2C_TeamReservationCancel> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class C2L_TeamReservationGetList : pb::IMessage {
    private static readonly pb::MessageParser<C2L_TeamReservationGetList> _parser = new pb::MessageParser<C2L_TeamReservationGetList>(() => (C2L_TeamReservationGetList)MessagePool.Instance.Fetch(typeof(C2L_TeamReservationGetList)));
    public static pb::MessageParser<C2L_TeamReservationGetList> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(216, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class L2C_TeamReservationGetList : pb::IMessage {
    private static readonly pb::MessageParser<L2C_TeamReservationGetList> _parser = new pb::MessageParser<L2C_TeamReservationGetList>(() => (L2C_TeamReservationGetList)MessagePool.Instance.Fetch(typeof(L2C_TeamReservationGetList)));
    public static pb::MessageParser<L2C_TeamReservationGetList> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private static readonly pb::FieldCodec<global::ETHotfix.ReservationData> _repeated_reservationDatas_codec
        = pb::FieldCodec.ForMessage(10, global::ETHotfix.ReservationData.Parser);
    private pbc::RepeatedField<global::ETHotfix.ReservationData> reservationDatas_ = new pbc::RepeatedField<global::ETHotfix.ReservationData>();
    public pbc::RepeatedField<global::ETHotfix.ReservationData> ReservationDatas {
      get { return reservationDatas_; }
      set { reservationDatas_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      reservationDatas_.WriteTo(output, _repeated_reservationDatas_codec);
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      size += reservationDatas_.CalculateSize(_repeated_reservationDatas_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      for (int i = 0; i < reservationDatas_.Count; i++) { MessagePool.Instance.Recycle(reservationDatas_[i]); }
      reservationDatas_.Clear();
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            reservationDatas_.AddEntriesFrom(input, _repeated_reservationDatas_codec);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class C2L_RoamingLeave : pb::IMessage {
    private static readonly pb::MessageParser<C2L_RoamingLeave> _parser = new pb::MessageParser<C2L_RoamingLeave>(() => (C2L_RoamingLeave)MessagePool.Instance.Fetch(typeof(C2L_RoamingLeave)));
    public static pb::MessageParser<C2L_RoamingLeave> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(216, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class L2C_RoamingLeave : pb::IMessage {
    private static readonly pb::MessageParser<L2C_RoamingLeave> _parser = new pb::MessageParser<L2C_RoamingLeave>(() => (L2C_RoamingLeave)MessagePool.Instance.Fetch(typeof(L2C_RoamingLeave)));
    public static pb::MessageParser<L2C_RoamingLeave> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class C2L_TeamLeave : pb::IMessage {
    private static readonly pb::MessageParser<C2L_TeamLeave> _parser = new pb::MessageParser<C2L_TeamLeave>(() => (C2L_TeamLeave)MessagePool.Instance.Fetch(typeof(C2L_TeamLeave)));
    public static pb::MessageParser<C2L_TeamLeave> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(216, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class L2C_TeamLeave : pb::IMessage {
    private static readonly pb::MessageParser<L2C_TeamLeave> _parser = new pb::MessageParser<L2C_TeamLeave>(() => (L2C_TeamLeave)MessagePool.Instance.Fetch(typeof(L2C_TeamLeave)));
    public static pb::MessageParser<L2C_TeamLeave> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class C2L_SyncPlayerState : pb::IMessage {
    private static readonly pb::MessageParser<C2L_SyncPlayerState> _parser = new pb::MessageParser<C2L_SyncPlayerState>(() => (C2L_SyncPlayerState)MessagePool.Instance.Fetch(typeof(C2L_SyncPlayerState)));
    public static pb::MessageParser<C2L_SyncPlayerState> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long actorId_;
    public long ActorId {
      get { return actorId_; }
      set {
        actorId_ = value;
      }
    }

    private global::ETHotfix.PlayerStateData stateData_;
    public global::ETHotfix.PlayerStateData StateData {
      get { return stateData_; }
      set {
        stateData_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (stateData_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(StateData);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (ActorId != 0L) {
        output.WriteRawTag(216, 5);
        output.WriteInt64(ActorId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (ActorId != 0L) {
        size += 2 + pb::CodedOutputStream.ComputeInt64Size(ActorId);
      }
      if (stateData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(StateData);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      if (stateData_ != null) MessagePool.Instance.Recycle(stateData_); stateData_ = null;
      rpcId_ = 0;
      actorId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (stateData_ == null) {
              stateData_ = new global::ETHotfix.PlayerStateData();
            }
            input.ReadMessage(stateData_);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            ActorId = input.ReadInt64();
            break;
          }
        }
      }
    }

  }

  public partial class L2C_SyncPlayerState : pb::IMessage {
    private static readonly pb::MessageParser<L2C_SyncPlayerState> _parser = new pb::MessageParser<L2C_SyncPlayerState>(() => (L2C_SyncPlayerState)MessagePool.Instance.Fetch(typeof(L2C_SyncPlayerState)));
    public static pb::MessageParser<L2C_SyncPlayerState> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private global::ETHotfix.L2C_SyncPlayerState.Types.OptionType type_ = 0;
    public global::ETHotfix.L2C_SyncPlayerState.Types.OptionType Type {
      get { return type_; }
      set {
        type_ = value;
      }
    }

    private global::ETHotfix.RoomInfo info_;
    public global::ETHotfix.RoomInfo Info {
      get { return info_; }
      set {
        info_ = value;
      }
    }

    private global::ETHotfix.TeamRoomData data_;
    public global::ETHotfix.TeamRoomData Data {
      get { return data_; }
      set {
        data_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::ETHotfix.TeamMemberData> _repeated_memberDatas_codec
        = pb::FieldCodec.ForMessage(34, global::ETHotfix.TeamMemberData.Parser);
    private pbc::RepeatedField<global::ETHotfix.TeamMemberData> memberDatas_ = new pbc::RepeatedField<global::ETHotfix.TeamMemberData>();
    public pbc::RepeatedField<global::ETHotfix.TeamMemberData> MemberDatas {
      get { return memberDatas_; }
      set { memberDatas_ = value; }
    }

    private static readonly pb::FieldCodec<global::ETHotfix.ReservationMemberData> _repeated_reservationMemberDatas_codec
        = pb::FieldCodec.ForMessage(42, global::ETHotfix.ReservationMemberData.Parser);
    private pbc::RepeatedField<global::ETHotfix.ReservationMemberData> reservationMemberDatas_ = new pbc::RepeatedField<global::ETHotfix.ReservationMemberData>();
    public pbc::RepeatedField<global::ETHotfix.ReservationMemberData> ReservationMemberDatas {
      get { return reservationMemberDatas_; }
      set { reservationMemberDatas_ = value; }
    }

    private long mapUnitId_;
    public long MapUnitId {
      get { return mapUnitId_; }
      set {
        mapUnitId_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::ETHotfix.MapUnitInfo> _repeated_mapUnitInfos_codec
        = pb::FieldCodec.ForMessage(58, global::ETHotfix.MapUnitInfo.Parser);
    private pbc::RepeatedField<global::ETHotfix.MapUnitInfo> mapUnitInfos_ = new pbc::RepeatedField<global::ETHotfix.MapUnitInfo>();
    public pbc::RepeatedField<global::ETHotfix.MapUnitInfo> MapUnitInfos {
      get { return mapUnitInfos_; }
      set { mapUnitInfos_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Type != 0) {
        output.WriteRawTag(8);
        output.WriteEnum((int) Type);
      }
      if (info_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Info);
      }
      if (data_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Data);
      }
      memberDatas_.WriteTo(output, _repeated_memberDatas_codec);
      reservationMemberDatas_.WriteTo(output, _repeated_reservationMemberDatas_codec);
      if (MapUnitId != 0L) {
        output.WriteRawTag(48);
        output.WriteInt64(MapUnitId);
      }
      mapUnitInfos_.WriteTo(output, _repeated_mapUnitInfos_codec);
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (Type != 0) {
        size += 1 + pb::CodedOutputStream.ComputeEnumSize((int) Type);
      }
      if (info_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Info);
      }
      if (data_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Data);
      }
      size += memberDatas_.CalculateSize(_repeated_memberDatas_codec);
      size += reservationMemberDatas_.CalculateSize(_repeated_reservationMemberDatas_codec);
      if (MapUnitId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MapUnitId);
      }
      size += mapUnitInfos_.CalculateSize(_repeated_mapUnitInfos_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      if (info_ != null) MessagePool.Instance.Recycle(info_); info_ = null;
      if (data_ != null) MessagePool.Instance.Recycle(data_); data_ = null;
      for (int i = 0; i < memberDatas_.Count; i++) { MessagePool.Instance.Recycle(memberDatas_[i]); }
      memberDatas_.Clear();
      for (int i = 0; i < reservationMemberDatas_.Count; i++) { MessagePool.Instance.Recycle(reservationMemberDatas_[i]); }
      reservationMemberDatas_.Clear();
      mapUnitId_ = 0;
      for (int i = 0; i < mapUnitInfos_.Count; i++) { MessagePool.Instance.Recycle(mapUnitInfos_[i]); }
      mapUnitInfos_.Clear();
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            type_ = (global::ETHotfix.L2C_SyncPlayerState.Types.OptionType) input.ReadEnum();
            break;
          }
          case 18: {
            if (info_ == null) {
              info_ = new global::ETHotfix.RoomInfo();
            }
            input.ReadMessage(info_);
            break;
          }
          case 26: {
            if (data_ == null) {
              data_ = new global::ETHotfix.TeamRoomData();
            }
            input.ReadMessage(data_);
            break;
          }
          case 34: {
            memberDatas_.AddEntriesFrom(input, _repeated_memberDatas_codec);
            break;
          }
          case 42: {
            reservationMemberDatas_.AddEntriesFrom(input, _repeated_reservationMemberDatas_codec);
            break;
          }
          case 48: {
            MapUnitId = input.ReadInt64();
            break;
          }
          case 58: {
            mapUnitInfos_.AddEntriesFrom(input, _repeated_mapUnitInfos_codec);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

    #region Nested types
    /// <summary>Container for nested types declared in the L2C_SyncPlayerState message type.</summary>
    public static class Types {
      public enum OptionType {
        /// <summary>
        ///不處理
        /// </summary>
        Nothing = 0,
        /// <summary>
        ///問要不要回EnterRoom
        /// </summary>
        CanReturnEnterRoom = 1,
        /// <summary>
        ///問要不要回StartRoom
        /// </summary>
        CanReturnStartRoom = 2,
        /// <summary>
        ///更新EnterRoom資料
        /// </summary>
        GetInfoEnterRoom = 3,
        /// <summary>
        ///更新StartRoom資料
        /// </summary>
        GetInfoStartRoom = 4,
        /// <summary>
        ///重跑進入StartRoom
        /// </summary>
        GoMap = 5,
      }

    }
    #endregion

  }

  public partial class L2M_TeamModifyMember : pb::IMessage {
    private static readonly pb::MessageParser<L2M_TeamModifyMember> _parser = new pb::MessageParser<L2M_TeamModifyMember>(() => (L2M_TeamModifyMember)MessagePool.Instance.Fetch(typeof(L2M_TeamModifyMember)));
    public static pb::MessageParser<L2M_TeamModifyMember> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long roomId_;
    public long RoomId {
      get { return roomId_; }
      set {
        roomId_ = value;
      }
    }

    private long uid_;
    public long Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RoomId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(RoomId);
      }
      if (Uid != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Uid);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (RoomId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RoomId);
      }
      if (Uid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Uid);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      roomId_ = 0;
      uid_ = 0;
      rpcId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoomId = input.ReadInt64();
            break;
          }
          case 16: {
            Uid = input.ReadInt64();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public partial class M2L_TeamModifyMember : pb::IMessage {
    private static readonly pb::MessageParser<M2L_TeamModifyMember> _parser = new pb::MessageParser<M2L_TeamModifyMember>(() => (M2L_TeamModifyMember)MessagePool.Instance.Fetch(typeof(M2L_TeamModifyMember)));
    public static pb::MessageParser<M2L_TeamModifyMember> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class L2M_TeamLose : pb::IMessage {
    private static readonly pb::MessageParser<L2M_TeamLose> _parser = new pb::MessageParser<L2M_TeamLose>(() => (L2M_TeamLose)MessagePool.Instance.Fetch(typeof(L2M_TeamLose)));
    public static pb::MessageParser<L2M_TeamLose> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long roomId_;
    public long RoomId {
      get { return roomId_; }
      set {
        roomId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RoomId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(RoomId);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (RoomId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RoomId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      roomId_ = 0;
      rpcId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoomId = input.ReadInt64();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public partial class M2L_TeamLose : pb::IMessage {
    private static readonly pb::MessageParser<M2L_TeamLose> _parser = new pb::MessageParser<M2L_TeamLose>(() => (M2L_TeamLose)MessagePool.Instance.Fetch(typeof(M2L_TeamLose)));
    public static pb::MessageParser<M2L_TeamLose> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class L2M_MapUnitCreate : pb::IMessage {
    private static readonly pb::MessageParser<L2M_MapUnitCreate> _parser = new pb::MessageParser<L2M_MapUnitCreate>(() => (L2M_MapUnitCreate)MessagePool.Instance.Fetch(typeof(L2M_MapUnitCreate)));
    public static pb::MessageParser<L2M_MapUnitCreate> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long uid_;
    public long Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    private long gateSessionId_;
    public long GateSessionId {
      get { return gateSessionId_; }
      set {
        gateSessionId_ = value;
      }
    }

    private global::ETHotfix.MapUnitInfo mapUnitInfo_;
    public global::ETHotfix.MapUnitInfo MapUnitInfo {
      get { return mapUnitInfo_; }
      set {
        mapUnitInfo_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Uid != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Uid);
      }
      if (GateSessionId != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(GateSessionId);
      }
      if (mapUnitInfo_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(MapUnitInfo);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Uid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Uid);
      }
      if (GateSessionId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(GateSessionId);
      }
      if (mapUnitInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MapUnitInfo);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uid_ = 0;
      gateSessionId_ = 0;
      if (mapUnitInfo_ != null) MessagePool.Instance.Recycle(mapUnitInfo_); mapUnitInfo_ = null;
      rpcId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uid = input.ReadInt64();
            break;
          }
          case 16: {
            GateSessionId = input.ReadInt64();
            break;
          }
          case 26: {
            if (mapUnitInfo_ == null) {
              mapUnitInfo_ = new global::ETHotfix.MapUnitInfo();
            }
            input.ReadMessage(mapUnitInfo_);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public partial class M2L_MapUnitCreate : pb::IMessage {
    private static readonly pb::MessageParser<M2L_MapUnitCreate> _parser = new pb::MessageParser<M2L_MapUnitCreate>(() => (M2L_MapUnitCreate)MessagePool.Instance.Fetch(typeof(M2L_MapUnitCreate)));
    public static pb::MessageParser<M2L_MapUnitCreate> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private long mapUnitId_;
    public long MapUnitId {
      get { return mapUnitId_; }
      set {
        mapUnitId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (MapUnitId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(MapUnitId);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (MapUnitId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MapUnitId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      mapUnitId_ = 0;
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            MapUnitId = input.ReadInt64();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class L2M_TeamCreate : pb::IMessage {
    private static readonly pb::MessageParser<L2M_TeamCreate> _parser = new pb::MessageParser<L2M_TeamCreate>(() => (L2M_TeamCreate)MessagePool.Instance.Fetch(typeof(L2M_TeamCreate)));
    public static pb::MessageParser<L2M_TeamCreate> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long uid_;
    public long Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    private global::ETHotfix.RoomInfo info_;
    public global::ETHotfix.RoomInfo Info {
      get { return info_; }
      set {
        info_ = value;
      }
    }

    private global::ETHotfix.TeamRoomData data_;
    public global::ETHotfix.TeamRoomData Data {
      get { return data_; }
      set {
        data_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Uid != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Uid);
      }
      if (info_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(Info);
      }
      if (data_ != null) {
        output.WriteRawTag(26);
        output.WriteMessage(Data);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Uid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Uid);
      }
      if (info_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Info);
      }
      if (data_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(Data);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uid_ = 0;
      if (info_ != null) MessagePool.Instance.Recycle(info_); info_ = null;
      if (data_ != null) MessagePool.Instance.Recycle(data_); data_ = null;
      rpcId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uid = input.ReadInt64();
            break;
          }
          case 18: {
            if (info_ == null) {
              info_ = new global::ETHotfix.RoomInfo();
            }
            input.ReadMessage(info_);
            break;
          }
          case 26: {
            if (data_ == null) {
              data_ = new global::ETHotfix.TeamRoomData();
            }
            input.ReadMessage(data_);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public partial class M2L_TeamCreate : pb::IMessage {
    private static readonly pb::MessageParser<M2L_TeamCreate> _parser = new pb::MessageParser<M2L_TeamCreate>(() => (M2L_TeamCreate)MessagePool.Instance.Fetch(typeof(M2L_TeamCreate)));
    public static pb::MessageParser<M2L_TeamCreate> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private long roomId_;
    public long RoomId {
      get { return roomId_; }
      set {
        roomId_ = value;
      }
    }

    private string json_ = "";
    public string Json {
      get { return json_; }
      set {
        json_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RoomId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(RoomId);
      }
      if (Json.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Json);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (RoomId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RoomId);
      }
      if (Json.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Json);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      roomId_ = 0;
      json_ = "";
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoomId = input.ReadInt64();
            break;
          }
          case 18: {
            Json = input.ReadString();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class L2M_GetTeamData : pb::IMessage {
    private static readonly pb::MessageParser<L2M_GetTeamData> _parser = new pb::MessageParser<L2M_GetTeamData>(() => (L2M_GetTeamData)MessagePool.Instance.Fetch(typeof(L2M_GetTeamData)));
    public static pb::MessageParser<L2M_GetTeamData> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long roomId_;
    public long RoomId {
      get { return roomId_; }
      set {
        roomId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RoomId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(RoomId);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (RoomId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RoomId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      roomId_ = 0;
      rpcId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoomId = input.ReadInt64();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public partial class M2L_GetTeamData : pb::IMessage {
    private static readonly pb::MessageParser<M2L_GetTeamData> _parser = new pb::MessageParser<M2L_GetTeamData>(() => (M2L_GetTeamData)MessagePool.Instance.Fetch(typeof(M2L_GetTeamData)));
    public static pb::MessageParser<M2L_GetTeamData> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private string roomJson_ = "";
    public string RoomJson {
      get { return roomJson_; }
      set {
        roomJson_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private global::ETHotfix.TeamRoomData teamData_;
    public global::ETHotfix.TeamRoomData TeamData {
      get { return teamData_; }
      set {
        teamData_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::ETHotfix.TeamMemberData> _repeated_teamMember_codec
        = pb::FieldCodec.ForMessage(26, global::ETHotfix.TeamMemberData.Parser);
    private pbc::RepeatedField<global::ETHotfix.TeamMemberData> teamMember_ = new pbc::RepeatedField<global::ETHotfix.TeamMemberData>();
    public pbc::RepeatedField<global::ETHotfix.TeamMemberData> TeamMember {
      get { return teamMember_; }
      set { teamMember_ = value; }
    }

    private static readonly pb::FieldCodec<global::ETHotfix.ReservationMemberData> _repeated_reservationTeamData_codec
        = pb::FieldCodec.ForMessage(34, global::ETHotfix.ReservationMemberData.Parser);
    private pbc::RepeatedField<global::ETHotfix.ReservationMemberData> reservationTeamData_ = new pbc::RepeatedField<global::ETHotfix.ReservationMemberData>();
    public pbc::RepeatedField<global::ETHotfix.ReservationMemberData> ReservationTeamData {
      get { return reservationTeamData_; }
      set { reservationTeamData_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RoomJson.Length != 0) {
        output.WriteRawTag(10);
        output.WriteString(RoomJson);
      }
      if (teamData_ != null) {
        output.WriteRawTag(18);
        output.WriteMessage(TeamData);
      }
      teamMember_.WriteTo(output, _repeated_teamMember_codec);
      reservationTeamData_.WriteTo(output, _repeated_reservationTeamData_codec);
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (RoomJson.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(RoomJson);
      }
      if (teamData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(TeamData);
      }
      size += teamMember_.CalculateSize(_repeated_teamMember_codec);
      size += reservationTeamData_.CalculateSize(_repeated_reservationTeamData_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      roomJson_ = "";
      if (teamData_ != null) MessagePool.Instance.Recycle(teamData_); teamData_ = null;
      for (int i = 0; i < teamMember_.Count; i++) { MessagePool.Instance.Recycle(teamMember_[i]); }
      teamMember_.Clear();
      for (int i = 0; i < reservationTeamData_.Count; i++) { MessagePool.Instance.Recycle(reservationTeamData_[i]); }
      reservationTeamData_.Clear();
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            RoomJson = input.ReadString();
            break;
          }
          case 18: {
            if (teamData_ == null) {
              teamData_ = new global::ETHotfix.TeamRoomData();
            }
            input.ReadMessage(teamData_);
            break;
          }
          case 26: {
            teamMember_.AddEntriesFrom(input, _repeated_teamMember_codec);
            break;
          }
          case 34: {
            reservationTeamData_.AddEntriesFrom(input, _repeated_reservationTeamData_codec);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class L2M_GetAllMapUnitInfoOnRoom : pb::IMessage {
    private static readonly pb::MessageParser<L2M_GetAllMapUnitInfoOnRoom> _parser = new pb::MessageParser<L2M_GetAllMapUnitInfoOnRoom>(() => (L2M_GetAllMapUnitInfoOnRoom)MessagePool.Instance.Fetch(typeof(L2M_GetAllMapUnitInfoOnRoom)));
    public static pb::MessageParser<L2M_GetAllMapUnitInfoOnRoom> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long roomId_;
    public long RoomId {
      get { return roomId_; }
      set {
        roomId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RoomId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(RoomId);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (RoomId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RoomId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      roomId_ = 0;
      rpcId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoomId = input.ReadInt64();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public partial class M2L_GetAllMapUnitInfoOnRoom : pb::IMessage {
    private static readonly pb::MessageParser<M2L_GetAllMapUnitInfoOnRoom> _parser = new pb::MessageParser<M2L_GetAllMapUnitInfoOnRoom>(() => (M2L_GetAllMapUnitInfoOnRoom)MessagePool.Instance.Fetch(typeof(M2L_GetAllMapUnitInfoOnRoom)));
    public static pb::MessageParser<M2L_GetAllMapUnitInfoOnRoom> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private static readonly pb::FieldCodec<global::ETHotfix.MapUnitInfo> _repeated_data_codec
        = pb::FieldCodec.ForMessage(10, global::ETHotfix.MapUnitInfo.Parser);
    private pbc::RepeatedField<global::ETHotfix.MapUnitInfo> data_ = new pbc::RepeatedField<global::ETHotfix.MapUnitInfo>();
    public pbc::RepeatedField<global::ETHotfix.MapUnitInfo> Data {
      get { return data_; }
      set { data_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      data_.WriteTo(output, _repeated_data_codec);
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      size += data_.CalculateSize(_repeated_data_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      for (int i = 0; i < data_.Count; i++) { MessagePool.Instance.Recycle(data_[i]); }
      data_.Clear();
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            data_.AddEntriesFrom(input, _repeated_data_codec);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class L2M_GetAllMapUnitGlobalInfoOnRoom : pb::IMessage {
    private static readonly pb::MessageParser<L2M_GetAllMapUnitGlobalInfoOnRoom> _parser = new pb::MessageParser<L2M_GetAllMapUnitGlobalInfoOnRoom>(() => (L2M_GetAllMapUnitGlobalInfoOnRoom)MessagePool.Instance.Fetch(typeof(L2M_GetAllMapUnitGlobalInfoOnRoom)));
    public static pb::MessageParser<L2M_GetAllMapUnitGlobalInfoOnRoom> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long roomId_;
    public long RoomId {
      get { return roomId_; }
      set {
        roomId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RoomId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(RoomId);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (RoomId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RoomId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      roomId_ = 0;
      rpcId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoomId = input.ReadInt64();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public partial class M2L_GetAllMapUnitGlobalInfoOnRoom : pb::IMessage {
    private static readonly pb::MessageParser<M2L_GetAllMapUnitGlobalInfoOnRoom> _parser = new pb::MessageParser<M2L_GetAllMapUnitGlobalInfoOnRoom>(() => (M2L_GetAllMapUnitGlobalInfoOnRoom)MessagePool.Instance.Fetch(typeof(M2L_GetAllMapUnitGlobalInfoOnRoom)));
    public static pb::MessageParser<M2L_GetAllMapUnitGlobalInfoOnRoom> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private static readonly pb::FieldCodec<global::ETHotfix.MapUnitInfo_Global> _repeated_data_codec
        = pb::FieldCodec.ForMessage(10, global::ETHotfix.MapUnitInfo_Global.Parser);
    private pbc::RepeatedField<global::ETHotfix.MapUnitInfo_Global> data_ = new pbc::RepeatedField<global::ETHotfix.MapUnitInfo_Global>();
    public pbc::RepeatedField<global::ETHotfix.MapUnitInfo_Global> Data {
      get { return data_; }
      set { data_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      data_.WriteTo(output, _repeated_data_codec);
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      size += data_.CalculateSize(_repeated_data_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      for (int i = 0; i < data_.Count; i++) { MessagePool.Instance.Recycle(data_[i]); }
      data_.Clear();
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            data_.AddEntriesFrom(input, _repeated_data_codec);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class L2M_DestroyRoom : pb::IMessage {
    private static readonly pb::MessageParser<L2M_DestroyRoom> _parser = new pb::MessageParser<L2M_DestroyRoom>(() => (L2M_DestroyRoom)MessagePool.Instance.Fetch(typeof(L2M_DestroyRoom)));
    public static pb::MessageParser<L2M_DestroyRoom> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long roomId_;
    public long RoomId {
      get { return roomId_; }
      set {
        roomId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RoomId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(RoomId);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (RoomId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RoomId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      roomId_ = 0;
      rpcId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoomId = input.ReadInt64();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public partial class M2L_DestroyRoom : pb::IMessage {
    private static readonly pb::MessageParser<M2L_DestroyRoom> _parser = new pb::MessageParser<M2L_DestroyRoom>(() => (M2L_DestroyRoom)MessagePool.Instance.Fetch(typeof(M2L_DestroyRoom)));
    public static pb::MessageParser<M2L_DestroyRoom> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class L2M_SetReservationMember : pb::IMessage {
    private static readonly pb::MessageParser<L2M_SetReservationMember> _parser = new pb::MessageParser<L2M_SetReservationMember>(() => (L2M_SetReservationMember)MessagePool.Instance.Fetch(typeof(L2M_SetReservationMember)));
    public static pb::MessageParser<L2M_SetReservationMember> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long roomId_;
    public long RoomId {
      get { return roomId_; }
      set {
        roomId_ = value;
      }
    }

    private static readonly pb::FieldCodec<global::ETHotfix.ReservationMemberData> _repeated_data_codec
        = pb::FieldCodec.ForMessage(18, global::ETHotfix.ReservationMemberData.Parser);
    private pbc::RepeatedField<global::ETHotfix.ReservationMemberData> data_ = new pbc::RepeatedField<global::ETHotfix.ReservationMemberData>();
    public pbc::RepeatedField<global::ETHotfix.ReservationMemberData> Data {
      get { return data_; }
      set { data_ = value; }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RoomId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(RoomId);
      }
      data_.WriteTo(output, _repeated_data_codec);
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (RoomId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RoomId);
      }
      size += data_.CalculateSize(_repeated_data_codec);
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      roomId_ = 0;
      for (int i = 0; i < data_.Count; i++) { MessagePool.Instance.Recycle(data_[i]); }
      data_.Clear();
      rpcId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoomId = input.ReadInt64();
            break;
          }
          case 18: {
            data_.AddEntriesFrom(input, _repeated_data_codec);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public partial class M2L_SetReservationMember : pb::IMessage {
    private static readonly pb::MessageParser<M2L_SetReservationMember> _parser = new pb::MessageParser<M2L_SetReservationMember>(() => (M2L_SetReservationMember)MessagePool.Instance.Fetch(typeof(M2L_SetReservationMember)));
    public static pb::MessageParser<M2L_SetReservationMember> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class L2M_RunRoomOnTeam : pb::IMessage {
    private static readonly pb::MessageParser<L2M_RunRoomOnTeam> _parser = new pb::MessageParser<L2M_RunRoomOnTeam>(() => (L2M_RunRoomOnTeam)MessagePool.Instance.Fetch(typeof(L2M_RunRoomOnTeam)));
    public static pb::MessageParser<L2M_RunRoomOnTeam> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long roomId_;
    public long RoomId {
      get { return roomId_; }
      set {
        roomId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RoomId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(RoomId);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (RoomId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RoomId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      roomId_ = 0;
      rpcId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoomId = input.ReadInt64();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public partial class M2L_RunRoomOnTeam : pb::IMessage {
    private static readonly pb::MessageParser<M2L_RunRoomOnTeam> _parser = new pb::MessageParser<M2L_RunRoomOnTeam>(() => (M2L_RunRoomOnTeam)MessagePool.Instance.Fetch(typeof(M2L_RunRoomOnTeam)));
    public static pb::MessageParser<M2L_RunRoomOnTeam> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class L2M_GetTeamMember : pb::IMessage {
    private static readonly pb::MessageParser<L2M_GetTeamMember> _parser = new pb::MessageParser<L2M_GetTeamMember>(() => (L2M_GetTeamMember)MessagePool.Instance.Fetch(typeof(L2M_GetTeamMember)));
    public static pb::MessageParser<L2M_GetTeamMember> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long roomId_;
    public long RoomId {
      get { return roomId_; }
      set {
        roomId_ = value;
      }
    }

    private long uid_;
    public long Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RoomId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(RoomId);
      }
      if (Uid != 0L) {
        output.WriteRawTag(16);
        output.WriteInt64(Uid);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (RoomId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(RoomId);
      }
      if (Uid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Uid);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      roomId_ = 0;
      uid_ = 0;
      rpcId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            RoomId = input.ReadInt64();
            break;
          }
          case 16: {
            Uid = input.ReadInt64();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public partial class M2L_GetTeamMember : pb::IMessage {
    private static readonly pb::MessageParser<M2L_GetTeamMember> _parser = new pb::MessageParser<M2L_GetTeamMember>(() => (M2L_GetTeamMember)MessagePool.Instance.Fetch(typeof(M2L_GetTeamMember)));
    public static pb::MessageParser<M2L_GetTeamMember> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private global::ETHotfix.TeamMemberData memberData_;
    public global::ETHotfix.TeamMemberData MemberData {
      get { return memberData_; }
      set {
        memberData_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (memberData_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(MemberData);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (memberData_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(MemberData);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      if (memberData_ != null) MessagePool.Instance.Recycle(memberData_); memberData_ = null;
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (memberData_ == null) {
              memberData_ = new global::ETHotfix.TeamMemberData();
            }
            input.ReadMessage(memberData_);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class M2L_CreateInvite : pb::IMessage {
    private static readonly pb::MessageParser<M2L_CreateInvite> _parser = new pb::MessageParser<M2L_CreateInvite>(() => (M2L_CreateInvite)MessagePool.Instance.Fetch(typeof(M2L_CreateInvite)));
    public static pb::MessageParser<M2L_CreateInvite> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private global::ETHotfix.InviteData inviteInfo_;
    public global::ETHotfix.InviteData InviteInfo {
      get { return inviteInfo_; }
      set {
        inviteInfo_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (inviteInfo_ != null) {
        output.WriteRawTag(10);
        output.WriteMessage(InviteInfo);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (inviteInfo_ != null) {
        size += 1 + pb::CodedOutputStream.ComputeMessageSize(InviteInfo);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      if (inviteInfo_ != null) MessagePool.Instance.Recycle(inviteInfo_); inviteInfo_ = null;
      rpcId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 10: {
            if (inviteInfo_ == null) {
              inviteInfo_ = new global::ETHotfix.InviteData();
            }
            input.ReadMessage(inviteInfo_);
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public partial class L2M_CreateInvite : pb::IMessage {
    private static readonly pb::MessageParser<L2M_CreateInvite> _parser = new pb::MessageParser<L2M_CreateInvite>(() => (L2M_CreateInvite)MessagePool.Instance.Fetch(typeof(L2M_CreateInvite)));
    public static pb::MessageParser<L2M_CreateInvite> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private long inviteId_;
    public long InviteId {
      get { return inviteId_; }
      set {
        inviteId_ = value;
      }
    }

    private string json_ = "";
    public string Json {
      get { return json_; }
      set {
        json_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (InviteId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(InviteId);
      }
      if (Json.Length != 0) {
        output.WriteRawTag(18);
        output.WriteString(Json);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (InviteId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(InviteId);
      }
      if (Json.Length != 0) {
        size += 1 + pb::CodedOutputStream.ComputeStringSize(Json);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      inviteId_ = 0;
      json_ = "";
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            InviteId = input.ReadInt64();
            break;
          }
          case 18: {
            Json = input.ReadString();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class L2M_DestroyMapUnit : pb::IMessage {
    private static readonly pb::MessageParser<L2M_DestroyMapUnit> _parser = new pb::MessageParser<L2M_DestroyMapUnit>(() => (L2M_DestroyMapUnit)MessagePool.Instance.Fetch(typeof(L2M_DestroyMapUnit)));
    public static pb::MessageParser<L2M_DestroyMapUnit> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long mapUnitId_;
    public long MapUnitId {
      get { return mapUnitId_; }
      set {
        mapUnitId_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (MapUnitId != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(MapUnitId);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (MapUnitId != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(MapUnitId);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      mapUnitId_ = 0;
      rpcId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            MapUnitId = input.ReadInt64();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public partial class M2L_DestroyMapUnit : pb::IMessage {
    private static readonly pb::MessageParser<M2L_DestroyMapUnit> _parser = new pb::MessageParser<M2L_DestroyMapUnit>(() => (M2L_DestroyMapUnit)MessagePool.Instance.Fetch(typeof(M2L_DestroyMapUnit)));
    public static pb::MessageParser<M2L_DestroyMapUnit> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class L2M_RoamingLeave : pb::IMessage {
    private static readonly pb::MessageParser<L2M_RoamingLeave> _parser = new pb::MessageParser<L2M_RoamingLeave>(() => (L2M_RoamingLeave)MessagePool.Instance.Fetch(typeof(L2M_RoamingLeave)));
    public static pb::MessageParser<L2M_RoamingLeave> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long uid_;
    public long Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Uid != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Uid);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Uid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Uid);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uid_ = 0;
      rpcId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uid = input.ReadInt64();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public partial class M2L_RoamingLeave : pb::IMessage {
    private static readonly pb::MessageParser<M2L_RoamingLeave> _parser = new pb::MessageParser<M2L_RoamingLeave>(() => (M2L_RoamingLeave)MessagePool.Instance.Fetch(typeof(M2L_RoamingLeave)));
    public static pb::MessageParser<M2L_RoamingLeave> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class L2M_TeamLeave : pb::IMessage {
    private static readonly pb::MessageParser<L2M_TeamLeave> _parser = new pb::MessageParser<L2M_TeamLeave>(() => (L2M_TeamLeave)MessagePool.Instance.Fetch(typeof(L2M_TeamLeave)));
    public static pb::MessageParser<L2M_TeamLeave> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long uid_;
    public long Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Uid != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Uid);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Uid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Uid);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uid_ = 0;
      rpcId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uid = input.ReadInt64();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public partial class M2L_TeamLeave : pb::IMessage {
    private static readonly pb::MessageParser<M2L_TeamLeave> _parser = new pb::MessageParser<M2L_TeamLeave>(() => (M2L_TeamLeave)MessagePool.Instance.Fetch(typeof(M2L_TeamLeave)));
    public static pb::MessageParser<M2L_TeamLeave> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  public partial class L2H_AuthenticateHttp : pb::IMessage {
    private static readonly pb::MessageParser<L2H_AuthenticateHttp> _parser = new pb::MessageParser<L2H_AuthenticateHttp>(() => (L2H_AuthenticateHttp)MessagePool.Instance.Fetch(typeof(L2H_AuthenticateHttp)));
    public static pb::MessageParser<L2H_AuthenticateHttp> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private long uid_;
    public long Uid {
      get { return uid_; }
      set {
        uid_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Uid != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Uid);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Uid != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Uid);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      uid_ = 0;
      rpcId_ = 0;
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Uid = input.ReadInt64();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
        }
      }
    }

  }

  public partial class H2L_AuthenticateHttp : pb::IMessage {
    private static readonly pb::MessageParser<H2L_AuthenticateHttp> _parser = new pb::MessageParser<H2L_AuthenticateHttp>(() => (H2L_AuthenticateHttp)MessagePool.Instance.Fetch(typeof(H2L_AuthenticateHttp)));
    public static pb::MessageParser<H2L_AuthenticateHttp> Parser { get { return _parser; } }

    private int rpcId_;
    public int RpcId {
      get { return rpcId_; }
      set {
        rpcId_ = value;
      }
    }

    private int error_;
    public int Error {
      get { return error_; }
      set {
        error_ = value;
      }
    }

    private string message_ = "";
    public string Message {
      get { return message_; }
      set {
        message_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
      }
    }

    private long key_;
    public long Key {
      get { return key_; }
      set {
        key_ = value;
      }
    }

    public void WriteTo(pb::CodedOutputStream output) {
      if (Key != 0L) {
        output.WriteRawTag(8);
        output.WriteInt64(Key);
      }
      if (RpcId != 0) {
        output.WriteRawTag(208, 5);
        output.WriteInt32(RpcId);
      }
      if (Error != 0) {
        output.WriteRawTag(216, 5);
        output.WriteInt32(Error);
      }
      if (Message.Length != 0) {
        output.WriteRawTag(226, 5);
        output.WriteString(Message);
      }
    }

    public int CalculateSize() {
      int size = 0;
      if (RpcId != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(RpcId);
      }
      if (Error != 0) {
        size += 2 + pb::CodedOutputStream.ComputeInt32Size(Error);
      }
      if (Message.Length != 0) {
        size += 2 + pb::CodedOutputStream.ComputeStringSize(Message);
      }
      if (Key != 0L) {
        size += 1 + pb::CodedOutputStream.ComputeInt64Size(Key);
      }
      return size;
    }

    public void MergeFrom(pb::CodedInputStream input) {
      key_ = 0;
      rpcId_ = 0;
      error_ = 0;
      message_ = "";
      uint tag;
      while ((tag = input.ReadTag()) != 0) {
        switch(tag) {
          default:
            input.SkipLastField();
            break;
          case 8: {
            Key = input.ReadInt64();
            break;
          }
          case 720: {
            RpcId = input.ReadInt32();
            break;
          }
          case 728: {
            Error = input.ReadInt32();
            break;
          }
          case 738: {
            Message = input.ReadString();
            break;
          }
        }
      }
    }

  }

  #endregion

}

#endregion Designer generated code
